/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddHrmPreentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequest extends $tea.Model {
    agentId?: number;
    groups?: AddHrmPreentryRequestGroups[];
    mobile?: string;
    name?: string;
    preEntryTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryResponseBody extends $tea.Model {
    tmpUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddHrmPreentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryResponseBody extends $tea.Model {
    certNO?: string;
    employJobId?: string;
    employJobIdLabel?: string;
    employPositionId?: string;
    employPositionIdLabel?: string;
    employPositionRankId?: string;
    employPositionRankIdLabel?: string;
    hiredDate?: string;
    lastWorkDay?: string;
    mainDeptId?: number;
    mainDeptName?: string;
    name?: string;
    realName?: string;
    terminationReasonPassive?: string[];
    terminationReasonVoluntary?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ECertQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferRequest extends $tea.Model {
    deptIdsAfterTransfer?: number[];
    jobIdAfterTransfer?: string;
    mainDeptIdAfterTransfer?: number;
    operateUserId?: string;
    positionIdAfterTransfer?: string;
    positionLevelAfterTransfer?: string;
    positionNameAfterTransfer?: string;
    rankIdAfterTransfer?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: HrmProcessTransferResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryRequest extends $tea.Model {
    bizUK?: string;
    maxResults?: number;
    nextToken?: number;
    optUserId?: string;
    queryParams?: MasterDataQueryRequestQueryParams[];
    relationIds?: string[];
    scopeCode?: string;
    tenantId?: number;
    viewEntityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    result?: MasterDataQueryResponseBodyResult[];
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: MasterDataQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequest extends $tea.Model {
    body?: MasterDataSaveRequestBody[];
    tenantId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveResponseBody extends $tea.Model {
    allSuccess?: boolean;
    failResult?: MasterDataSaveResponseBodyFailResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: MasterDataSaveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyRequest extends $tea.Model {
    entityCode?: string;
    scopeCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyResponseBody extends $tea.Model {
    result?: MasterDataTenantQueyResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: MasterDataTenantQueyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    operateUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryCustomEntryProcessesResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryCustomEntryProcessesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoRequest extends $tea.Model {
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoShrinkRequest extends $tea.Model {
    userIdListShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponseBody extends $tea.Model {
    result?: QueryHrmEmployeeDismissionInfoResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryHrmEmployeeDismissionInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    rankCategoryId?: string;
    rankCode?: string;
    rankName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryJobRanksResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryJobRanksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsRequest extends $tea.Model {
    jobName?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryJobsResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryJobsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsRequest extends $tea.Model {
    deptId?: number;
    inCategoryIds?: string[];
    inPositionIds?: string[];
    positionName?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryPositionsResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryPositionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitRequest extends $tea.Model {
    category?: string;
    claimTime?: number;
    description?: string;
    finishTime?: number;
    outerId?: string;
    status?: string;
    title?: string;
    userId?: string;
    solutionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SolutionTaskInitResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveRequest extends $tea.Model {
    claimTime?: number;
    description?: string;
    finishTime?: number;
    outerId?: string;
    solutionInstanceId?: string;
    startTime?: number;
    status?: string;
    taskType?: string;
    templateOuterId?: string;
    title?: string;
    userId?: string;
    solutionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SolutionTaskSaveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateRequest extends $tea.Model {
    delete?: boolean;
    des?: string;
    ext?: string;
    name?: string;
    optUserId?: string;
    outerId?: string;
    taskScopeVO?: SyncTaskTemplateRequestTaskScopeVO;
    taskType?: string;
    solutionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SyncTaskTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequestGroupsSectionsEmpFieldVOList extends $tea.Model {
    fieldCode?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequestGroupsSections extends $tea.Model {
    empFieldVOList?: AddHrmPreentryRequestGroupsSectionsEmpFieldVOList[];
    oldIndex?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequestGroups extends $tea.Model {
    groupId?: string;
    sections?: AddHrmPreentryRequestGroupsSections[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryRequestQueryParamsConditionList extends $tea.Model {
    operate?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryRequestQueryParams extends $tea.Model {
    conditionList?: MasterDataQueryRequestQueryParamsConditionList[];
    fieldCode?: string;
    joinType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBodyResultViewEntityFieldVOListFieldDataVO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBodyResultViewEntityFieldVOList extends $tea.Model {
    fieldCode?: string;
    fieldDataVO?: MasterDataQueryResponseBodyResultViewEntityFieldVOListFieldDataVO;
    fieldName?: string;
    fieldType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBodyResult extends $tea.Model {
    outerId?: string;
    relationId?: string;
    scopeCode?: string;
    viewEntityCode?: string;
    viewEntityFieldVOList?: MasterDataQueryResponseBodyResultViewEntityFieldVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequestBodyFieldList extends $tea.Model {
    name?: string;
    valueStr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequestBodyScope extends $tea.Model {
    scopeCode?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequestBody extends $tea.Model {
    bizTime?: number;
    bizUk?: string;
    entityCode?: string;
    fieldList?: MasterDataSaveRequestBodyFieldList[];
    scope?: MasterDataSaveRequestBodyScope;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveResponseBodyFailResult extends $tea.Model {
    bizUk?: string;
    errorCode?: string;
    errorMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyResponseBodyResult extends $tea.Model {
    hasData?: boolean;
    integrateDataAuth?: boolean;
    name?: string;
    readAuth?: boolean;
    tenantId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesResponseBodyList extends $tea.Model {
    formDesc?: string;
    formId?: string;
    formName?: string;
    shortUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponseBodyResultDeptList extends $tea.Model {
    deptId?: number;
    deptPath?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponseBodyResult extends $tea.Model {
    deptList?: QueryHrmEmployeeDismissionInfoResponseBodyResultDeptList[];
    handoverUserId?: string;
    lastWorkDay?: number;
    mainDeptId?: number;
    mainDeptName?: string;
    passiveReason?: string[];
    preStatus?: number;
    reasonMemo?: string;
    status?: number;
    userId?: string;
    voluntaryReason?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksResponseBodyList extends $tea.Model {
    maxJobGrade?: number;
    minJobGrade?: number;
    rankCategoryId?: string;
    rankCode?: string;
    rankDescription?: string;
    rankId?: string;
    rankName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsResponseBodyList extends $tea.Model {
    jobDescription?: string;
    jobId?: string;
    jobName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsResponseBodyList extends $tea.Model {
    jobId?: string;
    positionCategoryId?: string;
    positionDes?: string;
    positionId?: string;
    positionName?: string;
    rankIdList?: string[];
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateRequestTaskScopeVO extends $tea.Model {
    deptIds?: number[];
    positionIds?: string[];
    roleIds?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    addHrmPreentry(request: AddHrmPreentryRequest): Promise<AddHrmPreentryResponse>;
    addHrmPreentryWithOptions(request: AddHrmPreentryRequest, headers: AddHrmPreentryHeaders, runtime: $Util.RuntimeOptions): Promise<AddHrmPreentryResponse>;
    eCertQuery(request: ECertQueryRequest): Promise<ECertQueryResponse>;
    eCertQueryWithOptions(request: ECertQueryRequest, headers: ECertQueryHeaders, runtime: $Util.RuntimeOptions): Promise<ECertQueryResponse>;
    hrmProcessTransfer(request: HrmProcessTransferRequest): Promise<HrmProcessTransferResponse>;
    hrmProcessTransferWithOptions(request: HrmProcessTransferRequest, headers: HrmProcessTransferHeaders, runtime: $Util.RuntimeOptions): Promise<HrmProcessTransferResponse>;
    masterDataQuery(request: MasterDataQueryRequest): Promise<MasterDataQueryResponse>;
    masterDataQueryWithOptions(request: MasterDataQueryRequest, headers: MasterDataQueryHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDataQueryResponse>;
    masterDataSave(request: MasterDataSaveRequest): Promise<MasterDataSaveResponse>;
    masterDataSaveWithOptions(request: MasterDataSaveRequest, headers: MasterDataSaveHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDataSaveResponse>;
    masterDataTenantQuey(request: MasterDataTenantQueyRequest): Promise<MasterDataTenantQueyResponse>;
    masterDataTenantQueyWithOptions(request: MasterDataTenantQueyRequest, headers: MasterDataTenantQueyHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDataTenantQueyResponse>;
    queryCustomEntryProcesses(request: QueryCustomEntryProcessesRequest): Promise<QueryCustomEntryProcessesResponse>;
    queryCustomEntryProcessesWithOptions(request: QueryCustomEntryProcessesRequest, headers: QueryCustomEntryProcessesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCustomEntryProcessesResponse>;
    queryHrmEmployeeDismissionInfo(request: QueryHrmEmployeeDismissionInfoRequest): Promise<QueryHrmEmployeeDismissionInfoResponse>;
    queryHrmEmployeeDismissionInfoWithOptions(tmpReq: QueryHrmEmployeeDismissionInfoRequest, headers: QueryHrmEmployeeDismissionInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHrmEmployeeDismissionInfoResponse>;
    queryJobRanks(request: QueryJobRanksRequest): Promise<QueryJobRanksResponse>;
    queryJobRanksWithOptions(request: QueryJobRanksRequest, headers: QueryJobRanksHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobRanksResponse>;
    queryJobs(request: QueryJobsRequest): Promise<QueryJobsResponse>;
    queryJobsWithOptions(request: QueryJobsRequest, headers: QueryJobsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobsResponse>;
    queryPositions(request: QueryPositionsRequest): Promise<QueryPositionsResponse>;
    queryPositionsWithOptions(request: QueryPositionsRequest, headers: QueryPositionsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPositionsResponse>;
    solutionTaskInit(request: SolutionTaskInitRequest): Promise<SolutionTaskInitResponse>;
    solutionTaskInitWithOptions(request: SolutionTaskInitRequest, headers: SolutionTaskInitHeaders, runtime: $Util.RuntimeOptions): Promise<SolutionTaskInitResponse>;
    solutionTaskSave(request: SolutionTaskSaveRequest): Promise<SolutionTaskSaveResponse>;
    solutionTaskSaveWithOptions(request: SolutionTaskSaveRequest, headers: SolutionTaskSaveHeaders, runtime: $Util.RuntimeOptions): Promise<SolutionTaskSaveResponse>;
    syncTaskTemplate(request: SyncTaskTemplateRequest): Promise<SyncTaskTemplateResponse>;
    syncTaskTemplateWithOptions(request: SyncTaskTemplateRequest, headers: SyncTaskTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<SyncTaskTemplateResponse>;
}
