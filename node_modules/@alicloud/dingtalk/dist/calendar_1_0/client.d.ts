/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddAttendeeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAttendeeRequest extends $tea.Model {
    attendeesToAdd?: AddAttendeeRequestAttendeesToAdd[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAttendeeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInResponseBody extends $tea.Model {
    checkInTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CheckInResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertLegacyEventIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertLegacyEventIdRequest extends $tea.Model {
    legacyEventIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertLegacyEventIdResponseBody extends $tea.Model {
    legacyEventIdMap?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertLegacyEventIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ConvertLegacyEventIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAclsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAclsRequest extends $tea.Model {
    privilege?: string;
    scope?: CreateAclsRequestScope;
    sendMsg?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAclsResponseBody extends $tea.Model {
    aclId?: string;
    privilege?: string;
    scope?: CreateAclsResponseBodyScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAclsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateAclsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequest extends $tea.Model {
    attendees?: CreateEventRequestAttendees[];
    description?: string;
    end?: CreateEventRequestEnd;
    extra?: {
        [key: string]: string;
    };
    isAllDay?: boolean;
    location?: CreateEventRequestLocation;
    onlineMeetingInfo?: CreateEventRequestOnlineMeetingInfo;
    recurrence?: CreateEventRequestRecurrence;
    reminders?: CreateEventRequestReminders[];
    start?: CreateEventRequestStart;
    summary?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBody extends $tea.Model {
    attendees?: CreateEventResponseBodyAttendees[];
    createTime?: string;
    description?: string;
    end?: CreateEventResponseBodyEnd;
    id?: string;
    isAllDay?: boolean;
    location?: CreateEventResponseBodyLocation;
    onlineMeetingInfo?: CreateEventResponseBodyOnlineMeetingInfo;
    organizer?: CreateEventResponseBodyOrganizer;
    recurrence?: CreateEventResponseBodyRecurrence;
    reminders?: CreateEventResponseBodyReminders[];
    start?: CreateEventResponseBodyStart;
    summary?: string;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribedCalendarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribedCalendarRequest extends $tea.Model {
    description?: string;
    managers?: string[];
    name?: string;
    subscribeScope?: CreateSubscribedCalendarRequestSubscribeScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribedCalendarResponseBody extends $tea.Model {
    calendarId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribedCalendarResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateSubscribedCalendarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAclHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAclResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEventResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribedCalendarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribedCalendarResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribedCalendarResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteSubscribedCalendarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateCaldavAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    dingUid?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateCaldavAccountRequest extends $tea.Model {
    device?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateCaldavAccountResponseBody extends $tea.Model {
    password?: string;
    serverAddress?: string;
    username?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateCaldavAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GenerateCaldavAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventRequest extends $tea.Model {
    maxAttendees?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBody extends $tea.Model {
    attendees?: GetEventResponseBodyAttendees[];
    createTime?: string;
    description?: string;
    end?: GetEventResponseBodyEnd;
    id?: string;
    isAllDay?: boolean;
    location?: GetEventResponseBodyLocation;
    onlineMeetingInfo?: GetEventResponseBodyOnlineMeetingInfo;
    organizer?: GetEventResponseBodyOrganizer;
    recurrence?: GetEventResponseBodyRecurrence;
    reminders?: GetEventResponseBodyReminders[];
    seriesMasterId?: string;
    start?: GetEventResponseBodyStart;
    status?: string;
    summary?: string;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleRequest extends $tea.Model {
    endTime?: string;
    startTime?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleResponseBody extends $tea.Model {
    scheduleInformation?: GetScheduleResponseBodyScheduleInformation[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignInListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignInListRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignInListResponseBody extends $tea.Model {
    nextToken?: string;
    users?: GetSignInListResponseBodyUsers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignInListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSignInListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignOutListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignOutListRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignOutListResponseBody extends $tea.Model {
    nextToken?: string;
    users?: GetSignOutListResponseBodyUsers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignOutListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSignOutListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscribedCalendarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscribedCalendarResponseBody extends $tea.Model {
    author?: string;
    calendarId?: string;
    description?: string;
    managers?: string[];
    name?: string;
    subscribeScope?: GetSubscribedCalendarResponseBodySubscribeScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscribedCalendarResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSubscribedCalendarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAclsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAclsResponseBody extends $tea.Model {
    acls?: ListAclsResponseBodyAcls[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAclsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListAclsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAttendeesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAttendeesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAttendeesResponseBody extends $tea.Model {
    attendees?: ListAttendeesResponseBodyAttendees[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAttendeesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListAttendeesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCalendarsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCalendarsResponseBody extends $tea.Model {
    response?: ListCalendarsResponseBodyResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCalendarsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListCalendarsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsRequest extends $tea.Model {
    maxAttendees?: number;
    maxResults?: number;
    nextToken?: string;
    showDeleted?: boolean;
    syncToken?: string;
    timeMax?: string;
    timeMin?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBody extends $tea.Model {
    events?: ListEventsResponseBodyEvents[];
    nextToken?: string;
    syncToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesRequest extends $tea.Model {
    maxAttendees?: number;
    maxResults?: number;
    seriesMasterId?: string;
    startRecurrenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBody extends $tea.Model {
    events?: ListEventsInstancesResponseBodyEvents[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListEventsInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewRequest extends $tea.Model {
    maxAttendees?: number;
    maxResults?: number;
    nextToken?: string;
    timeMax?: string;
    timeMin?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBody extends $tea.Model {
    events?: ListEventsViewResponseBodyEvents[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListEventsViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequest extends $tea.Model {
    attendees?: PatchEventRequestAttendees[];
    description?: string;
    end?: PatchEventRequestEnd;
    extra?: {
        [key: string]: string;
    };
    id?: string;
    isAllDay?: boolean;
    location?: PatchEventRequestLocation;
    recurrence?: PatchEventRequestRecurrence;
    reminders?: PatchEventRequestReminders[];
    start?: PatchEventRequestStart;
    summary?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBody extends $tea.Model {
    attendees?: PatchEventResponseBodyAttendees[];
    createTime?: string;
    description?: string;
    end?: PatchEventResponseBodyEnd;
    id?: string;
    isAllDay?: boolean;
    location?: PatchEventResponseBodyLocation;
    organizer?: PatchEventResponseBodyOrganizer;
    recurrence?: PatchEventResponseBodyRecurrence;
    reminders?: PatchEventResponseBodyReminders[];
    start?: PatchEventResponseBodyStart;
    summary?: string;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PatchEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAttendeeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAttendeeRequest extends $tea.Model {
    attendeesToRemove?: RemoveAttendeeRequestAttendeesToRemove[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAttendeeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RespondEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RespondEventRequest extends $tea.Model {
    responseStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RespondEventResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignInHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignInResponseBody extends $tea.Model {
    checkInTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignInResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SignInResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignOutHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignOutResponseBody extends $tea.Model {
    checkOutTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignOutResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SignOutResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeCalendarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeCalendarResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribedCalendarsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribedCalendarsRequest extends $tea.Model {
    description?: string;
    managers?: string[];
    name?: string;
    subscribeScope?: UpdateSubscribedCalendarsRequestSubscribeScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribedCalendarsResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribedCalendarsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateSubscribedCalendarsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAttendeeRequestAttendeesToAdd extends $tea.Model {
    id?: string;
    isOptional?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAclsRequestScope extends $tea.Model {
    scopeType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAclsResponseBodyScope extends $tea.Model {
    scopeType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestAttendees extends $tea.Model {
    id?: string;
    isOptional?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestLocation extends $tea.Model {
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestOnlineMeetingInfo extends $tea.Model {
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestRecurrence extends $tea.Model {
    pattern?: CreateEventRequestRecurrencePattern;
    range?: CreateEventRequestRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestReminders extends $tea.Model {
    method?: string;
    minutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventRequestStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyAttendees extends $tea.Model {
    displayName?: string;
    id?: string;
    isOptional?: boolean;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyLocation extends $tea.Model {
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyOnlineMeetingInfo extends $tea.Model {
    conferenceId?: string;
    extraInfo?: {
        [key: string]: any;
    };
    type?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyOrganizer extends $tea.Model {
    displayName?: string;
    id?: string;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyRecurrence extends $tea.Model {
    pattern?: CreateEventResponseBodyRecurrencePattern;
    range?: CreateEventResponseBodyRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyReminders extends $tea.Model {
    method?: string;
    minutes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventResponseBodyStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribedCalendarRequestSubscribeScope extends $tea.Model {
    corpIds?: string[];
    openConversationIds?: string[];
    unionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyAttendees extends $tea.Model {
    displayName?: string;
    id?: string;
    isOptional?: boolean;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyLocation extends $tea.Model {
    displayName?: string;
    meetingRooms?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyOnlineMeetingInfo extends $tea.Model {
    conferenceId?: string;
    extraInfo?: {
        [key: string]: any;
    };
    type?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyOrganizer extends $tea.Model {
    displayName?: string;
    id?: string;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyRecurrence extends $tea.Model {
    pattern?: GetEventResponseBodyRecurrencePattern;
    range?: GetEventResponseBodyRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyReminders extends $tea.Model {
    method?: string;
    minutes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEventResponseBodyStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleResponseBodyScheduleInformationScheduleItemsEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleResponseBodyScheduleInformationScheduleItemsStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleResponseBodyScheduleInformationScheduleItems extends $tea.Model {
    end?: GetScheduleResponseBodyScheduleInformationScheduleItemsEnd;
    start?: GetScheduleResponseBodyScheduleInformationScheduleItemsStart;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetScheduleResponseBodyScheduleInformation extends $tea.Model {
    error?: string;
    scheduleItems?: GetScheduleResponseBodyScheduleInformationScheduleItems[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignInListResponseBodyUsers extends $tea.Model {
    checkInTime?: number;
    displayName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignOutListResponseBodyUsers extends $tea.Model {
    checkOutTime?: number;
    displayName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscribedCalendarResponseBodySubscribeScope extends $tea.Model {
    corpIds?: string[];
    openConversationIds?: string[];
    unionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAclsResponseBodyAclsScope extends $tea.Model {
    scopeType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAclsResponseBodyAcls extends $tea.Model {
    aclId?: string;
    privilege?: string;
    scope?: ListAclsResponseBodyAclsScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAttendeesResponseBodyAttendees extends $tea.Model {
    displayName?: string;
    id?: string;
    isOptional?: boolean;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCalendarsResponseBodyResponseCalendars extends $tea.Model {
    description?: string;
    eTag?: string;
    id?: string;
    privilege?: string;
    summary?: string;
    timeZone?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCalendarsResponseBodyResponse extends $tea.Model {
    calendars?: ListCalendarsResponseBodyResponseCalendars[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsAttendees extends $tea.Model {
    displayName?: string;
    id?: string;
    isOptional?: boolean;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsLocation extends $tea.Model {
    displayName?: string;
    meetingRooms?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsOnlineMeetingInfo extends $tea.Model {
    conferenceId?: string;
    extraInfo?: {
        [key: string]: any;
    };
    type?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsOrganizer extends $tea.Model {
    displayName?: string;
    id?: string;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsRecurrence extends $tea.Model {
    pattern?: ListEventsResponseBodyEventsRecurrencePattern;
    range?: ListEventsResponseBodyEventsRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsReminders extends $tea.Model {
    method?: string;
    minutes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEventsStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsResponseBodyEvents extends $tea.Model {
    attendees?: ListEventsResponseBodyEventsAttendees[];
    createTime?: string;
    description?: string;
    end?: ListEventsResponseBodyEventsEnd;
    id?: string;
    isAllDay?: boolean;
    location?: ListEventsResponseBodyEventsLocation;
    onlineMeetingInfo?: ListEventsResponseBodyEventsOnlineMeetingInfo;
    organizer?: ListEventsResponseBodyEventsOrganizer;
    recurrence?: ListEventsResponseBodyEventsRecurrence;
    reminders?: ListEventsResponseBodyEventsReminders[];
    seriesMasterId?: string;
    start?: ListEventsResponseBodyEventsStart;
    status?: string;
    summary?: string;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsAttendees extends $tea.Model {
    displayName?: string;
    id?: string;
    isOptional?: boolean;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsLocation extends $tea.Model {
    displayName?: string;
    meetingRooms?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsOnlineMeetingInfo extends $tea.Model {
    conferenceId?: string;
    type?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsOrganizer extends $tea.Model {
    displayName?: string;
    id?: string;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsRecurrence extends $tea.Model {
    pattern?: ListEventsInstancesResponseBodyEventsRecurrencePattern;
    range?: ListEventsInstancesResponseBodyEventsRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsReminders extends $tea.Model {
    method?: string;
    minutes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEventsStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsInstancesResponseBodyEvents extends $tea.Model {
    attendees?: ListEventsInstancesResponseBodyEventsAttendees[];
    createTime?: string;
    description?: string;
    end?: ListEventsInstancesResponseBodyEventsEnd;
    id?: string;
    isAllDay?: boolean;
    location?: ListEventsInstancesResponseBodyEventsLocation;
    onlineMeetingInfo?: ListEventsInstancesResponseBodyEventsOnlineMeetingInfo;
    organizer?: ListEventsInstancesResponseBodyEventsOrganizer;
    recurrence?: ListEventsInstancesResponseBodyEventsRecurrence;
    reminders?: ListEventsInstancesResponseBodyEventsReminders[];
    seriesMasterId?: string;
    start?: ListEventsInstancesResponseBodyEventsStart;
    status?: string;
    summary?: string;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsAttendees extends $tea.Model {
    displayName?: string;
    id?: string;
    isOptional?: boolean;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsLocation extends $tea.Model {
    displayName?: string;
    meetingRooms?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsOnlineMeetingInfo extends $tea.Model {
    conferenceId?: string;
    extraInfo?: {
        [key: string]: any;
    };
    type?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsOrganizer extends $tea.Model {
    displayName?: string;
    id?: string;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsRecurrence extends $tea.Model {
    pattern?: ListEventsViewResponseBodyEventsRecurrencePattern;
    range?: ListEventsViewResponseBodyEventsRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEventsStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventsViewResponseBodyEvents extends $tea.Model {
    attendees?: ListEventsViewResponseBodyEventsAttendees[];
    createTime?: string;
    description?: string;
    end?: ListEventsViewResponseBodyEventsEnd;
    id?: string;
    isAllDay?: boolean;
    location?: ListEventsViewResponseBodyEventsLocation;
    onlineMeetingInfo?: ListEventsViewResponseBodyEventsOnlineMeetingInfo;
    organizer?: ListEventsViewResponseBodyEventsOrganizer;
    recurrence?: ListEventsViewResponseBodyEventsRecurrence;
    seriesMasterId?: string;
    start?: ListEventsViewResponseBodyEventsStart;
    status?: string;
    summary?: string;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestAttendees extends $tea.Model {
    id?: string;
    isOptional?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestLocation extends $tea.Model {
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestRecurrence extends $tea.Model {
    pattern?: PatchEventRequestRecurrencePattern;
    range?: PatchEventRequestRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestReminders extends $tea.Model {
    method?: string;
    minutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventRequestStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyAttendees extends $tea.Model {
    displayName?: string;
    id?: string;
    isOptional?: boolean;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyEnd extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyLocation extends $tea.Model {
    displayName?: string;
    meetingRooms?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyOrganizer extends $tea.Model {
    displayName?: string;
    id?: string;
    responseStatus?: string;
    self?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyRecurrencePattern extends $tea.Model {
    dayOfMonth?: number;
    daysOfWeek?: string;
    index?: string;
    interval?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyRecurrenceRange extends $tea.Model {
    endDate?: string;
    numberOfOccurrences?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyRecurrence extends $tea.Model {
    pattern?: PatchEventResponseBodyRecurrencePattern;
    range?: PatchEventResponseBodyRecurrenceRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyReminders extends $tea.Model {
    method?: string;
    minutes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PatchEventResponseBodyStart extends $tea.Model {
    date?: string;
    dateTime?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAttendeeRequestAttendeesToRemove extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribedCalendarsRequestSubscribeScope extends $tea.Model {
    corpIds?: string[];
    openConversationIds?: string[];
    unionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    addAttendee(userId: string, calendarId: string, eventId: string, request: AddAttendeeRequest): Promise<AddAttendeeResponse>;
    addAttendeeWithOptions(userId: string, calendarId: string, eventId: string, request: AddAttendeeRequest, headers: AddAttendeeHeaders, runtime: $Util.RuntimeOptions): Promise<AddAttendeeResponse>;
    checkIn(userId: string, calendarId: string, eventId: string): Promise<CheckInResponse>;
    checkInWithOptions(userId: string, calendarId: string, eventId: string, headers: CheckInHeaders, runtime: $Util.RuntimeOptions): Promise<CheckInResponse>;
    convertLegacyEventId(userId: string, request: ConvertLegacyEventIdRequest): Promise<ConvertLegacyEventIdResponse>;
    convertLegacyEventIdWithOptions(userId: string, request: ConvertLegacyEventIdRequest, headers: ConvertLegacyEventIdHeaders, runtime: $Util.RuntimeOptions): Promise<ConvertLegacyEventIdResponse>;
    createAcls(userId: string, calendarId: string, request: CreateAclsRequest): Promise<CreateAclsResponse>;
    createAclsWithOptions(userId: string, calendarId: string, request: CreateAclsRequest, headers: CreateAclsHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAclsResponse>;
    createEvent(userId: string, calendarId: string, request: CreateEventRequest): Promise<CreateEventResponse>;
    createEventWithOptions(userId: string, calendarId: string, request: CreateEventRequest, headers: CreateEventHeaders, runtime: $Util.RuntimeOptions): Promise<CreateEventResponse>;
    createSubscribedCalendar(userId: string, request: CreateSubscribedCalendarRequest): Promise<CreateSubscribedCalendarResponse>;
    createSubscribedCalendarWithOptions(userId: string, request: CreateSubscribedCalendarRequest, headers: CreateSubscribedCalendarHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSubscribedCalendarResponse>;
    deleteAcl(userId: string, calendarId: string, aclId: string): Promise<DeleteAclResponse>;
    deleteAclWithOptions(userId: string, calendarId: string, aclId: string, headers: DeleteAclHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteAclResponse>;
    deleteEvent(userId: string, calendarId: string, eventId: string): Promise<DeleteEventResponse>;
    deleteEventWithOptions(userId: string, calendarId: string, eventId: string, headers: DeleteEventHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteEventResponse>;
    deleteSubscribedCalendar(userId: string, calendarId: string): Promise<DeleteSubscribedCalendarResponse>;
    deleteSubscribedCalendarWithOptions(userId: string, calendarId: string, headers: DeleteSubscribedCalendarHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSubscribedCalendarResponse>;
    generateCaldavAccount(userId: string, request: GenerateCaldavAccountRequest): Promise<GenerateCaldavAccountResponse>;
    generateCaldavAccountWithOptions(userId: string, request: GenerateCaldavAccountRequest, headers: GenerateCaldavAccountHeaders, runtime: $Util.RuntimeOptions): Promise<GenerateCaldavAccountResponse>;
    getEvent(userId: string, calendarId: string, eventId: string, request: GetEventRequest): Promise<GetEventResponse>;
    getEventWithOptions(userId: string, calendarId: string, eventId: string, request: GetEventRequest, headers: GetEventHeaders, runtime: $Util.RuntimeOptions): Promise<GetEventResponse>;
    getSchedule(userId: string, request: GetScheduleRequest): Promise<GetScheduleResponse>;
    getScheduleWithOptions(userId: string, request: GetScheduleRequest, headers: GetScheduleHeaders, runtime: $Util.RuntimeOptions): Promise<GetScheduleResponse>;
    getSignInList(userId: string, calendarId: string, eventId: string, request: GetSignInListRequest): Promise<GetSignInListResponse>;
    getSignInListWithOptions(userId: string, calendarId: string, eventId: string, request: GetSignInListRequest, headers: GetSignInListHeaders, runtime: $Util.RuntimeOptions): Promise<GetSignInListResponse>;
    getSignOutList(userId: string, calendarId: string, eventId: string, request: GetSignOutListRequest): Promise<GetSignOutListResponse>;
    getSignOutListWithOptions(userId: string, calendarId: string, eventId: string, request: GetSignOutListRequest, headers: GetSignOutListHeaders, runtime: $Util.RuntimeOptions): Promise<GetSignOutListResponse>;
    getSubscribedCalendar(userId: string, calendarId: string): Promise<GetSubscribedCalendarResponse>;
    getSubscribedCalendarWithOptions(userId: string, calendarId: string, headers: GetSubscribedCalendarHeaders, runtime: $Util.RuntimeOptions): Promise<GetSubscribedCalendarResponse>;
    listAcls(userId: string, calendarId: string): Promise<ListAclsResponse>;
    listAclsWithOptions(userId: string, calendarId: string, headers: ListAclsHeaders, runtime: $Util.RuntimeOptions): Promise<ListAclsResponse>;
    listAttendees(userId: string, calendarId: string, eventId: string, request: ListAttendeesRequest): Promise<ListAttendeesResponse>;
    listAttendeesWithOptions(userId: string, calendarId: string, eventId: string, request: ListAttendeesRequest, headers: ListAttendeesHeaders, runtime: $Util.RuntimeOptions): Promise<ListAttendeesResponse>;
    listCalendars(userId: string): Promise<ListCalendarsResponse>;
    listCalendarsWithOptions(userId: string, headers: ListCalendarsHeaders, runtime: $Util.RuntimeOptions): Promise<ListCalendarsResponse>;
    listEvents(userId: string, calendarId: string, request: ListEventsRequest): Promise<ListEventsResponse>;
    listEventsWithOptions(userId: string, calendarId: string, request: ListEventsRequest, headers: ListEventsHeaders, runtime: $Util.RuntimeOptions): Promise<ListEventsResponse>;
    listEventsInstances(userId: string, calendarId: string, request: ListEventsInstancesRequest): Promise<ListEventsInstancesResponse>;
    listEventsInstancesWithOptions(userId: string, calendarId: string, request: ListEventsInstancesRequest, headers: ListEventsInstancesHeaders, runtime: $Util.RuntimeOptions): Promise<ListEventsInstancesResponse>;
    listEventsView(userId: string, calendarId: string, request: ListEventsViewRequest): Promise<ListEventsViewResponse>;
    listEventsViewWithOptions(userId: string, calendarId: string, request: ListEventsViewRequest, headers: ListEventsViewHeaders, runtime: $Util.RuntimeOptions): Promise<ListEventsViewResponse>;
    patchEvent(userId: string, calendarId: string, eventId: string, request: PatchEventRequest): Promise<PatchEventResponse>;
    patchEventWithOptions(userId: string, calendarId: string, eventId: string, request: PatchEventRequest, headers: PatchEventHeaders, runtime: $Util.RuntimeOptions): Promise<PatchEventResponse>;
    removeAttendee(userId: string, calendarId: string, eventId: string, request: RemoveAttendeeRequest): Promise<RemoveAttendeeResponse>;
    removeAttendeeWithOptions(userId: string, calendarId: string, eventId: string, request: RemoveAttendeeRequest, headers: RemoveAttendeeHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveAttendeeResponse>;
    respondEvent(userId: string, calendarId: string, eventId: string, request: RespondEventRequest): Promise<RespondEventResponse>;
    respondEventWithOptions(userId: string, calendarId: string, eventId: string, request: RespondEventRequest, headers: RespondEventHeaders, runtime: $Util.RuntimeOptions): Promise<RespondEventResponse>;
    signIn(userId: string, calendarId: string, eventId: string): Promise<SignInResponse>;
    signInWithOptions(userId: string, calendarId: string, eventId: string, headers: SignInHeaders, runtime: $Util.RuntimeOptions): Promise<SignInResponse>;
    signOut(userId: string, calendarId: string, eventId: string): Promise<SignOutResponse>;
    signOutWithOptions(userId: string, calendarId: string, eventId: string, headers: SignOutHeaders, runtime: $Util.RuntimeOptions): Promise<SignOutResponse>;
    subscribeCalendar(userId: string, calendarId: string): Promise<SubscribeCalendarResponse>;
    subscribeCalendarWithOptions(userId: string, calendarId: string, headers: SubscribeCalendarHeaders, runtime: $Util.RuntimeOptions): Promise<SubscribeCalendarResponse>;
    updateSubscribedCalendars(calendarId: string, userId: string, request: UpdateSubscribedCalendarsRequest): Promise<UpdateSubscribedCalendarsResponse>;
    updateSubscribedCalendarsWithOptions(calendarId: string, userId: string, request: UpdateSubscribedCalendarsRequest, headers: UpdateSubscribedCalendarsHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSubscribedCalendarsResponse>;
}
