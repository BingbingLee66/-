"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class PostCorpAuthInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PostCorpAuthInfoHeaders = PostCorpAuthInfoHeaders;
class PostCorpAuthInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.PostCorpAuthInfoResponseBody = PostCorpAuthInfoResponseBody;
class PostCorpAuthInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PostCorpAuthInfoResponseBody,
        };
    }
}
exports.PostCorpAuthInfoResponse = PostCorpAuthInfoResponse;
class QueryActiveUserStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryActiveUserStatisticalDataHeaders = QueryActiveUserStatisticalDataHeaders;
class QueryActiveUserStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryActiveUserStatisticalDataRequest = QueryActiveUserStatisticalDataRequest;
class QueryActiveUserStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryActiveUserStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryActiveUserStatisticalDataResponseBody = QueryActiveUserStatisticalDataResponseBody;
class QueryActiveUserStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryActiveUserStatisticalDataResponseBody,
        };
    }
}
exports.QueryActiveUserStatisticalDataResponse = QueryActiveUserStatisticalDataResponse;
class QueryAnhmdStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAnhmdStatisticalDataHeaders = QueryAnhmdStatisticalDataHeaders;
class QueryAnhmdStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryAnhmdStatisticalDataRequest = QueryAnhmdStatisticalDataRequest;
class QueryAnhmdStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryAnhmdStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryAnhmdStatisticalDataResponseBody = QueryAnhmdStatisticalDataResponseBody;
class QueryAnhmdStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAnhmdStatisticalDataResponseBody,
        };
    }
}
exports.QueryAnhmdStatisticalDataResponse = QueryAnhmdStatisticalDataResponse;
class QueryApprovalStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryApprovalStatisticalDataHeaders = QueryApprovalStatisticalDataHeaders;
class QueryApprovalStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryApprovalStatisticalDataRequest = QueryApprovalStatisticalDataRequest;
class QueryApprovalStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryApprovalStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryApprovalStatisticalDataResponseBody = QueryApprovalStatisticalDataResponseBody;
class QueryApprovalStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryApprovalStatisticalDataResponseBody,
        };
    }
}
exports.QueryApprovalStatisticalDataResponse = QueryApprovalStatisticalDataResponse;
class QueryAttendanceStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAttendanceStatisticalDataHeaders = QueryAttendanceStatisticalDataHeaders;
class QueryAttendanceStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryAttendanceStatisticalDataRequest = QueryAttendanceStatisticalDataRequest;
class QueryAttendanceStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryAttendanceStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryAttendanceStatisticalDataResponseBody = QueryAttendanceStatisticalDataResponseBody;
class QueryAttendanceStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAttendanceStatisticalDataResponseBody,
        };
    }
}
exports.QueryAttendanceStatisticalDataResponse = QueryAttendanceStatisticalDataResponse;
class QueryBlackboardStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryBlackboardStatisticalDataHeaders = QueryBlackboardStatisticalDataHeaders;
class QueryBlackboardStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryBlackboardStatisticalDataRequest = QueryBlackboardStatisticalDataRequest;
class QueryBlackboardStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryBlackboardStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryBlackboardStatisticalDataResponseBody = QueryBlackboardStatisticalDataResponseBody;
class QueryBlackboardStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryBlackboardStatisticalDataResponseBody,
        };
    }
}
exports.QueryBlackboardStatisticalDataResponse = QueryBlackboardStatisticalDataResponse;
class QueryCalendarStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCalendarStatisticalDataHeaders = QueryCalendarStatisticalDataHeaders;
class QueryCalendarStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryCalendarStatisticalDataRequest = QueryCalendarStatisticalDataRequest;
class QueryCalendarStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryCalendarStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryCalendarStatisticalDataResponseBody = QueryCalendarStatisticalDataResponseBody;
class QueryCalendarStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryCalendarStatisticalDataResponseBody,
        };
    }
}
exports.QueryCalendarStatisticalDataResponse = QueryCalendarStatisticalDataResponse;
class QueryCheckinStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCheckinStatisticalDataHeaders = QueryCheckinStatisticalDataHeaders;
class QueryCheckinStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryCheckinStatisticalDataRequest = QueryCheckinStatisticalDataRequest;
class QueryCheckinStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryCheckinStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryCheckinStatisticalDataResponseBody = QueryCheckinStatisticalDataResponseBody;
class QueryCheckinStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryCheckinStatisticalDataResponseBody,
        };
    }
}
exports.QueryCheckinStatisticalDataResponse = QueryCheckinStatisticalDataResponse;
class QueryCircleStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCircleStatisticalDataHeaders = QueryCircleStatisticalDataHeaders;
class QueryCircleStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryCircleStatisticalDataRequest = QueryCircleStatisticalDataRequest;
class QueryCircleStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryCircleStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryCircleStatisticalDataResponseBody = QueryCircleStatisticalDataResponseBody;
class QueryCircleStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryCircleStatisticalDataResponseBody,
        };
    }
}
exports.QueryCircleStatisticalDataResponse = QueryCircleStatisticalDataResponse;
class QueryCompanyBasicInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCompanyBasicInfoHeaders = QueryCompanyBasicInfoHeaders;
class QueryCompanyBasicInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyword: 'keyword',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryCompanyBasicInfoRequest = QueryCompanyBasicInfoRequest;
class QueryCompanyBasicInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
            requestId: 'requestId',
            total: 'total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
            message: 'string',
            requestId: 'string',
            total: 'number',
        };
    }
}
exports.QueryCompanyBasicInfoResponseBody = QueryCompanyBasicInfoResponseBody;
class QueryCompanyBasicInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryCompanyBasicInfoResponseBody,
        };
    }
}
exports.QueryCompanyBasicInfoResponse = QueryCompanyBasicInfoResponse;
class QueryDigitalDistrictOrgInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDigitalDistrictOrgInfoHeaders = QueryDigitalDistrictOrgInfoHeaders;
class QueryDigitalDistrictOrgInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpIds: 'corpIds',
            statDates: 'statDates',
        };
    }
    static types() {
        return {
            corpIds: { 'type': 'array', 'itemType': 'string' },
            statDates: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryDigitalDistrictOrgInfoRequest = QueryDigitalDistrictOrgInfoRequest;
class QueryDigitalDistrictOrgInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            arguments: 'arguments',
            result: 'result',
        };
    }
    static types() {
        return {
            arguments: { 'type': 'array', 'itemType': 'string' },
            result: 'string',
        };
    }
}
exports.QueryDigitalDistrictOrgInfoResponseBody = QueryDigitalDistrictOrgInfoResponseBody;
class QueryDigitalDistrictOrgInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDigitalDistrictOrgInfoResponseBody,
        };
    }
}
exports.QueryDigitalDistrictOrgInfoResponse = QueryDigitalDistrictOrgInfoResponse;
class QueryDingReciveStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDingReciveStatisticalDataHeaders = QueryDingReciveStatisticalDataHeaders;
class QueryDingReciveStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryDingReciveStatisticalDataRequest = QueryDingReciveStatisticalDataRequest;
class QueryDingReciveStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDingReciveStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryDingReciveStatisticalDataResponseBody = QueryDingReciveStatisticalDataResponseBody;
class QueryDingReciveStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDingReciveStatisticalDataResponseBody,
        };
    }
}
exports.QueryDingReciveStatisticalDataResponse = QueryDingReciveStatisticalDataResponse;
class QueryDingSendStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDingSendStatisticalDataHeaders = QueryDingSendStatisticalDataHeaders;
class QueryDingSendStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryDingSendStatisticalDataRequest = QueryDingSendStatisticalDataRequest;
class QueryDingSendStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDingSendStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryDingSendStatisticalDataResponseBody = QueryDingSendStatisticalDataResponseBody;
class QueryDingSendStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDingSendStatisticalDataResponseBody,
        };
    }
}
exports.QueryDingSendStatisticalDataResponse = QueryDingSendStatisticalDataResponse;
class QueryDocumentStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDocumentStatisticalDataHeaders = QueryDocumentStatisticalDataHeaders;
class QueryDocumentStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryDocumentStatisticalDataRequest = QueryDocumentStatisticalDataRequest;
class QueryDocumentStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDocumentStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryDocumentStatisticalDataResponseBody = QueryDocumentStatisticalDataResponseBody;
class QueryDocumentStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDocumentStatisticalDataResponseBody,
        };
    }
}
exports.QueryDocumentStatisticalDataResponse = QueryDocumentStatisticalDataResponse;
class QueryDriveStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDriveStatisticalDataHeaders = QueryDriveStatisticalDataHeaders;
class QueryDriveStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryDriveStatisticalDataRequest = QueryDriveStatisticalDataRequest;
class QueryDriveStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDriveStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryDriveStatisticalDataResponseBody = QueryDriveStatisticalDataResponseBody;
class QueryDriveStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDriveStatisticalDataResponseBody,
        };
    }
}
exports.QueryDriveStatisticalDataResponse = QueryDriveStatisticalDataResponse;
class QueryEmployeeTypeStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryEmployeeTypeStatisticalDataHeaders = QueryEmployeeTypeStatisticalDataHeaders;
class QueryEmployeeTypeStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryEmployeeTypeStatisticalDataRequest = QueryEmployeeTypeStatisticalDataRequest;
class QueryEmployeeTypeStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryEmployeeTypeStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryEmployeeTypeStatisticalDataResponseBody = QueryEmployeeTypeStatisticalDataResponseBody;
class QueryEmployeeTypeStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEmployeeTypeStatisticalDataResponseBody,
        };
    }
}
exports.QueryEmployeeTypeStatisticalDataResponse = QueryEmployeeTypeStatisticalDataResponse;
class QueryGroupLiveStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupLiveStatisticalDataHeaders = QueryGroupLiveStatisticalDataHeaders;
class QueryGroupLiveStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryGroupLiveStatisticalDataRequest = QueryGroupLiveStatisticalDataRequest;
class QueryGroupLiveStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryGroupLiveStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryGroupLiveStatisticalDataResponseBody = QueryGroupLiveStatisticalDataResponseBody;
class QueryGroupLiveStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryGroupLiveStatisticalDataResponseBody,
        };
    }
}
exports.QueryGroupLiveStatisticalDataResponse = QueryGroupLiveStatisticalDataResponse;
class QueryGroupMessageStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupMessageStatisticalDataHeaders = QueryGroupMessageStatisticalDataHeaders;
class QueryGroupMessageStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryGroupMessageStatisticalDataRequest = QueryGroupMessageStatisticalDataRequest;
class QueryGroupMessageStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryGroupMessageStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryGroupMessageStatisticalDataResponseBody = QueryGroupMessageStatisticalDataResponseBody;
class QueryGroupMessageStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryGroupMessageStatisticalDataResponseBody,
        };
    }
}
exports.QueryGroupMessageStatisticalDataResponse = QueryGroupMessageStatisticalDataResponse;
class QueryHealthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryHealthStatisticalDataHeaders = QueryHealthStatisticalDataHeaders;
class QueryHealthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryHealthStatisticalDataRequest = QueryHealthStatisticalDataRequest;
class QueryHealthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryHealthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryHealthStatisticalDataResponseBody = QueryHealthStatisticalDataResponseBody;
class QueryHealthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryHealthStatisticalDataResponseBody,
        };
    }
}
exports.QueryHealthStatisticalDataResponse = QueryHealthStatisticalDataResponse;
class QueryMailStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMailStatisticalDataHeaders = QueryMailStatisticalDataHeaders;
class QueryMailStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryMailStatisticalDataRequest = QueryMailStatisticalDataRequest;
class QueryMailStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryMailStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryMailStatisticalDataResponseBody = QueryMailStatisticalDataResponseBody;
class QueryMailStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryMailStatisticalDataResponseBody,
        };
    }
}
exports.QueryMailStatisticalDataResponse = QueryMailStatisticalDataResponse;
class QueryOnlineUserStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryOnlineUserStatisticalDataHeaders = QueryOnlineUserStatisticalDataHeaders;
class QueryOnlineUserStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryOnlineUserStatisticalDataRequest = QueryOnlineUserStatisticalDataRequest;
class QueryOnlineUserStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryOnlineUserStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryOnlineUserStatisticalDataResponseBody = QueryOnlineUserStatisticalDataResponseBody;
class QueryOnlineUserStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryOnlineUserStatisticalDataResponseBody,
        };
    }
}
exports.QueryOnlineUserStatisticalDataResponse = QueryOnlineUserStatisticalDataResponse;
class QueryRedEnvelopeReciveStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataHeaders = QueryRedEnvelopeReciveStatisticalDataHeaders;
class QueryRedEnvelopeReciveStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataRequest = QueryRedEnvelopeReciveStatisticalDataRequest;
class QueryRedEnvelopeReciveStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataResponseBody = QueryRedEnvelopeReciveStatisticalDataResponseBody;
class QueryRedEnvelopeReciveStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryRedEnvelopeReciveStatisticalDataResponseBody,
        };
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataResponse = QueryRedEnvelopeReciveStatisticalDataResponse;
class QueryRedEnvelopeSendStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryRedEnvelopeSendStatisticalDataHeaders = QueryRedEnvelopeSendStatisticalDataHeaders;
class QueryRedEnvelopeSendStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryRedEnvelopeSendStatisticalDataRequest = QueryRedEnvelopeSendStatisticalDataRequest;
class QueryRedEnvelopeSendStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryRedEnvelopeSendStatisticalDataResponseBody = QueryRedEnvelopeSendStatisticalDataResponseBody;
class QueryRedEnvelopeSendStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryRedEnvelopeSendStatisticalDataResponseBody,
        };
    }
}
exports.QueryRedEnvelopeSendStatisticalDataResponse = QueryRedEnvelopeSendStatisticalDataResponse;
class QueryReportStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryReportStatisticalDataHeaders = QueryReportStatisticalDataHeaders;
class QueryReportStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryReportStatisticalDataRequest = QueryReportStatisticalDataRequest;
class QueryReportStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryReportStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryReportStatisticalDataResponseBody = QueryReportStatisticalDataResponseBody;
class QueryReportStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryReportStatisticalDataResponseBody,
        };
    }
}
exports.QueryReportStatisticalDataResponse = QueryReportStatisticalDataResponse;
class QuerySingleMessageStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySingleMessageStatisticalDataHeaders = QuerySingleMessageStatisticalDataHeaders;
class QuerySingleMessageStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QuerySingleMessageStatisticalDataRequest = QuerySingleMessageStatisticalDataRequest;
class QuerySingleMessageStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QuerySingleMessageStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QuerySingleMessageStatisticalDataResponseBody = QuerySingleMessageStatisticalDataResponseBody;
class QuerySingleMessageStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySingleMessageStatisticalDataResponseBody,
        };
    }
}
exports.QuerySingleMessageStatisticalDataResponse = QuerySingleMessageStatisticalDataResponse;
class QueryTelMeetingStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryTelMeetingStatisticalDataHeaders = QueryTelMeetingStatisticalDataHeaders;
class QueryTelMeetingStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryTelMeetingStatisticalDataRequest = QueryTelMeetingStatisticalDataRequest;
class QueryTelMeetingStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryTelMeetingStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryTelMeetingStatisticalDataResponseBody = QueryTelMeetingStatisticalDataResponseBody;
class QueryTelMeetingStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryTelMeetingStatisticalDataResponseBody,
        };
    }
}
exports.QueryTelMeetingStatisticalDataResponse = QueryTelMeetingStatisticalDataResponse;
class QueryTodoStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryTodoStatisticalDataHeaders = QueryTodoStatisticalDataHeaders;
class QueryTodoStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryTodoStatisticalDataRequest = QueryTodoStatisticalDataRequest;
class QueryTodoStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryTodoStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryTodoStatisticalDataResponseBody = QueryTodoStatisticalDataResponseBody;
class QueryTodoStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryTodoStatisticalDataResponseBody,
        };
    }
}
exports.QueryTodoStatisticalDataResponse = QueryTodoStatisticalDataResponse;
class QueryVedioMeetingStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryVedioMeetingStatisticalDataHeaders = QueryVedioMeetingStatisticalDataHeaders;
class QueryVedioMeetingStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryVedioMeetingStatisticalDataRequest = QueryVedioMeetingStatisticalDataRequest;
class QueryVedioMeetingStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryVedioMeetingStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryVedioMeetingStatisticalDataResponseBody = QueryVedioMeetingStatisticalDataResponseBody;
class QueryVedioMeetingStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryVedioMeetingStatisticalDataResponseBody,
        };
    }
}
exports.QueryVedioMeetingStatisticalDataResponse = QueryVedioMeetingStatisticalDataResponse;
class QueryYydActiveDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydActiveDayStatisticalDataHeaders = QueryYydActiveDayStatisticalDataHeaders;
class QueryYydActiveDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydActiveDayStatisticalDataRequest = QueryYydActiveDayStatisticalDataRequest;
class QueryYydActiveDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydActiveDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydActiveDayStatisticalDataResponseBody = QueryYydActiveDayStatisticalDataResponseBody;
class QueryYydActiveDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydActiveDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydActiveDayStatisticalDataResponse = QueryYydActiveDayStatisticalDataResponse;
class QueryYydActiveMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydActiveMonthStatisticalDataHeaders = QueryYydActiveMonthStatisticalDataHeaders;
class QueryYydActiveMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydActiveMonthStatisticalDataRequest = QueryYydActiveMonthStatisticalDataRequest;
class QueryYydActiveMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydActiveMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydActiveMonthStatisticalDataResponseBody = QueryYydActiveMonthStatisticalDataResponseBody;
class QueryYydActiveMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydActiveMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydActiveMonthStatisticalDataResponse = QueryYydActiveMonthStatisticalDataResponse;
class QueryYydActiveWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydActiveWeekStatisticalDataHeaders = QueryYydActiveWeekStatisticalDataHeaders;
class QueryYydActiveWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydActiveWeekStatisticalDataRequest = QueryYydActiveWeekStatisticalDataRequest;
class QueryYydActiveWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydActiveWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydActiveWeekStatisticalDataResponseBody = QueryYydActiveWeekStatisticalDataResponseBody;
class QueryYydActiveWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydActiveWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydActiveWeekStatisticalDataResponse = QueryYydActiveWeekStatisticalDataResponse;
class QueryYydAppDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydAppDayStatisticalDataHeaders = QueryYydAppDayStatisticalDataHeaders;
class QueryYydAppDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydAppDayStatisticalDataRequest = QueryYydAppDayStatisticalDataRequest;
class QueryYydAppDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydAppDayStatisticalDataResponseBody = QueryYydAppDayStatisticalDataResponseBody;
class QueryYydAppDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydAppDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydAppDayStatisticalDataResponse = QueryYydAppDayStatisticalDataResponse;
class QueryYydAppMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydAppMonthStatisticalDataHeaders = QueryYydAppMonthStatisticalDataHeaders;
class QueryYydAppMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydAppMonthStatisticalDataRequest = QueryYydAppMonthStatisticalDataRequest;
class QueryYydAppMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydAppMonthStatisticalDataResponseBody = QueryYydAppMonthStatisticalDataResponseBody;
class QueryYydAppMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydAppMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydAppMonthStatisticalDataResponse = QueryYydAppMonthStatisticalDataResponse;
class QueryYydAppStdStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydAppStdStatisticalDataHeaders = QueryYydAppStdStatisticalDataHeaders;
class QueryYydAppStdStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydAppStdStatisticalDataRequest = QueryYydAppStdStatisticalDataRequest;
class QueryYydAppStdStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppStdStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydAppStdStatisticalDataResponseBody = QueryYydAppStdStatisticalDataResponseBody;
class QueryYydAppStdStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydAppStdStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydAppStdStatisticalDataResponse = QueryYydAppStdStatisticalDataResponse;
class QueryYydAppWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydAppWeekStatisticalDataHeaders = QueryYydAppWeekStatisticalDataHeaders;
class QueryYydAppWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydAppWeekStatisticalDataRequest = QueryYydAppWeekStatisticalDataRequest;
class QueryYydAppWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydAppWeekStatisticalDataResponseBody = QueryYydAppWeekStatisticalDataResponseBody;
class QueryYydAppWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydAppWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydAppWeekStatisticalDataResponse = QueryYydAppWeekStatisticalDataResponse;
class QueryYydCalendarDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydCalendarDayStatisticalDataHeaders = QueryYydCalendarDayStatisticalDataHeaders;
class QueryYydCalendarDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydCalendarDayStatisticalDataRequest = QueryYydCalendarDayStatisticalDataRequest;
class QueryYydCalendarDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydCalendarDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydCalendarDayStatisticalDataResponseBody = QueryYydCalendarDayStatisticalDataResponseBody;
class QueryYydCalendarDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydCalendarDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydCalendarDayStatisticalDataResponse = QueryYydCalendarDayStatisticalDataResponse;
class QueryYydCalendarMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydCalendarMonthStatisticalDataHeaders = QueryYydCalendarMonthStatisticalDataHeaders;
class QueryYydCalendarMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydCalendarMonthStatisticalDataRequest = QueryYydCalendarMonthStatisticalDataRequest;
class QueryYydCalendarMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydCalendarMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydCalendarMonthStatisticalDataResponseBody = QueryYydCalendarMonthStatisticalDataResponseBody;
class QueryYydCalendarMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydCalendarMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydCalendarMonthStatisticalDataResponse = QueryYydCalendarMonthStatisticalDataResponse;
class QueryYydCalendarWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydCalendarWeekStatisticalDataHeaders = QueryYydCalendarWeekStatisticalDataHeaders;
class QueryYydCalendarWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydCalendarWeekStatisticalDataRequest = QueryYydCalendarWeekStatisticalDataRequest;
class QueryYydCalendarWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydCalendarWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydCalendarWeekStatisticalDataResponseBody = QueryYydCalendarWeekStatisticalDataResponseBody;
class QueryYydCalendarWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydCalendarWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydCalendarWeekStatisticalDataResponse = QueryYydCalendarWeekStatisticalDataResponse;
class QueryYydDingMsgDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydDingMsgDayStatisticalDataHeaders = QueryYydDingMsgDayStatisticalDataHeaders;
class QueryYydDingMsgDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydDingMsgDayStatisticalDataRequest = QueryYydDingMsgDayStatisticalDataRequest;
class QueryYydDingMsgDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydDingMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydDingMsgDayStatisticalDataResponseBody = QueryYydDingMsgDayStatisticalDataResponseBody;
class QueryYydDingMsgDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydDingMsgDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydDingMsgDayStatisticalDataResponse = QueryYydDingMsgDayStatisticalDataResponse;
class QueryYydDingMsgMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydDingMsgMonthStatisticalDataHeaders = QueryYydDingMsgMonthStatisticalDataHeaders;
class QueryYydDingMsgMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydDingMsgMonthStatisticalDataRequest = QueryYydDingMsgMonthStatisticalDataRequest;
class QueryYydDingMsgMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydDingMsgMonthStatisticalDataResponseBody = QueryYydDingMsgMonthStatisticalDataResponseBody;
class QueryYydDingMsgMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydDingMsgMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydDingMsgMonthStatisticalDataResponse = QueryYydDingMsgMonthStatisticalDataResponse;
class QueryYydDingMsgWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydDingMsgWeekStatisticalDataHeaders = QueryYydDingMsgWeekStatisticalDataHeaders;
class QueryYydDingMsgWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydDingMsgWeekStatisticalDataRequest = QueryYydDingMsgWeekStatisticalDataRequest;
class QueryYydDingMsgWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydDingMsgWeekStatisticalDataResponseBody = QueryYydDingMsgWeekStatisticalDataResponseBody;
class QueryYydDingMsgWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydDingMsgWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydDingMsgWeekStatisticalDataResponse = QueryYydDingMsgWeekStatisticalDataResponse;
class QueryYydGroupMsgDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydGroupMsgDayStatisticalDataHeaders = QueryYydGroupMsgDayStatisticalDataHeaders;
class QueryYydGroupMsgDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydGroupMsgDayStatisticalDataRequest = QueryYydGroupMsgDayStatisticalDataRequest;
class QueryYydGroupMsgDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydGroupMsgDayStatisticalDataResponseBody = QueryYydGroupMsgDayStatisticalDataResponseBody;
class QueryYydGroupMsgDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydGroupMsgDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydGroupMsgDayStatisticalDataResponse = QueryYydGroupMsgDayStatisticalDataResponse;
class QueryYydGroupMsgMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataHeaders = QueryYydGroupMsgMonthStatisticalDataHeaders;
class QueryYydGroupMsgMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataRequest = QueryYydGroupMsgMonthStatisticalDataRequest;
class QueryYydGroupMsgMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataResponseBody = QueryYydGroupMsgMonthStatisticalDataResponseBody;
class QueryYydGroupMsgMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydGroupMsgMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataResponse = QueryYydGroupMsgMonthStatisticalDataResponse;
class QueryYydGroupMsgWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataHeaders = QueryYydGroupMsgWeekStatisticalDataHeaders;
class QueryYydGroupMsgWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataRequest = QueryYydGroupMsgWeekStatisticalDataRequest;
class QueryYydGroupMsgWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataResponseBody = QueryYydGroupMsgWeekStatisticalDataResponseBody;
class QueryYydGroupMsgWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydGroupMsgWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataResponse = QueryYydGroupMsgWeekStatisticalDataResponse;
class QueryYydLogDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydLogDayStatisticalDataHeaders = QueryYydLogDayStatisticalDataHeaders;
class QueryYydLogDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydLogDayStatisticalDataRequest = QueryYydLogDayStatisticalDataRequest;
class QueryYydLogDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydLogDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydLogDayStatisticalDataResponseBody = QueryYydLogDayStatisticalDataResponseBody;
class QueryYydLogDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydLogDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydLogDayStatisticalDataResponse = QueryYydLogDayStatisticalDataResponse;
class QueryYydLogMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydLogMonthStatisticalDataHeaders = QueryYydLogMonthStatisticalDataHeaders;
class QueryYydLogMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydLogMonthStatisticalDataRequest = QueryYydLogMonthStatisticalDataRequest;
class QueryYydLogMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydLogMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydLogMonthStatisticalDataResponseBody = QueryYydLogMonthStatisticalDataResponseBody;
class QueryYydLogMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydLogMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydLogMonthStatisticalDataResponse = QueryYydLogMonthStatisticalDataResponse;
class QueryYydLogWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydLogWeekStatisticalDataHeaders = QueryYydLogWeekStatisticalDataHeaders;
class QueryYydLogWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydLogWeekStatisticalDataRequest = QueryYydLogWeekStatisticalDataRequest;
class QueryYydLogWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydLogWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydLogWeekStatisticalDataResponseBody = QueryYydLogWeekStatisticalDataResponseBody;
class QueryYydLogWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydLogWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydLogWeekStatisticalDataResponse = QueryYydLogWeekStatisticalDataResponse;
class QueryYydMeetingDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydMeetingDayStatisticalDataHeaders = QueryYydMeetingDayStatisticalDataHeaders;
class QueryYydMeetingDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydMeetingDayStatisticalDataRequest = QueryYydMeetingDayStatisticalDataRequest;
class QueryYydMeetingDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydMeetingDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydMeetingDayStatisticalDataResponseBody = QueryYydMeetingDayStatisticalDataResponseBody;
class QueryYydMeetingDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydMeetingDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydMeetingDayStatisticalDataResponse = QueryYydMeetingDayStatisticalDataResponse;
class QueryYydMeetingMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydMeetingMonthStatisticalDataHeaders = QueryYydMeetingMonthStatisticalDataHeaders;
class QueryYydMeetingMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydMeetingMonthStatisticalDataRequest = QueryYydMeetingMonthStatisticalDataRequest;
class QueryYydMeetingMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydMeetingMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydMeetingMonthStatisticalDataResponseBody = QueryYydMeetingMonthStatisticalDataResponseBody;
class QueryYydMeetingMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydMeetingMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydMeetingMonthStatisticalDataResponse = QueryYydMeetingMonthStatisticalDataResponse;
class QueryYydMeetingWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydMeetingWeekStatisticalDataHeaders = QueryYydMeetingWeekStatisticalDataHeaders;
class QueryYydMeetingWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydMeetingWeekStatisticalDataRequest = QueryYydMeetingWeekStatisticalDataRequest;
class QueryYydMeetingWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydMeetingWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydMeetingWeekStatisticalDataResponseBody = QueryYydMeetingWeekStatisticalDataResponseBody;
class QueryYydMeetingWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydMeetingWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydMeetingWeekStatisticalDataResponse = QueryYydMeetingWeekStatisticalDataResponse;
class QueryYydNoticeDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydNoticeDayStatisticalDataHeaders = QueryYydNoticeDayStatisticalDataHeaders;
class QueryYydNoticeDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydNoticeDayStatisticalDataRequest = QueryYydNoticeDayStatisticalDataRequest;
class QueryYydNoticeDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydNoticeDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydNoticeDayStatisticalDataResponseBody = QueryYydNoticeDayStatisticalDataResponseBody;
class QueryYydNoticeDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydNoticeDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydNoticeDayStatisticalDataResponse = QueryYydNoticeDayStatisticalDataResponse;
class QueryYydNoticeMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydNoticeMonthStatisticalDataHeaders = QueryYydNoticeMonthStatisticalDataHeaders;
class QueryYydNoticeMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydNoticeMonthStatisticalDataRequest = QueryYydNoticeMonthStatisticalDataRequest;
class QueryYydNoticeMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydNoticeMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydNoticeMonthStatisticalDataResponseBody = QueryYydNoticeMonthStatisticalDataResponseBody;
class QueryYydNoticeMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydNoticeMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydNoticeMonthStatisticalDataResponse = QueryYydNoticeMonthStatisticalDataResponse;
class QueryYydNoticeWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydNoticeWeekStatisticalDataHeaders = QueryYydNoticeWeekStatisticalDataHeaders;
class QueryYydNoticeWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydNoticeWeekStatisticalDataRequest = QueryYydNoticeWeekStatisticalDataRequest;
class QueryYydNoticeWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydNoticeWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydNoticeWeekStatisticalDataResponseBody = QueryYydNoticeWeekStatisticalDataResponseBody;
class QueryYydNoticeWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydNoticeWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydNoticeWeekStatisticalDataResponse = QueryYydNoticeWeekStatisticalDataResponse;
class QueryYydSingleMsgDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydSingleMsgDayStatisticalDataHeaders = QueryYydSingleMsgDayStatisticalDataHeaders;
class QueryYydSingleMsgDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydSingleMsgDayStatisticalDataRequest = QueryYydSingleMsgDayStatisticalDataRequest;
class QueryYydSingleMsgDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydSingleMsgDayStatisticalDataResponseBody = QueryYydSingleMsgDayStatisticalDataResponseBody;
class QueryYydSingleMsgDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydSingleMsgDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydSingleMsgDayStatisticalDataResponse = QueryYydSingleMsgDayStatisticalDataResponse;
class QueryYydSingleMsgMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataHeaders = QueryYydSingleMsgMonthStatisticalDataHeaders;
class QueryYydSingleMsgMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataRequest = QueryYydSingleMsgMonthStatisticalDataRequest;
class QueryYydSingleMsgMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataResponseBody = QueryYydSingleMsgMonthStatisticalDataResponseBody;
class QueryYydSingleMsgMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydSingleMsgMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataResponse = QueryYydSingleMsgMonthStatisticalDataResponse;
class QueryYydSingleMsgWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataHeaders = QueryYydSingleMsgWeekStatisticalDataHeaders;
class QueryYydSingleMsgWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataRequest = QueryYydSingleMsgWeekStatisticalDataRequest;
class QueryYydSingleMsgWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataResponseBody = QueryYydSingleMsgWeekStatisticalDataResponseBody;
class QueryYydSingleMsgWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydSingleMsgWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataResponse = QueryYydSingleMsgWeekStatisticalDataResponse;
class QueryYydToatlMsgDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydToatlMsgDayStatisticalDataHeaders = QueryYydToatlMsgDayStatisticalDataHeaders;
class QueryYydToatlMsgDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydToatlMsgDayStatisticalDataRequest = QueryYydToatlMsgDayStatisticalDataRequest;
class QueryYydToatlMsgDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydToatlMsgDayStatisticalDataResponseBody = QueryYydToatlMsgDayStatisticalDataResponseBody;
class QueryYydToatlMsgDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydToatlMsgDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydToatlMsgDayStatisticalDataResponse = QueryYydToatlMsgDayStatisticalDataResponse;
class QueryYydToatlMsgMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataHeaders = QueryYydToatlMsgMonthStatisticalDataHeaders;
class QueryYydToatlMsgMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataRequest = QueryYydToatlMsgMonthStatisticalDataRequest;
class QueryYydToatlMsgMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataResponseBody = QueryYydToatlMsgMonthStatisticalDataResponseBody;
class QueryYydToatlMsgMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydToatlMsgMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataResponse = QueryYydToatlMsgMonthStatisticalDataResponse;
class QueryYydToatlMsgWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataHeaders = QueryYydToatlMsgWeekStatisticalDataHeaders;
class QueryYydToatlMsgWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataRequest = QueryYydToatlMsgWeekStatisticalDataRequest;
class QueryYydToatlMsgWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataResponseBody = QueryYydToatlMsgWeekStatisticalDataResponseBody;
class QueryYydToatlMsgWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydToatlMsgWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataResponse = QueryYydToatlMsgWeekStatisticalDataResponse;
class QueryYydTodoDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydTodoDayStatisticalDataHeaders = QueryYydTodoDayStatisticalDataHeaders;
class QueryYydTodoDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydTodoDayStatisticalDataRequest = QueryYydTodoDayStatisticalDataRequest;
class QueryYydTodoDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTodoDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydTodoDayStatisticalDataResponseBody = QueryYydTodoDayStatisticalDataResponseBody;
class QueryYydTodoDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydTodoDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydTodoDayStatisticalDataResponse = QueryYydTodoDayStatisticalDataResponse;
class QueryYydTodoMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydTodoMonthStatisticalDataHeaders = QueryYydTodoMonthStatisticalDataHeaders;
class QueryYydTodoMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydTodoMonthStatisticalDataRequest = QueryYydTodoMonthStatisticalDataRequest;
class QueryYydTodoMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTodoMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydTodoMonthStatisticalDataResponseBody = QueryYydTodoMonthStatisticalDataResponseBody;
class QueryYydTodoMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydTodoMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydTodoMonthStatisticalDataResponse = QueryYydTodoMonthStatisticalDataResponse;
class QueryYydTodoWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydTodoWeekStatisticalDataHeaders = QueryYydTodoWeekStatisticalDataHeaders;
class QueryYydTodoWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydTodoWeekStatisticalDataRequest = QueryYydTodoWeekStatisticalDataRequest;
class QueryYydTodoWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTodoWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydTodoWeekStatisticalDataResponseBody = QueryYydTodoWeekStatisticalDataResponseBody;
class QueryYydTodoWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydTodoWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydTodoWeekStatisticalDataResponse = QueryYydTodoWeekStatisticalDataResponse;
class QueryYydTotalDayStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydTotalDayStatisticalDataHeaders = QueryYydTotalDayStatisticalDataHeaders;
class QueryYydTotalDayStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydTotalDayStatisticalDataRequest = QueryYydTotalDayStatisticalDataRequest;
class QueryYydTotalDayStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalDayStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydTotalDayStatisticalDataResponseBody = QueryYydTotalDayStatisticalDataResponseBody;
class QueryYydTotalDayStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydTotalDayStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydTotalDayStatisticalDataResponse = QueryYydTotalDayStatisticalDataResponse;
class QueryYydTotalMonthStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydTotalMonthStatisticalDataHeaders = QueryYydTotalMonthStatisticalDataHeaders;
class QueryYydTotalMonthStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydTotalMonthStatisticalDataRequest = QueryYydTotalMonthStatisticalDataRequest;
class QueryYydTotalMonthStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalMonthStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydTotalMonthStatisticalDataResponseBody = QueryYydTotalMonthStatisticalDataResponseBody;
class QueryYydTotalMonthStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydTotalMonthStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydTotalMonthStatisticalDataResponse = QueryYydTotalMonthStatisticalDataResponse;
class QueryYydTotalStdStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydTotalStdStatisticalDataHeaders = QueryYydTotalStdStatisticalDataHeaders;
class QueryYydTotalStdStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydTotalStdStatisticalDataRequest = QueryYydTotalStdStatisticalDataRequest;
class QueryYydTotalStdStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalStdStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydTotalStdStatisticalDataResponseBody = QueryYydTotalStdStatisticalDataResponseBody;
class QueryYydTotalStdStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydTotalStdStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydTotalStdStatisticalDataResponse = QueryYydTotalStdStatisticalDataResponse;
class QueryYydTotalWeekStatisticalDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryYydTotalWeekStatisticalDataHeaders = QueryYydTotalWeekStatisticalDataHeaders;
class QueryYydTotalWeekStatisticalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
}
exports.QueryYydTotalWeekStatisticalDataRequest = QueryYydTotalWeekStatisticalDataRequest;
class QueryYydTotalWeekStatisticalDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalWeekStatisticalDataResponseBodyMetaList },
        };
    }
}
exports.QueryYydTotalWeekStatisticalDataResponseBody = QueryYydTotalWeekStatisticalDataResponseBody;
class QueryYydTotalWeekStatisticalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryYydTotalWeekStatisticalDataResponseBody,
        };
    }
}
exports.QueryYydTotalWeekStatisticalDataResponse = QueryYydTotalWeekStatisticalDataResponse;
class QueryActiveUserStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryActiveUserStatisticalDataResponseBodyMetaList = QueryActiveUserStatisticalDataResponseBodyMetaList;
class QueryAnhmdStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryAnhmdStatisticalDataResponseBodyMetaList = QueryAnhmdStatisticalDataResponseBodyMetaList;
class QueryApprovalStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryApprovalStatisticalDataResponseBodyMetaList = QueryApprovalStatisticalDataResponseBodyMetaList;
class QueryAttendanceStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryAttendanceStatisticalDataResponseBodyMetaList = QueryAttendanceStatisticalDataResponseBodyMetaList;
class QueryBlackboardStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryBlackboardStatisticalDataResponseBodyMetaList = QueryBlackboardStatisticalDataResponseBodyMetaList;
class QueryCalendarStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryCalendarStatisticalDataResponseBodyMetaList = QueryCalendarStatisticalDataResponseBodyMetaList;
class QueryCheckinStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryCheckinStatisticalDataResponseBodyMetaList = QueryCheckinStatisticalDataResponseBodyMetaList;
class QueryCircleStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryCircleStatisticalDataResponseBodyMetaList = QueryCircleStatisticalDataResponseBodyMetaList;
class QueryDingReciveStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryDingReciveStatisticalDataResponseBodyMetaList = QueryDingReciveStatisticalDataResponseBodyMetaList;
class QueryDingSendStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryDingSendStatisticalDataResponseBodyMetaList = QueryDingSendStatisticalDataResponseBodyMetaList;
class QueryDocumentStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryDocumentStatisticalDataResponseBodyMetaList = QueryDocumentStatisticalDataResponseBodyMetaList;
class QueryDriveStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryDriveStatisticalDataResponseBodyMetaList = QueryDriveStatisticalDataResponseBodyMetaList;
class QueryEmployeeTypeStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryEmployeeTypeStatisticalDataResponseBodyMetaList = QueryEmployeeTypeStatisticalDataResponseBodyMetaList;
class QueryGroupLiveStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryGroupLiveStatisticalDataResponseBodyMetaList = QueryGroupLiveStatisticalDataResponseBodyMetaList;
class QueryGroupMessageStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryGroupMessageStatisticalDataResponseBodyMetaList = QueryGroupMessageStatisticalDataResponseBodyMetaList;
class QueryHealthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryHealthStatisticalDataResponseBodyMetaList = QueryHealthStatisticalDataResponseBodyMetaList;
class QueryMailStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryMailStatisticalDataResponseBodyMetaList = QueryMailStatisticalDataResponseBodyMetaList;
class QueryOnlineUserStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryOnlineUserStatisticalDataResponseBodyMetaList = QueryOnlineUserStatisticalDataResponseBodyMetaList;
class QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList = QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList;
class QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList = QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList;
class QueryReportStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryReportStatisticalDataResponseBodyMetaList = QueryReportStatisticalDataResponseBodyMetaList;
class QuerySingleMessageStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QuerySingleMessageStatisticalDataResponseBodyMetaList = QuerySingleMessageStatisticalDataResponseBodyMetaList;
class QueryTelMeetingStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryTelMeetingStatisticalDataResponseBodyMetaList = QueryTelMeetingStatisticalDataResponseBodyMetaList;
class QueryTodoStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryTodoStatisticalDataResponseBodyMetaList = QueryTodoStatisticalDataResponseBodyMetaList;
class QueryVedioMeetingStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryVedioMeetingStatisticalDataResponseBodyMetaList = QueryVedioMeetingStatisticalDataResponseBodyMetaList;
class QueryYydActiveDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydActiveDayStatisticalDataResponseBodyMetaList = QueryYydActiveDayStatisticalDataResponseBodyMetaList;
class QueryYydActiveMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydActiveMonthStatisticalDataResponseBodyMetaList = QueryYydActiveMonthStatisticalDataResponseBodyMetaList;
class QueryYydActiveWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydActiveWeekStatisticalDataResponseBodyMetaList = QueryYydActiveWeekStatisticalDataResponseBodyMetaList;
class QueryYydAppDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydAppDayStatisticalDataResponseBodyMetaList = QueryYydAppDayStatisticalDataResponseBodyMetaList;
class QueryYydAppMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydAppMonthStatisticalDataResponseBodyMetaList = QueryYydAppMonthStatisticalDataResponseBodyMetaList;
class QueryYydAppStdStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydAppStdStatisticalDataResponseBodyMetaList = QueryYydAppStdStatisticalDataResponseBodyMetaList;
class QueryYydAppWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydAppWeekStatisticalDataResponseBodyMetaList = QueryYydAppWeekStatisticalDataResponseBodyMetaList;
class QueryYydCalendarDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydCalendarDayStatisticalDataResponseBodyMetaList = QueryYydCalendarDayStatisticalDataResponseBodyMetaList;
class QueryYydCalendarMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydCalendarMonthStatisticalDataResponseBodyMetaList = QueryYydCalendarMonthStatisticalDataResponseBodyMetaList;
class QueryYydCalendarWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydCalendarWeekStatisticalDataResponseBodyMetaList = QueryYydCalendarWeekStatisticalDataResponseBodyMetaList;
class QueryYydDingMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydDingMsgDayStatisticalDataResponseBodyMetaList = QueryYydDingMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList = QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList = QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList = QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList = QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList = QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydLogDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydLogDayStatisticalDataResponseBodyMetaList = QueryYydLogDayStatisticalDataResponseBodyMetaList;
class QueryYydLogMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydLogMonthStatisticalDataResponseBodyMetaList = QueryYydLogMonthStatisticalDataResponseBodyMetaList;
class QueryYydLogWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydLogWeekStatisticalDataResponseBodyMetaList = QueryYydLogWeekStatisticalDataResponseBodyMetaList;
class QueryYydMeetingDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydMeetingDayStatisticalDataResponseBodyMetaList = QueryYydMeetingDayStatisticalDataResponseBodyMetaList;
class QueryYydMeetingMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydMeetingMonthStatisticalDataResponseBodyMetaList = QueryYydMeetingMonthStatisticalDataResponseBodyMetaList;
class QueryYydMeetingWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydMeetingWeekStatisticalDataResponseBodyMetaList = QueryYydMeetingWeekStatisticalDataResponseBodyMetaList;
class QueryYydNoticeDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydNoticeDayStatisticalDataResponseBodyMetaList = QueryYydNoticeDayStatisticalDataResponseBodyMetaList;
class QueryYydNoticeMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydNoticeMonthStatisticalDataResponseBodyMetaList = QueryYydNoticeMonthStatisticalDataResponseBodyMetaList;
class QueryYydNoticeWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydNoticeWeekStatisticalDataResponseBodyMetaList = QueryYydNoticeWeekStatisticalDataResponseBodyMetaList;
class QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList = QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList = QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList = QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList = QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList = QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList = QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydTodoDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydTodoDayStatisticalDataResponseBodyMetaList = QueryYydTodoDayStatisticalDataResponseBodyMetaList;
class QueryYydTodoMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydTodoMonthStatisticalDataResponseBodyMetaList = QueryYydTodoMonthStatisticalDataResponseBodyMetaList;
class QueryYydTodoWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydTodoWeekStatisticalDataResponseBodyMetaList = QueryYydTodoWeekStatisticalDataResponseBodyMetaList;
class QueryYydTotalDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydTotalDayStatisticalDataResponseBodyMetaList = QueryYydTotalDayStatisticalDataResponseBodyMetaList;
class QueryYydTotalMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydTotalMonthStatisticalDataResponseBodyMetaList = QueryYydTotalMonthStatisticalDataResponseBodyMetaList;
class QueryYydTotalStdStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydTotalStdStatisticalDataResponseBodyMetaList = QueryYydTotalStdStatisticalDataResponseBodyMetaList;
class QueryYydTotalWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.QueryYydTotalWeekStatisticalDataResponseBodyMetaList = QueryYydTotalWeekStatisticalDataResponseBodyMetaList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async postCorpAuthInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PostCorpAuthInfoHeaders({});
        return await this.postCorpAuthInfoWithOptions(headers, runtime);
    }
    async postCorpAuthInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("PostCorpAuthInfo", "datacenter_1.0", "HTTP", "POST", "AK", `/v1.0/datacenter/corporations/authorize`, "json", req, runtime), new PostCorpAuthInfoResponse({}));
    }
    async queryActiveUserStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryActiveUserStatisticalDataHeaders({});
        return await this.queryActiveUserStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryActiveUserStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryActiveUserStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/activeUserData`, "json", req, runtime), new QueryActiveUserStatisticalDataResponse({}));
    }
    async queryAnhmdStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAnhmdStatisticalDataHeaders({});
        return await this.queryAnhmdStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryAnhmdStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAnhmdStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/statisticDatas/anHmd`, "json", req, runtime), new QueryAnhmdStatisticalDataResponse({}));
    }
    async queryApprovalStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryApprovalStatisticalDataHeaders({});
        return await this.queryApprovalStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryApprovalStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryApprovalStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/approvalData`, "json", req, runtime), new QueryApprovalStatisticalDataResponse({}));
    }
    async queryAttendanceStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAttendanceStatisticalDataHeaders({});
        return await this.queryAttendanceStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryAttendanceStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAttendanceStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/attendanceData`, "json", req, runtime), new QueryAttendanceStatisticalDataResponse({}));
    }
    async queryBlackboardStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBlackboardStatisticalDataHeaders({});
        return await this.queryBlackboardStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryBlackboardStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryBlackboardStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/blackboardData`, "json", req, runtime), new QueryBlackboardStatisticalDataResponse({}));
    }
    async queryCalendarStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCalendarStatisticalDataHeaders({});
        return await this.queryCalendarStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryCalendarStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryCalendarStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/calendarData`, "json", req, runtime), new QueryCalendarStatisticalDataResponse({}));
    }
    async queryCheckinStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCheckinStatisticalDataHeaders({});
        return await this.queryCheckinStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryCheckinStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryCheckinStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/checkinData`, "json", req, runtime), new QueryCheckinStatisticalDataResponse({}));
    }
    async queryCircleStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCircleStatisticalDataHeaders({});
        return await this.queryCircleStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryCircleStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryCircleStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/circleData`, "json", req, runtime), new QueryCircleStatisticalDataResponse({}));
    }
    async queryCompanyBasicInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCompanyBasicInfoHeaders({});
        return await this.queryCompanyBasicInfoWithOptions(request, headers, runtime);
    }
    async queryCompanyBasicInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryCompanyBasicInfo", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/companies/basicInfo`, "json", req, runtime), new QueryCompanyBasicInfoResponse({}));
    }
    async queryDigitalDistrictOrgInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDigitalDistrictOrgInfoHeaders({});
        return await this.queryDigitalDistrictOrgInfoWithOptions(request, headers, runtime);
    }
    async queryDigitalDistrictOrgInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpIds)) {
            body["corpIds"] = request.corpIds;
        }
        if (!tea_util_1.default.isUnset(request.statDates)) {
            body["statDates"] = request.statDates;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryDigitalDistrictOrgInfo", "datacenter_1.0", "HTTP", "POST", "AK", `/v1.0/datacenter/digitalCounty/orgInfos/query`, "json", req, runtime), new QueryDigitalDistrictOrgInfoResponse({}));
    }
    async queryDingReciveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDingReciveStatisticalDataHeaders({});
        return await this.queryDingReciveStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryDingReciveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryDingReciveStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/dingReciveData`, "json", req, runtime), new QueryDingReciveStatisticalDataResponse({}));
    }
    async queryDingSendStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDingSendStatisticalDataHeaders({});
        return await this.queryDingSendStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryDingSendStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryDingSendStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/dingSendData`, "json", req, runtime), new QueryDingSendStatisticalDataResponse({}));
    }
    async queryDocumentStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDocumentStatisticalDataHeaders({});
        return await this.queryDocumentStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryDocumentStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryDocumentStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/documentData`, "json", req, runtime), new QueryDocumentStatisticalDataResponse({}));
    }
    async queryDriveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDriveStatisticalDataHeaders({});
        return await this.queryDriveStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryDriveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryDriveStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/driveData`, "json", req, runtime), new QueryDriveStatisticalDataResponse({}));
    }
    async queryEmployeeTypeStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEmployeeTypeStatisticalDataHeaders({});
        return await this.queryEmployeeTypeStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryEmployeeTypeStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryEmployeeTypeStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/employeeTypeData`, "json", req, runtime), new QueryEmployeeTypeStatisticalDataResponse({}));
    }
    async queryGroupLiveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupLiveStatisticalDataHeaders({});
        return await this.queryGroupLiveStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryGroupLiveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryGroupLiveStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/groupLiveData`, "json", req, runtime), new QueryGroupLiveStatisticalDataResponse({}));
    }
    async queryGroupMessageStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupMessageStatisticalDataHeaders({});
        return await this.queryGroupMessageStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryGroupMessageStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryGroupMessageStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/groupMessageData`, "json", req, runtime), new QueryGroupMessageStatisticalDataResponse({}));
    }
    async queryHealthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHealthStatisticalDataHeaders({});
        return await this.queryHealthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryHealthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryHealthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/healtheUserData`, "json", req, runtime), new QueryHealthStatisticalDataResponse({}));
    }
    async queryMailStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMailStatisticalDataHeaders({});
        return await this.queryMailStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryMailStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryMailStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/mailData`, "json", req, runtime), new QueryMailStatisticalDataResponse({}));
    }
    async queryOnlineUserStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOnlineUserStatisticalDataHeaders({});
        return await this.queryOnlineUserStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryOnlineUserStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryOnlineUserStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/onlineUserData`, "json", req, runtime), new QueryOnlineUserStatisticalDataResponse({}));
    }
    async queryRedEnvelopeReciveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRedEnvelopeReciveStatisticalDataHeaders({});
        return await this.queryRedEnvelopeReciveStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryRedEnvelopeReciveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryRedEnvelopeReciveStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/redEnvelopeReciveData`, "json", req, runtime), new QueryRedEnvelopeReciveStatisticalDataResponse({}));
    }
    async queryRedEnvelopeSendStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRedEnvelopeSendStatisticalDataHeaders({});
        return await this.queryRedEnvelopeSendStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryRedEnvelopeSendStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryRedEnvelopeSendStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/redEnvelopeSendData`, "json", req, runtime), new QueryRedEnvelopeSendStatisticalDataResponse({}));
    }
    async queryReportStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReportStatisticalDataHeaders({});
        return await this.queryReportStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryReportStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryReportStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/reportData`, "json", req, runtime), new QueryReportStatisticalDataResponse({}));
    }
    async querySingleMessageStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySingleMessageStatisticalDataHeaders({});
        return await this.querySingleMessageStatisticalDataWithOptions(request, headers, runtime);
    }
    async querySingleMessageStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QuerySingleMessageStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/singleMessagerData`, "json", req, runtime), new QuerySingleMessageStatisticalDataResponse({}));
    }
    async queryTelMeetingStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTelMeetingStatisticalDataHeaders({});
        return await this.queryTelMeetingStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryTelMeetingStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryTelMeetingStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/telMeetingData`, "json", req, runtime), new QueryTelMeetingStatisticalDataResponse({}));
    }
    async queryTodoStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTodoStatisticalDataHeaders({});
        return await this.queryTodoStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryTodoStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryTodoStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/todoUserData`, "json", req, runtime), new QueryTodoStatisticalDataResponse({}));
    }
    async queryVedioMeetingStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryVedioMeetingStatisticalDataHeaders({});
        return await this.queryVedioMeetingStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryVedioMeetingStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryVedioMeetingStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/vedioMeetingData`, "json", req, runtime), new QueryVedioMeetingStatisticalDataResponse({}));
    }
    async queryYydActiveDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydActiveDayStatisticalDataHeaders({});
        return await this.queryYydActiveDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydActiveDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydActiveDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydActiveDayDatas`, "json", req, runtime), new QueryYydActiveDayStatisticalDataResponse({}));
    }
    async queryYydActiveMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydActiveMonthStatisticalDataHeaders({});
        return await this.queryYydActiveMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydActiveMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydActiveMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydActiveMonthDatas`, "json", req, runtime), new QueryYydActiveMonthStatisticalDataResponse({}));
    }
    async queryYydActiveWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydActiveWeekStatisticalDataHeaders({});
        return await this.queryYydActiveWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydActiveWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydActiveWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydActiveWeekDatas`, "json", req, runtime), new QueryYydActiveWeekStatisticalDataResponse({}));
    }
    async queryYydAppDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppDayStatisticalDataHeaders({});
        return await this.queryYydAppDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydAppDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydAppDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydAppDayDatas`, "json", req, runtime), new QueryYydAppDayStatisticalDataResponse({}));
    }
    async queryYydAppMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppMonthStatisticalDataHeaders({});
        return await this.queryYydAppMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydAppMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydAppMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydAppMonthDatas`, "json", req, runtime), new QueryYydAppMonthStatisticalDataResponse({}));
    }
    async queryYydAppStdStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppStdStatisticalDataHeaders({});
        return await this.queryYydAppStdStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydAppStdStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydAppStdStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydAppStdDatas`, "json", req, runtime), new QueryYydAppStdStatisticalDataResponse({}));
    }
    async queryYydAppWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppWeekStatisticalDataHeaders({});
        return await this.queryYydAppWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydAppWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydAppWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydAppWeekDatas`, "json", req, runtime), new QueryYydAppWeekStatisticalDataResponse({}));
    }
    async queryYydCalendarDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydCalendarDayStatisticalDataHeaders({});
        return await this.queryYydCalendarDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydCalendarDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydCalendarDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydCalendarDayDatas`, "json", req, runtime), new QueryYydCalendarDayStatisticalDataResponse({}));
    }
    async queryYydCalendarMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydCalendarMonthStatisticalDataHeaders({});
        return await this.queryYydCalendarMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydCalendarMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydCalendarMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydCalendarMonthDatas`, "json", req, runtime), new QueryYydCalendarMonthStatisticalDataResponse({}));
    }
    async queryYydCalendarWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydCalendarWeekStatisticalDataHeaders({});
        return await this.queryYydCalendarWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydCalendarWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydCalendarWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydCalendarWeekDatas`, "json", req, runtime), new QueryYydCalendarWeekStatisticalDataResponse({}));
    }
    async queryYydDingMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydDingMsgDayStatisticalDataHeaders({});
        return await this.queryYydDingMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydDingMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydDingMsgDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydDingMsgDayDatas`, "json", req, runtime), new QueryYydDingMsgDayStatisticalDataResponse({}));
    }
    async queryYydDingMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydDingMsgMonthStatisticalDataHeaders({});
        return await this.queryYydDingMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydDingMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydDingMsgMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydDingMsgMonthDatas`, "json", req, runtime), new QueryYydDingMsgMonthStatisticalDataResponse({}));
    }
    async queryYydDingMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydDingMsgWeekStatisticalDataHeaders({});
        return await this.queryYydDingMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydDingMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydDingMsgWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydDingMsgWeekDatas`, "json", req, runtime), new QueryYydDingMsgWeekStatisticalDataResponse({}));
    }
    async queryYydGroupMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydGroupMsgDayStatisticalDataHeaders({});
        return await this.queryYydGroupMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydGroupMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydGroupMsgDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydGroupMsgDayDatas`, "json", req, runtime), new QueryYydGroupMsgDayStatisticalDataResponse({}));
    }
    async queryYydGroupMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydGroupMsgMonthStatisticalDataHeaders({});
        return await this.queryYydGroupMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydGroupMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydGroupMsgMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydGroupMsgMonthDatas`, "json", req, runtime), new QueryYydGroupMsgMonthStatisticalDataResponse({}));
    }
    async queryYydGroupMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydGroupMsgWeekStatisticalDataHeaders({});
        return await this.queryYydGroupMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydGroupMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydGroupMsgWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydGroupMsgWeekDatas`, "json", req, runtime), new QueryYydGroupMsgWeekStatisticalDataResponse({}));
    }
    async queryYydLogDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydLogDayStatisticalDataHeaders({});
        return await this.queryYydLogDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydLogDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydLogDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydLogDayDatas`, "json", req, runtime), new QueryYydLogDayStatisticalDataResponse({}));
    }
    async queryYydLogMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydLogMonthStatisticalDataHeaders({});
        return await this.queryYydLogMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydLogMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydLogMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydLogMonthDatas`, "json", req, runtime), new QueryYydLogMonthStatisticalDataResponse({}));
    }
    async queryYydLogWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydLogWeekStatisticalDataHeaders({});
        return await this.queryYydLogWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydLogWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydLogWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydLogWeekDatas`, "json", req, runtime), new QueryYydLogWeekStatisticalDataResponse({}));
    }
    async queryYydMeetingDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydMeetingDayStatisticalDataHeaders({});
        return await this.queryYydMeetingDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydMeetingDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydMeetingDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydMeetingDayDatas`, "json", req, runtime), new QueryYydMeetingDayStatisticalDataResponse({}));
    }
    async queryYydMeetingMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydMeetingMonthStatisticalDataHeaders({});
        return await this.queryYydMeetingMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydMeetingMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydMeetingMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydMeetingMonthDatas`, "json", req, runtime), new QueryYydMeetingMonthStatisticalDataResponse({}));
    }
    async queryYydMeetingWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydMeetingWeekStatisticalDataHeaders({});
        return await this.queryYydMeetingWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydMeetingWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydMeetingWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydMeetingWeekDatas`, "json", req, runtime), new QueryYydMeetingWeekStatisticalDataResponse({}));
    }
    async queryYydNoticeDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydNoticeDayStatisticalDataHeaders({});
        return await this.queryYydNoticeDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydNoticeDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydNoticeDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydNoticeDayDatas`, "json", req, runtime), new QueryYydNoticeDayStatisticalDataResponse({}));
    }
    async queryYydNoticeMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydNoticeMonthStatisticalDataHeaders({});
        return await this.queryYydNoticeMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydNoticeMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydNoticeMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydNoticeMonthDatas`, "json", req, runtime), new QueryYydNoticeMonthStatisticalDataResponse({}));
    }
    async queryYydNoticeWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydNoticeWeekStatisticalDataHeaders({});
        return await this.queryYydNoticeWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydNoticeWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydNoticeWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydNoticeWeekDatas`, "json", req, runtime), new QueryYydNoticeWeekStatisticalDataResponse({}));
    }
    async queryYydSingleMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydSingleMsgDayStatisticalDataHeaders({});
        return await this.queryYydSingleMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydSingleMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydSingleMsgDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydSingleMsgDayDatas`, "json", req, runtime), new QueryYydSingleMsgDayStatisticalDataResponse({}));
    }
    async queryYydSingleMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydSingleMsgMonthStatisticalDataHeaders({});
        return await this.queryYydSingleMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydSingleMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydSingleMsgMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydSingleMsgMonthDatas`, "json", req, runtime), new QueryYydSingleMsgMonthStatisticalDataResponse({}));
    }
    async queryYydSingleMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydSingleMsgWeekStatisticalDataHeaders({});
        return await this.queryYydSingleMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydSingleMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydSingleMsgWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydSingleMsgWeekDatas`, "json", req, runtime), new QueryYydSingleMsgWeekStatisticalDataResponse({}));
    }
    async queryYydToatlMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydToatlMsgDayStatisticalDataHeaders({});
        return await this.queryYydToatlMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydToatlMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydToatlMsgDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydToatlMsgDayDatas`, "json", req, runtime), new QueryYydToatlMsgDayStatisticalDataResponse({}));
    }
    async queryYydToatlMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydToatlMsgMonthStatisticalDataHeaders({});
        return await this.queryYydToatlMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydToatlMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydToatlMsgMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydToatlMsgMonthDatas`, "json", req, runtime), new QueryYydToatlMsgMonthStatisticalDataResponse({}));
    }
    async queryYydToatlMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydToatlMsgWeekStatisticalDataHeaders({});
        return await this.queryYydToatlMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydToatlMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydToatlMsgWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydToatlMsgWeekDatas`, "json", req, runtime), new QueryYydToatlMsgWeekStatisticalDataResponse({}));
    }
    async queryYydTodoDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTodoDayStatisticalDataHeaders({});
        return await this.queryYydTodoDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydTodoDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydTodoDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydTodoDayDatas`, "json", req, runtime), new QueryYydTodoDayStatisticalDataResponse({}));
    }
    async queryYydTodoMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTodoMonthStatisticalDataHeaders({});
        return await this.queryYydTodoMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydTodoMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydTodoMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydTodoMonthDatas`, "json", req, runtime), new QueryYydTodoMonthStatisticalDataResponse({}));
    }
    async queryYydTodoWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTodoWeekStatisticalDataHeaders({});
        return await this.queryYydTodoWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydTodoWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydTodoWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydTodoWeekDatas`, "json", req, runtime), new QueryYydTodoWeekStatisticalDataResponse({}));
    }
    async queryYydTotalDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalDayStatisticalDataHeaders({});
        return await this.queryYydTotalDayStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydTotalDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydTotalDayStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydTotalDayDatas`, "json", req, runtime), new QueryYydTotalDayStatisticalDataResponse({}));
    }
    async queryYydTotalMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalMonthStatisticalDataHeaders({});
        return await this.queryYydTotalMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydTotalMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydTotalMonthStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydTotalMonthDatas`, "json", req, runtime), new QueryYydTotalMonthStatisticalDataResponse({}));
    }
    async queryYydTotalStdStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalStdStatisticalDataHeaders({});
        return await this.queryYydTotalStdStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydTotalStdStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydTotalStdStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydTotalStdDatas`, "json", req, runtime), new QueryYydTotalStdStatisticalDataResponse({}));
    }
    async queryYydTotalWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalWeekStatisticalDataHeaders({});
        return await this.queryYydTotalWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    async queryYydTotalWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryYydTotalWeekStatisticalData", "datacenter_1.0", "HTTP", "GET", "AK", `/v1.0/datacenter/yydTotalWeekDatas`, "json", req, runtime), new QueryYydTotalWeekStatisticalDataResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map