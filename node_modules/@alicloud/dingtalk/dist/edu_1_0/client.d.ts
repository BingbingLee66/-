/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceRequest extends $tea.Model {
    merchantId?: string;
    model?: string;
    name?: string;
    scene?: number;
    sn?: string;
    status?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceResponseBody extends $tea.Model {
    corpId?: string;
    id?: number;
    merchantId?: string;
    sn?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigRequest extends $tea.Model {
    operatorId?: string;
    operatorName?: string;
    temperatureUpLimit?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddSchoolConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequest extends $tea.Model {
    cardBizCode?: string;
    data?: BatchCreateRequestData;
    identifier?: string;
    jsVersion?: number;
    sourceType?: string;
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateResponseBody extends $tea.Model {
    result?: BatchCreateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequest extends $tea.Model {
    attributes?: string;
    bizCode?: string;
    courseName?: string;
    hwContent?: string;
    hwDeadline?: number;
    hwDeadlineOpen?: string;
    hwMedia?: string;
    hwPhoto?: string;
    hwTitle?: string;
    hwType?: string;
    hwVideo?: string;
    identifier?: string;
    openSelectItemList?: BatchOrgCreateHWRequestOpenSelectItemList[];
    scheduledRelease?: string;
    scheduledTime?: string;
    status?: string;
    targetRole?: string;
    teacherName?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponseBody extends $tea.Model {
    result?: BatchOrgCreateHWResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchOrgCreateHWResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderRequest extends $tea.Model {
    faceId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderResponseBody extends $tea.Model {
    needRetry?: boolean;
    tradeAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CancelOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionRequest extends $tea.Model {
    actualAmount?: number;
    faceId?: string;
    scene?: number;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CheckRestrictionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeRequest extends $tea.Model {
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CourseSchedulingComplimentNoticeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassRequest extends $tea.Model {
    customClass?: CreateCustomClassRequestCustomClass;
    operator?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassResponseBody extends $tea.Model {
    result?: CreateCustomClassResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateCustomClassResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptRequest extends $tea.Model {
    customDept?: CreateCustomDeptRequestCustomDept;
    operator?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptResponseBody extends $tea.Model {
    result?: CreateCustomDeptResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateCustomDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceRequest extends $tea.Model {
    bizCode?: string;
    spaceDesc?: string;
    spaceIcon?: string;
    spaceName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceResponseBody extends $tea.Model {
    createTimeMillis?: number;
    modifyTimeMillis?: number;
    permissionMode?: string;
    quota?: number;
    spaceId?: string;
    spaceName?: string;
    spaceType?: string;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEduAssetSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordRequest extends $tea.Model {
    bizTime?: number;
    extInfo?: string;
    faceId?: string;
    scene?: number;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordResponseBody extends $tea.Model {
    successInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateFulfilRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlRequest extends $tea.Model {
    authCode?: string;
    targetCorpId?: string;
    targetOperator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlResponseBody extends $tea.Model {
    result?: CreateInviteUrlResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateInviteUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemRequest extends $tea.Model {
    description?: string;
    effectType?: number;
    endTime?: number;
    merchantId?: string;
    name?: string;
    optUser?: string;
    periodType?: number;
    price?: number;
    scene?: number;
    startTime?: number;
    status?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemResponseBody extends $tea.Model {
    corpId?: string;
    id?: number;
    merchantId?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderRequest extends $tea.Model {
    actualAmount?: number;
    createTime?: number;
    detailList?: CreateOrderRequestDetailList[];
    faceId?: string;
    ftoken?: string;
    signature?: string;
    sn?: string;
    terminalParams?: string;
    timestamp?: number;
    totalAmount?: number;
    userId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderResponseBody extends $tea.Model {
    orderNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowRequest extends $tea.Model {
    actualAmount?: number;
    alipayUid?: string;
    createTime?: number;
    detailList?: CreateOrderFlowRequestDetailList[];
    faceId?: string;
    guardianUserId?: string;
    merchantId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    totalAmount?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateOrderFlowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomRequest extends $tea.Model {
    classroomBuilding?: string;
    classroomCampus?: string;
    classroomFloor?: string;
    classroomName?: string;
    classroomNumber?: string;
    directBroadcast?: string;
    ext?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomResponseBody extends $tea.Model {
    classroomId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreatePhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowRequest extends $tea.Model {
    faceId?: string;
    operatorId?: string;
    operatorName?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateRefundFlowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseRequest extends $tea.Model {
    attendParticipants?: CreateRemoteClassCourseRequestAttendParticipants[];
    authCode?: string;
    courseName?: string;
    endTime?: number;
    startTime?: number;
    teachingParticipant?: CreateRemoteClassCourseRequestTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseResponseBody extends $tea.Model {
    result?: CreateRemoteClassCourseResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequest extends $tea.Model {
    ext?: string;
    sectionConfigs?: CreateSectionConfigRequestSectionConfigs[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateSectionConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenRequest extends $tea.Model {
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenResponseBody extends $tea.Model {
    accessKeyId?: string;
    accessKeySecret?: string;
    expiration?: string;
    extInfo?: string;
    securityToken?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequest extends $tea.Model {
    courseGroupIntroduce?: string;
    courseGroupName?: string;
    courserGroupItemModels?: CreateUniversityCourseGroupRequestCourserGroupItemModels[];
    ext?: string;
    isvCourseGroupCode?: string;
    periodCode?: string;
    schoolYear?: string;
    semester?: number;
    subjectName?: string;
    teacherInfos?: CreateUniversityCourseGroupRequestTeacherInfos[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupResponseBody extends $tea.Model {
    courseGroupInfo?: CreateUniversityCourseGroupResponseBodyCourseGroupInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentRequest extends $tea.Model {
    classId?: number;
    gender?: string;
    identityNumber?: string;
    mobile?: string;
    name?: string;
    studentNumber?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateUniversityStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherRequest extends $tea.Model {
    classId?: number;
    opUserId?: string;
    role?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateUniversityTeacherResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgRequest extends $tea.Model {
    authCode?: string;
    deviceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDeviceOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianRequest extends $tea.Model {
    operator?: string;
    stuId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteGuardianResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationRequest extends $tea.Model {
    authCode?: string;
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteOrgRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomRequest extends $tea.Model {
    classroomId?: number;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeletePhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseRequest extends $tea.Model {
    authCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherRequest extends $tea.Model {
    adviser?: number;
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteTeacherResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentRequest extends $tea.Model {
    classId?: number;
    opUserId?: string;
    studentUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteUniversityStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherRequest extends $tea.Model {
    classId?: number;
    opUserId?: string;
    role?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteUniversityTeacherResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatRequest extends $tea.Model {
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatResponseBody extends $tea.Model {
    command?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeviceHeartbeatResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponseBody extends $tea.Model {
    result?: EduTeacherListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: EduTeacherListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseRequest extends $tea.Model {
    courseCode?: string;
    ext?: string;
    isvCode?: string;
    livePlayInfoList?: EndCourseRequestLivePlayInfoList[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseResponseBody extends $tea.Model {
    universityCourseCommonResponse?: EndCourseResponseBodyUniversityCourseCommonResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: EndCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoRequest extends $tea.Model {
    schoolCorpId?: string;
    studentUserId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoResponseBody extends $tea.Model {
    childUserId?: string;
    currentUserId?: string;
    familyCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetBindChildInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildResponseBody extends $tea.Model {
    avatar?: string;
    bindStudents?: GetDefaultChildResponseBodyBindStudents[];
    grade?: number;
    name?: string;
    nick?: string;
    period?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetDefaultChildResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailResponseBody extends $tea.Model {
    courseId?: string;
    courseType?: number;
    coverUrl?: string;
    introduction?: string;
    pushModel?: GetOpenCourseDetailResponseBodyPushModel;
    startTime?: number;
    teacherId?: string;
    teacherName?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetOpenCourseDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesResponseBody extends $tea.Model {
    courseList?: GetOpenCoursesResponseBodyCourseList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetOpenCoursesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBody extends $tea.Model {
    result?: GetRemoteClassCourseResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersResponseBody extends $tea.Model {
    result?: GetShareRoleMembersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetShareRoleMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesResponseBody extends $tea.Model {
    result?: GetShareRolesResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetShareRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequest extends $tea.Model {
    courses?: InitCoursesOfClassRequestCourses[];
    sectionConfig?: InitCoursesOfClassRequestSectionConfig;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: InitCoursesOfClassResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceRequest extends $tea.Model {
    encryptPubKey?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceResponseBody extends $tea.Model {
    successInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: InitDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequest extends $tea.Model {
    end?: InsertSectionConfigRequestEnd;
    scheduleName?: string;
    sectionModels?: InsertSectionConfigRequestSectionModels[];
    start?: InsertSectionConfigRequestStart;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: InsertSectionConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderRequest extends $tea.Model {
    createTimeEnd?: number;
    createTimeStart?: number;
    merchantId?: string;
    orderNo?: string;
    pageNumber?: number;
    pageSize?: number;
    scene?: number;
    status?: number;
    tradeNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderResponseBody extends $tea.Model {
    list?: ListOrderResponseBodyList[];
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentRequest extends $tea.Model {
    operator?: string;
    originClassId?: number;
    targetClassId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: MoveStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderRequest extends $tea.Model {
    faceId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PayOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusRequest extends $tea.Model {
    courseCode?: string;
    ext?: string;
    isvCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponseBody extends $tea.Model {
    universityPollingCourseStatusResponse?: PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PollingConfirmStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    periodCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleShrinkRequest extends $tea.Model {
    classIdsShrink?: string;
    opUserId?: string;
    periodCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBody extends $tea.Model {
    result?: QueryAllSubjectsFromClassScheduleResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryAllSubjectsFromClassScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleRequest extends $tea.Model {
    sectionIndexList?: number[];
    subscriberIds?: string[];
    endTime?: number;
    opUserId?: string;
    startTime?: number;
    subscriberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBody extends $tea.Model {
    config?: QueryClassScheduleResponseBodyConfig;
    courseDTOS?: QueryClassScheduleResponseBodyCourseDTOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryClassScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolRequest extends $tea.Model {
    endTime?: number;
    opUserId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBody extends $tea.Model {
    result?: QueryClassScheduleByTimeSchoolResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryClassScheduleByTimeSchoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigShrinkRequest extends $tea.Model {
    classIdsShrink?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBody extends $tea.Model {
    result?: QueryClassScheduleConfigResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryClassScheduleConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdRequest extends $tea.Model {
    operator?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponseBody extends $tea.Model {
    result?: QueryDeviceListByCorpIdResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceListByCorpIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesRequest extends $tea.Model {
    bizCode?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    spaces?: QueryEduAssetSpacesResponseBodySpaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEduAssetSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdRequest extends $tea.Model {
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdResponseBody extends $tea.Model {
    corpId?: string;
    groupId?: string;
    merchantId?: string;
    merchantName?: string;
    name?: string;
    pid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryGroupIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListResponseBody extends $tea.Model {
    result?: QueryOrgRelationListResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryOrgRelationListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyRequest extends $tea.Model {
    isvCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyResponseBody extends $tea.Model {
    universitySecretKeyInfo?: QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryOrgSecretKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTypeResponseBody extends $tea.Model {
    orgType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryOrgTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultRequest extends $tea.Model {
    faceId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultResponseBody extends $tea.Model {
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryPayResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomRequest extends $tea.Model {
    classroomId?: number;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomResponseBody extends $tea.Model {
    result?: QueryPhysicalClassroomResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryPhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoRequest extends $tea.Model {
    merchantId?: string;
    scene?: number;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoResponseBody extends $tea.Model {
    corpId?: string;
    merchantId?: string;
    name?: string;
    scene?: number;
    status?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryPurchaseInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseRequest extends $tea.Model {
    endTime?: number;
    operator?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBody extends $tea.Model {
    result?: QueryRemoteClassCourseResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    sn?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceResponseBody extends $tea.Model {
    corpId?: string;
    hasMore?: boolean;
    userFaceList?: QuerySchoolUserFaceResponseBodyUserFaceList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySchoolUserFaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataRequest extends $tea.Model {
    sectionIndexList?: number[];
    teacherUserIds?: string[];
    endTime?: number;
    opUserId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataResponseBody extends $tea.Model {
    result?: QueryStatisticsDataResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryStatisticsDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    subjectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersResponseBody extends $tea.Model {
    result?: QuerySubjectTeachersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySubjectTeachersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsResponseBody extends $tea.Model {
    result?: QueryTeachSubjectsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryTeachSubjectsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBody extends $tea.Model {
    universityCourseGroupInfo?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceRequest extends $tea.Model {
    faceId?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceResponseBody extends $tea.Model {
    corpId?: string;
    faceId?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryUserFaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoRequest extends $tea.Model {
    faceId?: string;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoResponseBody extends $tea.Model {
    signNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryUserPayInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceRequest extends $tea.Model {
    merchantId?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RemoveDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogRequest extends $tea.Model {
    mediaId?: string;
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ReportDeviceLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogRequest extends $tea.Model {
    action?: string;
    orderNo?: string;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ReportDeviceUseLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersRequest extends $tea.Model {
    nameKeyword?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersResponseBody extends $tea.Model {
    users?: SearchTeachersResponseBodyUsers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SearchTeachersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageRequest extends $tea.Model {
    bizId?: string;
    fromUserId?: string;
    sn?: string;
    toUserIdList?: string[];
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponseBody extends $tea.Model {
    successInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SendMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseRequest extends $tea.Model {
    courseCode?: string;
    ext?: string;
    isvCode?: string;
    livePlayInfoList?: StartCourseRequestLivePlayInfoList[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseResponseBody extends $tea.Model {
    universityCourseCommonResponse?: StartCourseResponseBodyUniversityCourseCommonResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: StartCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareRequest extends $tea.Model {
    courseDate?: string;
    courseGroupCode?: string;
    deviceId?: string;
    ext?: string;
    isvCode?: string;
    liveCoverImage?: string;
    sectionIndex?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareResponseBody extends $tea.Model {
    universityCourseCommonResponse?: StartCoursePrepareResponseBodyUniversityCourseCommonResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: StartCoursePrepareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    studentUserIds?: string[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SubscribeUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    studentUserIds?: string[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UnsubscribeUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequest extends $tea.Model {
    courses?: UpdateCoursesOfClassRequestCourses[];
    sectionConfig?: UpdateCoursesOfClassRequestSectionConfig;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateCoursesOfClassResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomRequest extends $tea.Model {
    classroomBuilding?: string;
    classroomCampus?: string;
    classroomFloor?: string;
    classroomId?: number;
    classroomName?: string;
    classroomNumber?: string;
    directBroadcast?: string;
    ext?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdatePhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseRequest extends $tea.Model {
    attendParticipants?: UpdateRemoteClassCourseRequestAttendParticipants[];
    authCode?: string;
    courseCode?: string;
    courseName?: string;
    endTime?: number;
    startTime?: number;
    teachingParticipant?: UpdateRemoteClassCourseRequestTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceRequest extends $tea.Model {
    authCode?: string;
    deviceCode?: string;
    deviceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateRemoteClassDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    courseGroupIntroduce?: string;
    courseGroupName?: string;
    courserGroupItemModels?: UpdateUniversityCourseGroupRequestCourserGroupItemModels[];
    ext?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataCardRuleItemParamList extends $tea.Model {
    cardRuleAttr?: string;
    cardTaskCode?: string;
    dailyDubbing?: number;
    relationId?: string;
    relationTitle?: string;
    relationUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataOrgClassStudentGroupListClassListStudents extends $tea.Model {
    name?: string;
    staffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataOrgClassStudentGroupListClassList extends $tea.Model {
    classId?: number;
    className?: string;
    students?: BatchCreateRequestDataOrgClassStudentGroupListClassListStudents[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataOrgClassStudentGroupList extends $tea.Model {
    classList?: BatchCreateRequestDataOrgClassStudentGroupListClassList[];
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestData extends $tea.Model {
    canReissueCard?: boolean;
    cardCycle?: number;
    cardFrequency?: number[];
    cardRuleItemParamList?: BatchCreateRequestDataCardRuleItemParamList[];
    classIds?: string[];
    classNames?: string[];
    content?: string;
    effectDate?: number;
    medias?: string;
    needMetering?: string;
    orgClassStudentGroupList?: BatchCreateRequestDataOrgClassStudentGroupList[];
    remindHour?: number;
    remindMinute?: number;
    targetRole?: string;
    templateId?: number;
    title?: string;
    unitOfMeasurement?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateResponseBodyResult extends $tea.Model {
    corpIdCardIdMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequestOpenSelectItemListClassListStudents extends $tea.Model {
    avatar?: string;
    name?: string;
    staffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequestOpenSelectItemListClassList extends $tea.Model {
    all?: boolean;
    classId?: string;
    className?: string;
    students?: BatchOrgCreateHWRequestOpenSelectItemListClassListStudents[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequestOpenSelectItemList extends $tea.Model {
    classList?: BatchOrgCreateHWRequestOpenSelectItemListClassList[];
    corpId?: string;
    selectedClassesDesc?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponseBodyResultPublishList extends $tea.Model {
    corpid?: string;
    hwid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponseBodyResult extends $tea.Model {
    publishList?: BatchOrgCreateHWResponseBodyResultPublishList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassRequestCustomClass extends $tea.Model {
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassResponseBodyResult extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptRequestCustomDept extends $tea.Model {
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptResponseBodyResult extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlResponseBodyResult extends $tea.Model {
    inviteUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderRequestDetailList extends $tea.Model {
    actualAmount?: number;
    itemAmount?: number;
    itemName?: string;
    scene?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowRequestDetailList extends $tea.Model {
    actualAmount?: number;
    itemAmount?: number;
    itemId?: number;
    itemName?: string;
    scene?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseResponseBodyResult extends $tea.Model {
    courseCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionModels extends $tea.Model {
    sectionEndTime?: CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime;
    sectionIndex?: number;
    sectionName?: string;
    sectionStartTime?: CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime;
    sectionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSemesterEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSemesterStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigs extends $tea.Model {
    scheduleName?: string;
    schoolYear?: string;
    sectionEndDate?: CreateSectionConfigRequestSectionConfigsSectionEndDate;
    sectionModels?: CreateSectionConfigRequestSectionConfigsSectionModels[];
    sectionStartDate?: CreateSectionConfigRequestSectionConfigsSectionStartDate;
    semester?: number;
    semesterEndDate?: CreateSectionConfigRequestSectionConfigsSemesterEndDate;
    semesterStartDate?: CreateSectionConfigRequestSectionConfigsSemesterStartDate;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    classPeriodType?: number;
    classroomId?: number;
    courseType?: number;
    courserGroupItemEndDate?: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
    courserGroupItemStartDate?: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
    dayOfWeek?: number;
    sectionIndex?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestTeacherInfos extends $tea.Model {
    participantRole?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupResponseBodyCourseGroupInfo extends $tea.Model {
    courseGroupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponseBodyResultTeacherDetails extends $tea.Model {
    name?: string;
    role?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    teacherDetails?: EduTeacherListResponseBodyResultTeacherDetails[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseRequestLivePlayInfoList extends $tea.Model {
    liveInputUrl?: string;
    liveOutputFlvUrl?: string;
    liveOutputHlsUrl?: string;
    liveType?: number;
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    courseCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildResponseBodyBindStudents extends $tea.Model {
    classId?: number;
    corpId?: string;
    period?: string;
    staffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailResponseBodyPushModel extends $tea.Model {
    pushOrgNameList?: string[];
    pushRoleNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesResponseBodyCourseList extends $tea.Model {
    courseId?: string;
    coverUrl?: string;
    feedType?: number;
    jumpUrl?: string;
    startTime?: number;
    teacherId?: string;
    teacherName?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResultRecordInfos extends $tea.Model {
    startTime?: string;
    stopTime?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResult extends $tea.Model {
    attendParticipants?: GetRemoteClassCourseResponseBodyResultAttendParticipants[];
    canEdit?: boolean;
    courseCode?: string;
    courseName?: string;
    endTime?: number;
    liveUrl?: string;
    recordInfos?: GetRemoteClassCourseResponseBodyResultRecordInfos[];
    roomStatus?: number;
    startTime?: number;
    status?: number;
    teachingParticipant?: GetRemoteClassCourseResponseBodyResultTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersResponseBodyResult extends $tea.Model {
    corpId?: string;
    memberUserIdListInTrunkOrg?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesResponseBodyResult extends $tea.Model {
    shareRoleCode?: string;
    shareRoleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    sectionIndex?: number;
    sectionName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestCourses extends $tea.Model {
    courseName?: string;
    creatorName?: string;
    dateModel?: InitCoursesOfClassRequestCoursesDateModel;
    location?: string;
    sectionModel?: InitCoursesOfClassRequestCoursesSectionModel;
    teacherStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    end?: InitCoursesOfClassRequestSectionConfigSectionModelsEnd;
    sectionIndex?: number;
    sectionType?: string;
    start?: InitCoursesOfClassRequestSectionConfigSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfig extends $tea.Model {
    end?: InitCoursesOfClassRequestSectionConfigEnd;
    sectionModels?: InitCoursesOfClassRequestSectionConfigSectionModels[];
    start?: InitCoursesOfClassRequestSectionConfigStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestSectionModels extends $tea.Model {
    end?: InsertSectionConfigRequestSectionModelsEnd;
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    start?: InsertSectionConfigRequestSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderResponseBodyList extends $tea.Model {
    actualAmount?: number;
    buyerId?: string;
    corpId?: string;
    createTime?: number;
    endTime?: number;
    orderNo?: string;
    payTime?: number;
    refundNo?: string;
    scene?: number;
    startTime?: number;
    status?: number;
    tradeNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList extends $tea.Model {
    liveInputUrl?: string;
    liveOutputUrl?: string;
    liveType?: number;
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse extends $tea.Model {
    confirmStatus?: boolean;
    courseCode?: string;
    livePlayInfoList?: PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList extends $tea.Model {
    avator?: string;
    name?: string;
    uid?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBodyResultExt extends $tea.Model {
    backgroundColor?: string;
    classId?: number;
    fontColor?: string;
    teacherList?: QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBodyResult extends $tea.Model {
    creatorOrgId?: number;
    ext?: QueryAllSubjectsFromClassScheduleResponseBodyResultExt;
    periodCode?: string;
    subjectCode?: string;
    subjectName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigSectionModels extends $tea.Model {
    end?: QueryClassScheduleResponseBodyConfigSectionModelsEnd;
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    start?: QueryClassScheduleResponseBodyConfigSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfig extends $tea.Model {
    end?: QueryClassScheduleResponseBodyConfigEnd;
    sectionModels?: QueryClassScheduleResponseBodyConfigSectionModels[];
    start?: QueryClassScheduleResponseBodyConfigStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyCourseDTOSClassrooms extends $tea.Model {
    interactInfo?: string;
    targetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyCourseDTOSEduUserModels extends $tea.Model {
    name?: string;
    uid?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyCourseDTOS extends $tea.Model {
    classId?: number;
    classrooms?: QueryClassScheduleResponseBodyCourseDTOSClassrooms[];
    code?: string;
    courseGroupCode?: string;
    coverUrl?: string;
    creatorCorpId?: string;
    creatorUserId?: string;
    creatorUserName?: string;
    eduUserModels?: QueryClassScheduleResponseBodyCourseDTOSEduUserModels[];
    endTime?: number;
    extInfo?: string;
    introduce?: string;
    name?: string;
    sectionIndex?: number;
    sectionName?: string;
    startTime?: number;
    status?: number;
    subjectCode?: string;
    teacherCorpId?: string;
    teacherUserId?: string;
    teacherUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms extends $tea.Model {
    interactInfo?: string;
    targetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels extends $tea.Model {
    name?: string;
    uid?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBodyResult extends $tea.Model {
    bizKey?: string;
    classId?: number;
    classrooms?: QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms[];
    code?: string;
    courseGroupCode?: string;
    coverUrl?: string;
    creatorCorpId?: string;
    creatorUserId?: string;
    creatorUserName?: string;
    eduUserModels?: QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels[];
    endTime?: number;
    extInfo?: string;
    introduce?: string;
    name?: string;
    sectionIndex?: number;
    sectionName?: string;
    startTime?: number;
    status?: number;
    subjectCode?: string;
    teacherCorpId?: string;
    teacherUserId?: string;
    teacherUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultSectionModels extends $tea.Model {
    end?: QueryClassScheduleConfigResponseBodyResultSectionModelsEnd;
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    start?: QueryClassScheduleConfigResponseBodyResultSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResult extends $tea.Model {
    classId?: number;
    end?: QueryClassScheduleConfigResponseBodyResultEnd;
    sectionModels?: QueryClassScheduleConfigResponseBodyResultSectionModels[];
    start?: QueryClassScheduleConfigResponseBodyResultStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponseBodyResultList extends $tea.Model {
    appStatus?: number;
    deviceCode?: string;
    deviceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    list?: QueryDeviceListByCorpIdResponseBodyResultList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesResponseBodySpaces extends $tea.Model {
    createTimeMillis?: number;
    modifyTimeMillis?: number;
    permissionMode?: string;
    quota?: number;
    spaceId?: string;
    spaceName?: string;
    spaceType?: string;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListResponseBodyResult extends $tea.Model {
    corpId?: string;
    deviceCount?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo extends $tea.Model {
    secretKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomResponseBodyResult extends $tea.Model {
    classroomBuilding?: string;
    classroomCampus?: string;
    classroomFloor?: string;
    classroomId?: number;
    classroomName?: string;
    classroomNumber?: string;
    directBroadcast?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBodyResult extends $tea.Model {
    attendParticipants?: QueryRemoteClassCourseResponseBodyResultAttendParticipants[];
    canEdit?: boolean;
    courseCode?: string;
    courseName?: string;
    courseWays?: string[];
    endTime?: number;
    startTime?: number;
    status?: number;
    teachingParticipant?: QueryRemoteClassCourseResponseBodyResultTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceResponseBodyUserFaceList extends $tea.Model {
    faceId?: string;
    name?: string;
    status?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataResponseBodyResult extends $tea.Model {
    classId?: number;
    courseCount?: number;
    courseHours?: number;
    subjectCode?: string;
    subjectName?: number;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersResponseBodyResult extends $tea.Model {
    classId?: number;
    corpId?: string;
    periodCode?: string;
    subjectCode?: string;
    subjectName?: string;
    teacherName?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsResponseBodyResult extends $tea.Model {
    classId?: number;
    corpId?: string;
    periodCode?: string;
    subjectCode?: string;
    subjectName?: string;
    teacherName?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels extends $tea.Model {
    classPeriodType?: number;
    classroomId?: number;
    courseType?: number;
    courserGroupItemEndDate?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate;
    courserGroupItemStartDate?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate;
    dayOfWeek?: number;
    sectionIndex?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo extends $tea.Model {
    courseGroupCode?: string;
    courseGroupIntroduce?: string;
    courseGroupName?: string;
    courserGroupItemModels?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels[];
    isvCourseGroupCode?: string;
    periodCode?: string;
    schoolYear?: string;
    semester?: number;
    subjectName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersResponseBodyUsers extends $tea.Model {
    classId?: number;
    deptName?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseRequestLivePlayInfoList extends $tea.Model {
    liveInputUrl?: string;
    liveOutputFlvUrl?: string;
    liveOutputHlsUrl?: string;
    liveType?: number;
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    courseCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    courseCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestCourses extends $tea.Model {
    courseCode?: string;
    courseGroupCode?: string;
    courseName?: string;
    creatorName?: string;
    dateModel?: UpdateCoursesOfClassRequestCoursesDateModel;
    deleteTag?: boolean;
    location?: string;
    sectionModel?: UpdateCoursesOfClassRequestCoursesSectionModel;
    teacherStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    end?: UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd;
    sectionIndex?: number;
    sectionType?: string;
    start?: UpdateCoursesOfClassRequestSectionConfigSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfig extends $tea.Model {
    sectionModels?: UpdateCoursesOfClassRequestSectionConfigSectionModels[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    classPeriodType?: number;
    classroomId?: number;
    courseType?: number;
    courserGroupItemEndDate?: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
    courserGroupItemStartDate?: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
    dayOfWeek?: number;
    sectionIndex?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    addDevice(request: AddDeviceRequest): Promise<AddDeviceResponse>;
    addDeviceWithOptions(request: AddDeviceRequest, headers: AddDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<AddDeviceResponse>;
    addSchoolConfig(request: AddSchoolConfigRequest): Promise<AddSchoolConfigResponse>;
    addSchoolConfigWithOptions(request: AddSchoolConfigRequest, headers: AddSchoolConfigHeaders, runtime: $Util.RuntimeOptions): Promise<AddSchoolConfigResponse>;
    batchCreate(request: BatchCreateRequest): Promise<BatchCreateResponse>;
    batchCreateWithOptions(request: BatchCreateRequest, headers: BatchCreateHeaders, runtime: $Util.RuntimeOptions): Promise<BatchCreateResponse>;
    batchOrgCreateHW(request: BatchOrgCreateHWRequest): Promise<BatchOrgCreateHWResponse>;
    batchOrgCreateHWWithOptions(request: BatchOrgCreateHWRequest, headers: BatchOrgCreateHWHeaders, runtime: $Util.RuntimeOptions): Promise<BatchOrgCreateHWResponse>;
    cancelOrder(request: CancelOrderRequest): Promise<CancelOrderResponse>;
    cancelOrderWithOptions(request: CancelOrderRequest, headers: CancelOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CancelOrderResponse>;
    checkRestriction(request: CheckRestrictionRequest): Promise<CheckRestrictionResponse>;
    checkRestrictionWithOptions(request: CheckRestrictionRequest, headers: CheckRestrictionHeaders, runtime: $Util.RuntimeOptions): Promise<CheckRestrictionResponse>;
    courseSchedulingComplimentNotice(request: CourseSchedulingComplimentNoticeRequest): Promise<CourseSchedulingComplimentNoticeResponse>;
    courseSchedulingComplimentNoticeWithOptions(request: CourseSchedulingComplimentNoticeRequest, headers: CourseSchedulingComplimentNoticeHeaders, runtime: $Util.RuntimeOptions): Promise<CourseSchedulingComplimentNoticeResponse>;
    createCustomClass(request: CreateCustomClassRequest): Promise<CreateCustomClassResponse>;
    createCustomClassWithOptions(request: CreateCustomClassRequest, headers: CreateCustomClassHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCustomClassResponse>;
    createCustomDept(request: CreateCustomDeptRequest): Promise<CreateCustomDeptResponse>;
    createCustomDeptWithOptions(request: CreateCustomDeptRequest, headers: CreateCustomDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCustomDeptResponse>;
    createEduAssetSpace(request: CreateEduAssetSpaceRequest): Promise<CreateEduAssetSpaceResponse>;
    createEduAssetSpaceWithOptions(request: CreateEduAssetSpaceRequest, headers: CreateEduAssetSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateEduAssetSpaceResponse>;
    createFulfilRecord(request: CreateFulfilRecordRequest): Promise<CreateFulfilRecordResponse>;
    createFulfilRecordWithOptions(request: CreateFulfilRecordRequest, headers: CreateFulfilRecordHeaders, runtime: $Util.RuntimeOptions): Promise<CreateFulfilRecordResponse>;
    createInviteUrl(request: CreateInviteUrlRequest): Promise<CreateInviteUrlResponse>;
    createInviteUrlWithOptions(request: CreateInviteUrlRequest, headers: CreateInviteUrlHeaders, runtime: $Util.RuntimeOptions): Promise<CreateInviteUrlResponse>;
    createItem(request: CreateItemRequest): Promise<CreateItemResponse>;
    createItemWithOptions(request: CreateItemRequest, headers: CreateItemHeaders, runtime: $Util.RuntimeOptions): Promise<CreateItemResponse>;
    createOrder(request: CreateOrderRequest): Promise<CreateOrderResponse>;
    createOrderWithOptions(request: CreateOrderRequest, headers: CreateOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CreateOrderResponse>;
    createOrderFlow(request: CreateOrderFlowRequest): Promise<CreateOrderFlowResponse>;
    createOrderFlowWithOptions(request: CreateOrderFlowRequest, headers: CreateOrderFlowHeaders, runtime: $Util.RuntimeOptions): Promise<CreateOrderFlowResponse>;
    createPhysicalClassroom(request: CreatePhysicalClassroomRequest): Promise<CreatePhysicalClassroomResponse>;
    createPhysicalClassroomWithOptions(request: CreatePhysicalClassroomRequest, headers: CreatePhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<CreatePhysicalClassroomResponse>;
    createRefundFlow(request: CreateRefundFlowRequest): Promise<CreateRefundFlowResponse>;
    createRefundFlowWithOptions(request: CreateRefundFlowRequest, headers: CreateRefundFlowHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRefundFlowResponse>;
    createRemoteClassCourse(request: CreateRemoteClassCourseRequest): Promise<CreateRemoteClassCourseResponse>;
    createRemoteClassCourseWithOptions(request: CreateRemoteClassCourseRequest, headers: CreateRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRemoteClassCourseResponse>;
    createSectionConfig(request: CreateSectionConfigRequest): Promise<CreateSectionConfigResponse>;
    createSectionConfigWithOptions(request: CreateSectionConfigRequest, headers: CreateSectionConfigHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSectionConfigResponse>;
    createToken(request: CreateTokenRequest): Promise<CreateTokenResponse>;
    createTokenWithOptions(request: CreateTokenRequest, headers: CreateTokenHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTokenResponse>;
    createUniversityCourseGroup(request: CreateUniversityCourseGroupRequest): Promise<CreateUniversityCourseGroupResponse>;
    createUniversityCourseGroupWithOptions(request: CreateUniversityCourseGroupRequest, headers: CreateUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUniversityCourseGroupResponse>;
    createUniversityStudent(request: CreateUniversityStudentRequest): Promise<CreateUniversityStudentResponse>;
    createUniversityStudentWithOptions(request: CreateUniversityStudentRequest, headers: CreateUniversityStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUniversityStudentResponse>;
    createUniversityTeacher(request: CreateUniversityTeacherRequest): Promise<CreateUniversityTeacherResponse>;
    createUniversityTeacherWithOptions(request: CreateUniversityTeacherRequest, headers: CreateUniversityTeacherHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUniversityTeacherResponse>;
    deleteDept(deptId: string, request: DeleteDeptRequest): Promise<DeleteDeptResponse>;
    deleteDeptWithOptions(deptId: string, request: DeleteDeptRequest, headers: DeleteDeptHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDeptResponse>;
    deleteDeviceOrg(request: DeleteDeviceOrgRequest): Promise<DeleteDeviceOrgResponse>;
    deleteDeviceOrgWithOptions(request: DeleteDeviceOrgRequest, headers: DeleteDeviceOrgHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceOrgResponse>;
    deleteGuardian(classId: string, userId: string, request: DeleteGuardianRequest): Promise<DeleteGuardianResponse>;
    deleteGuardianWithOptions(classId: string, userId: string, request: DeleteGuardianRequest, headers: DeleteGuardianHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteGuardianResponse>;
    deleteOrgRelation(request: DeleteOrgRelationRequest): Promise<DeleteOrgRelationResponse>;
    deleteOrgRelationWithOptions(request: DeleteOrgRelationRequest, headers: DeleteOrgRelationHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteOrgRelationResponse>;
    deletePhysicalClassroom(request: DeletePhysicalClassroomRequest): Promise<DeletePhysicalClassroomResponse>;
    deletePhysicalClassroomWithOptions(request: DeletePhysicalClassroomRequest, headers: DeletePhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<DeletePhysicalClassroomResponse>;
    deleteRemoteClassCourse(courseCode: string, request: DeleteRemoteClassCourseRequest): Promise<DeleteRemoteClassCourseResponse>;
    deleteRemoteClassCourseWithOptions(courseCode: string, request: DeleteRemoteClassCourseRequest, headers: DeleteRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRemoteClassCourseResponse>;
    deleteStudent(classId: string, userId: string, request: DeleteStudentRequest): Promise<DeleteStudentResponse>;
    deleteStudentWithOptions(classId: string, userId: string, request: DeleteStudentRequest, headers: DeleteStudentHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteStudentResponse>;
    deleteTeacher(classId: string, userId: string, request: DeleteTeacherRequest): Promise<DeleteTeacherResponse>;
    deleteTeacherWithOptions(classId: string, userId: string, request: DeleteTeacherRequest, headers: DeleteTeacherHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTeacherResponse>;
    deleteUniversityCourseGroup(request: DeleteUniversityCourseGroupRequest): Promise<DeleteUniversityCourseGroupResponse>;
    deleteUniversityCourseGroupWithOptions(request: DeleteUniversityCourseGroupRequest, headers: DeleteUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteUniversityCourseGroupResponse>;
    deleteUniversityStudent(request: DeleteUniversityStudentRequest): Promise<DeleteUniversityStudentResponse>;
    deleteUniversityStudentWithOptions(request: DeleteUniversityStudentRequest, headers: DeleteUniversityStudentHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteUniversityStudentResponse>;
    deleteUniversityTeacher(request: DeleteUniversityTeacherRequest): Promise<DeleteUniversityTeacherResponse>;
    deleteUniversityTeacherWithOptions(request: DeleteUniversityTeacherRequest, headers: DeleteUniversityTeacherHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteUniversityTeacherResponse>;
    deviceHeartbeat(request: DeviceHeartbeatRequest): Promise<DeviceHeartbeatResponse>;
    deviceHeartbeatWithOptions(request: DeviceHeartbeatRequest, headers: DeviceHeartbeatHeaders, runtime: $Util.RuntimeOptions): Promise<DeviceHeartbeatResponse>;
    eduTeacherList(request: EduTeacherListRequest): Promise<EduTeacherListResponse>;
    eduTeacherListWithOptions(request: EduTeacherListRequest, headers: EduTeacherListHeaders, runtime: $Util.RuntimeOptions): Promise<EduTeacherListResponse>;
    endCourse(request: EndCourseRequest): Promise<EndCourseResponse>;
    endCourseWithOptions(request: EndCourseRequest, headers: EndCourseHeaders, runtime: $Util.RuntimeOptions): Promise<EndCourseResponse>;
    getBindChildInfo(request: GetBindChildInfoRequest): Promise<GetBindChildInfoResponse>;
    getBindChildInfoWithOptions(request: GetBindChildInfoRequest, headers: GetBindChildInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetBindChildInfoResponse>;
    getDefaultChild(): Promise<GetDefaultChildResponse>;
    getDefaultChildWithOptions(headers: GetDefaultChildHeaders, runtime: $Util.RuntimeOptions): Promise<GetDefaultChildResponse>;
    getOpenCourseDetail(courseId: string): Promise<GetOpenCourseDetailResponse>;
    getOpenCourseDetailWithOptions(courseId: string, headers: GetOpenCourseDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetOpenCourseDetailResponse>;
    getOpenCourses(request: GetOpenCoursesRequest): Promise<GetOpenCoursesResponse>;
    getOpenCoursesWithOptions(request: GetOpenCoursesRequest, headers: GetOpenCoursesHeaders, runtime: $Util.RuntimeOptions): Promise<GetOpenCoursesResponse>;
    getRemoteClassCourse(courseCode: string, request: GetRemoteClassCourseRequest): Promise<GetRemoteClassCourseResponse>;
    getRemoteClassCourseWithOptions(courseCode: string, request: GetRemoteClassCourseRequest, headers: GetRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<GetRemoteClassCourseResponse>;
    getShareRoleMembers(shareRoleCode: string): Promise<GetShareRoleMembersResponse>;
    getShareRoleMembersWithOptions(shareRoleCode: string, headers: GetShareRoleMembersHeaders, runtime: $Util.RuntimeOptions): Promise<GetShareRoleMembersResponse>;
    getShareRoles(): Promise<GetShareRolesResponse>;
    getShareRolesWithOptions(headers: GetShareRolesHeaders, runtime: $Util.RuntimeOptions): Promise<GetShareRolesResponse>;
    initCoursesOfClass(classId: string, request: InitCoursesOfClassRequest): Promise<InitCoursesOfClassResponse>;
    initCoursesOfClassWithOptions(classId: string, request: InitCoursesOfClassRequest, headers: InitCoursesOfClassHeaders, runtime: $Util.RuntimeOptions): Promise<InitCoursesOfClassResponse>;
    initDevice(request: InitDeviceRequest): Promise<InitDeviceResponse>;
    initDeviceWithOptions(request: InitDeviceRequest, headers: InitDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<InitDeviceResponse>;
    insertSectionConfig(request: InsertSectionConfigRequest): Promise<InsertSectionConfigResponse>;
    insertSectionConfigWithOptions(request: InsertSectionConfigRequest, headers: InsertSectionConfigHeaders, runtime: $Util.RuntimeOptions): Promise<InsertSectionConfigResponse>;
    listOrder(request: ListOrderRequest): Promise<ListOrderResponse>;
    listOrderWithOptions(request: ListOrderRequest, headers: ListOrderHeaders, runtime: $Util.RuntimeOptions): Promise<ListOrderResponse>;
    moveStudent(request: MoveStudentRequest): Promise<MoveStudentResponse>;
    moveStudentWithOptions(request: MoveStudentRequest, headers: MoveStudentHeaders, runtime: $Util.RuntimeOptions): Promise<MoveStudentResponse>;
    payOrder(request: PayOrderRequest): Promise<PayOrderResponse>;
    payOrderWithOptions(request: PayOrderRequest, headers: PayOrderHeaders, runtime: $Util.RuntimeOptions): Promise<PayOrderResponse>;
    pollingConfirmStatus(request: PollingConfirmStatusRequest): Promise<PollingConfirmStatusResponse>;
    pollingConfirmStatusWithOptions(request: PollingConfirmStatusRequest, headers: PollingConfirmStatusHeaders, runtime: $Util.RuntimeOptions): Promise<PollingConfirmStatusResponse>;
    queryAllSubjectsFromClassSchedule(request: QueryAllSubjectsFromClassScheduleRequest): Promise<QueryAllSubjectsFromClassScheduleResponse>;
    queryAllSubjectsFromClassScheduleWithOptions(tmpReq: QueryAllSubjectsFromClassScheduleRequest, headers: QueryAllSubjectsFromClassScheduleHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllSubjectsFromClassScheduleResponse>;
    queryClassSchedule(request: QueryClassScheduleRequest): Promise<QueryClassScheduleResponse>;
    queryClassScheduleWithOptions(request: QueryClassScheduleRequest, headers: QueryClassScheduleHeaders, runtime: $Util.RuntimeOptions): Promise<QueryClassScheduleResponse>;
    queryClassScheduleByTimeSchool(request: QueryClassScheduleByTimeSchoolRequest): Promise<QueryClassScheduleByTimeSchoolResponse>;
    queryClassScheduleByTimeSchoolWithOptions(request: QueryClassScheduleByTimeSchoolRequest, headers: QueryClassScheduleByTimeSchoolHeaders, runtime: $Util.RuntimeOptions): Promise<QueryClassScheduleByTimeSchoolResponse>;
    queryClassScheduleConfig(request: QueryClassScheduleConfigRequest): Promise<QueryClassScheduleConfigResponse>;
    queryClassScheduleConfigWithOptions(tmpReq: QueryClassScheduleConfigRequest, headers: QueryClassScheduleConfigHeaders, runtime: $Util.RuntimeOptions): Promise<QueryClassScheduleConfigResponse>;
    queryDeviceListByCorpId(request: QueryDeviceListByCorpIdRequest): Promise<QueryDeviceListByCorpIdResponse>;
    queryDeviceListByCorpIdWithOptions(request: QueryDeviceListByCorpIdRequest, headers: QueryDeviceListByCorpIdHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceListByCorpIdResponse>;
    queryEduAssetSpaces(request: QueryEduAssetSpacesRequest): Promise<QueryEduAssetSpacesResponse>;
    queryEduAssetSpacesWithOptions(request: QueryEduAssetSpacesRequest, headers: QueryEduAssetSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryEduAssetSpacesResponse>;
    queryGroupId(request: QueryGroupIdRequest): Promise<QueryGroupIdResponse>;
    queryGroupIdWithOptions(request: QueryGroupIdRequest, headers: QueryGroupIdHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupIdResponse>;
    queryOrgRelationList(request: QueryOrgRelationListRequest): Promise<QueryOrgRelationListResponse>;
    queryOrgRelationListWithOptions(request: QueryOrgRelationListRequest, headers: QueryOrgRelationListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgRelationListResponse>;
    queryOrgSecretKey(request: QueryOrgSecretKeyRequest): Promise<QueryOrgSecretKeyResponse>;
    queryOrgSecretKeyWithOptions(request: QueryOrgSecretKeyRequest, headers: QueryOrgSecretKeyHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgSecretKeyResponse>;
    queryOrgType(): Promise<QueryOrgTypeResponse>;
    queryOrgTypeWithOptions(headers: QueryOrgTypeHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgTypeResponse>;
    queryPayResult(request: QueryPayResultRequest): Promise<QueryPayResultResponse>;
    queryPayResultWithOptions(request: QueryPayResultRequest, headers: QueryPayResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPayResultResponse>;
    queryPhysicalClassroom(request: QueryPhysicalClassroomRequest): Promise<QueryPhysicalClassroomResponse>;
    queryPhysicalClassroomWithOptions(request: QueryPhysicalClassroomRequest, headers: QueryPhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPhysicalClassroomResponse>;
    queryPurchaseInfo(request: QueryPurchaseInfoRequest): Promise<QueryPurchaseInfoResponse>;
    queryPurchaseInfoWithOptions(request: QueryPurchaseInfoRequest, headers: QueryPurchaseInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPurchaseInfoResponse>;
    queryRemoteClassCourse(request: QueryRemoteClassCourseRequest): Promise<QueryRemoteClassCourseResponse>;
    queryRemoteClassCourseWithOptions(request: QueryRemoteClassCourseRequest, headers: QueryRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRemoteClassCourseResponse>;
    querySchoolUserFace(request: QuerySchoolUserFaceRequest): Promise<QuerySchoolUserFaceResponse>;
    querySchoolUserFaceWithOptions(request: QuerySchoolUserFaceRequest, headers: QuerySchoolUserFaceHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySchoolUserFaceResponse>;
    queryStatisticsData(request: QueryStatisticsDataRequest): Promise<QueryStatisticsDataResponse>;
    queryStatisticsDataWithOptions(request: QueryStatisticsDataRequest, headers: QueryStatisticsDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryStatisticsDataResponse>;
    querySubjectTeachers(request: QuerySubjectTeachersRequest): Promise<QuerySubjectTeachersResponse>;
    querySubjectTeachersWithOptions(request: QuerySubjectTeachersRequest, headers: QuerySubjectTeachersHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySubjectTeachersResponse>;
    queryTeachSubjects(request: QueryTeachSubjectsRequest): Promise<QueryTeachSubjectsResponse>;
    queryTeachSubjectsWithOptions(request: QueryTeachSubjectsRequest, headers: QueryTeachSubjectsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTeachSubjectsResponse>;
    queryUniversityCourseGroup(request: QueryUniversityCourseGroupRequest): Promise<QueryUniversityCourseGroupResponse>;
    queryUniversityCourseGroupWithOptions(request: QueryUniversityCourseGroupRequest, headers: QueryUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUniversityCourseGroupResponse>;
    queryUserFace(request: QueryUserFaceRequest): Promise<QueryUserFaceResponse>;
    queryUserFaceWithOptions(request: QueryUserFaceRequest, headers: QueryUserFaceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserFaceResponse>;
    queryUserPayInfo(request: QueryUserPayInfoRequest): Promise<QueryUserPayInfoResponse>;
    queryUserPayInfoWithOptions(request: QueryUserPayInfoRequest, headers: QueryUserPayInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserPayInfoResponse>;
    removeDevice(request: RemoveDeviceRequest): Promise<RemoveDeviceResponse>;
    removeDeviceWithOptions(request: RemoveDeviceRequest, headers: RemoveDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveDeviceResponse>;
    reportDeviceLog(request: ReportDeviceLogRequest): Promise<ReportDeviceLogResponse>;
    reportDeviceLogWithOptions(request: ReportDeviceLogRequest, headers: ReportDeviceLogHeaders, runtime: $Util.RuntimeOptions): Promise<ReportDeviceLogResponse>;
    reportDeviceUseLog(request: ReportDeviceUseLogRequest): Promise<ReportDeviceUseLogResponse>;
    reportDeviceUseLogWithOptions(request: ReportDeviceUseLogRequest, headers: ReportDeviceUseLogHeaders, runtime: $Util.RuntimeOptions): Promise<ReportDeviceUseLogResponse>;
    searchTeachers(request: SearchTeachersRequest): Promise<SearchTeachersResponse>;
    searchTeachersWithOptions(request: SearchTeachersRequest, headers: SearchTeachersHeaders, runtime: $Util.RuntimeOptions): Promise<SearchTeachersResponse>;
    sendMessage(request: SendMessageRequest): Promise<SendMessageResponse>;
    sendMessageWithOptions(request: SendMessageRequest, headers: SendMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendMessageResponse>;
    startCourse(request: StartCourseRequest): Promise<StartCourseResponse>;
    startCourseWithOptions(request: StartCourseRequest, headers: StartCourseHeaders, runtime: $Util.RuntimeOptions): Promise<StartCourseResponse>;
    startCoursePrepare(request: StartCoursePrepareRequest): Promise<StartCoursePrepareResponse>;
    startCoursePrepareWithOptions(request: StartCoursePrepareRequest, headers: StartCoursePrepareHeaders, runtime: $Util.RuntimeOptions): Promise<StartCoursePrepareResponse>;
    subscribeUniversityCourseGroup(request: SubscribeUniversityCourseGroupRequest): Promise<SubscribeUniversityCourseGroupResponse>;
    subscribeUniversityCourseGroupWithOptions(request: SubscribeUniversityCourseGroupRequest, headers: SubscribeUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<SubscribeUniversityCourseGroupResponse>;
    unsubscribeUniversityCourseGroup(request: UnsubscribeUniversityCourseGroupRequest): Promise<UnsubscribeUniversityCourseGroupResponse>;
    unsubscribeUniversityCourseGroupWithOptions(request: UnsubscribeUniversityCourseGroupRequest, headers: UnsubscribeUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UnsubscribeUniversityCourseGroupResponse>;
    updateCoursesOfClass(classId: string, request: UpdateCoursesOfClassRequest): Promise<UpdateCoursesOfClassResponse>;
    updateCoursesOfClassWithOptions(classId: string, request: UpdateCoursesOfClassRequest, headers: UpdateCoursesOfClassHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCoursesOfClassResponse>;
    updatePhysicalClassroom(request: UpdatePhysicalClassroomRequest): Promise<UpdatePhysicalClassroomResponse>;
    updatePhysicalClassroomWithOptions(request: UpdatePhysicalClassroomRequest, headers: UpdatePhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<UpdatePhysicalClassroomResponse>;
    updateRemoteClassCourse(request: UpdateRemoteClassCourseRequest): Promise<UpdateRemoteClassCourseResponse>;
    updateRemoteClassCourseWithOptions(request: UpdateRemoteClassCourseRequest, headers: UpdateRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRemoteClassCourseResponse>;
    updateRemoteClassDevice(request: UpdateRemoteClassDeviceRequest): Promise<UpdateRemoteClassDeviceResponse>;
    updateRemoteClassDeviceWithOptions(request: UpdateRemoteClassDeviceRequest, headers: UpdateRemoteClassDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRemoteClassDeviceResponse>;
    updateUniversityCourseGroup(request: UpdateUniversityCourseGroupRequest): Promise<UpdateUniversityCourseGroupResponse>;
    updateUniversityCourseGroupWithOptions(request: UpdateUniversityCourseGroupRequest, headers: UpdateUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUniversityCourseGroupResponse>;
}
