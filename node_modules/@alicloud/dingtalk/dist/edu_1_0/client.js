"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddDeviceHeaders = AddDeviceHeaders;
class AddDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            merchantId: 'merchantId',
            model: 'model',
            name: 'name',
            scene: 'scene',
            sn: 'sn',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            merchantId: 'string',
            model: 'string',
            name: 'string',
            scene: 'number',
            sn: 'string',
            status: 'number',
            type: 'number',
        };
    }
}
exports.AddDeviceRequest = AddDeviceRequest;
class AddDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            merchantId: 'merchantId',
            sn: 'sn',
            status: 'status',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'number',
            merchantId: 'string',
            sn: 'string',
            status: 'number',
        };
    }
}
exports.AddDeviceResponseBody = AddDeviceResponseBody;
class AddDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDeviceResponseBody,
        };
    }
}
exports.AddDeviceResponse = AddDeviceResponse;
class AddSchoolConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddSchoolConfigHeaders = AddSchoolConfigHeaders;
class AddSchoolConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
            operatorName: 'operatorName',
            temperatureUpLimit: 'temperatureUpLimit',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            operatorName: 'string',
            temperatureUpLimit: 'number',
        };
    }
}
exports.AddSchoolConfigRequest = AddSchoolConfigRequest;
class AddSchoolConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.AddSchoolConfigResponseBody = AddSchoolConfigResponseBody;
class AddSchoolConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddSchoolConfigResponseBody,
        };
    }
}
exports.AddSchoolConfigResponse = AddSchoolConfigResponse;
class BatchCreateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchCreateHeaders = BatchCreateHeaders;
class BatchCreateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardBizCode: 'cardBizCode',
            data: 'data',
            identifier: 'identifier',
            jsVersion: 'jsVersion',
            sourceType: 'sourceType',
            userid: 'userid',
        };
    }
    static types() {
        return {
            cardBizCode: 'string',
            data: BatchCreateRequestData,
            identifier: 'string',
            jsVersion: 'number',
            sourceType: 'string',
            userid: 'string',
        };
    }
}
exports.BatchCreateRequest = BatchCreateRequest;
class BatchCreateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: BatchCreateResponseBodyResult,
        };
    }
}
exports.BatchCreateResponseBody = BatchCreateResponseBody;
class BatchCreateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchCreateResponseBody,
        };
    }
}
exports.BatchCreateResponse = BatchCreateResponse;
class BatchOrgCreateHWHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchOrgCreateHWHeaders = BatchOrgCreateHWHeaders;
class BatchOrgCreateHWRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attributes: 'attributes',
            bizCode: 'bizCode',
            courseName: 'courseName',
            hwContent: 'hwContent',
            hwDeadline: 'hwDeadline',
            hwDeadlineOpen: 'hwDeadlineOpen',
            hwMedia: 'hwMedia',
            hwPhoto: 'hwPhoto',
            hwTitle: 'hwTitle',
            hwType: 'hwType',
            hwVideo: 'hwVideo',
            identifier: 'identifier',
            openSelectItemList: 'openSelectItemList',
            scheduledRelease: 'scheduledRelease',
            scheduledTime: 'scheduledTime',
            status: 'status',
            targetRole: 'targetRole',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            bizCode: 'string',
            courseName: 'string',
            hwContent: 'string',
            hwDeadline: 'number',
            hwDeadlineOpen: 'string',
            hwMedia: 'string',
            hwPhoto: 'string',
            hwTitle: 'string',
            hwType: 'string',
            hwVideo: 'string',
            identifier: 'string',
            openSelectItemList: { 'type': 'array', 'itemType': BatchOrgCreateHWRequestOpenSelectItemList },
            scheduledRelease: 'string',
            scheduledTime: 'string',
            status: 'string',
            targetRole: 'string',
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
}
exports.BatchOrgCreateHWRequest = BatchOrgCreateHWRequest;
class BatchOrgCreateHWResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: BatchOrgCreateHWResponseBodyResult,
        };
    }
}
exports.BatchOrgCreateHWResponseBody = BatchOrgCreateHWResponseBody;
class BatchOrgCreateHWResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchOrgCreateHWResponseBody,
        };
    }
}
exports.BatchOrgCreateHWResponse = BatchOrgCreateHWResponse;
class CancelOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CancelOrderHeaders = CancelOrderHeaders;
class CancelOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faceId: 'faceId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
        };
    }
}
exports.CancelOrderRequest = CancelOrderRequest;
class CancelOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRetry: 'needRetry',
            tradeAction: 'tradeAction',
        };
    }
    static types() {
        return {
            needRetry: 'boolean',
            tradeAction: 'string',
        };
    }
}
exports.CancelOrderResponseBody = CancelOrderResponseBody;
class CancelOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CancelOrderResponseBody,
        };
    }
}
exports.CancelOrderResponse = CancelOrderResponse;
class CheckRestrictionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CheckRestrictionHeaders = CheckRestrictionHeaders;
class CheckRestrictionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualAmount: 'actualAmount',
            faceId: 'faceId',
            scene: 'scene',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            faceId: 'string',
            scene: 'number',
            sn: 'string',
            userId: 'string',
        };
    }
}
exports.CheckRestrictionRequest = CheckRestrictionRequest;
class CheckRestrictionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.CheckRestrictionResponseBody = CheckRestrictionResponseBody;
class CheckRestrictionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CheckRestrictionResponseBody,
        };
    }
}
exports.CheckRestrictionResponse = CheckRestrictionResponse;
class CourseSchedulingComplimentNoticeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CourseSchedulingComplimentNoticeHeaders = CourseSchedulingComplimentNoticeHeaders;
class CourseSchedulingComplimentNoticeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            opUserId: 'string',
        };
    }
}
exports.CourseSchedulingComplimentNoticeRequest = CourseSchedulingComplimentNoticeRequest;
class CourseSchedulingComplimentNoticeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CourseSchedulingComplimentNoticeResponseBody = CourseSchedulingComplimentNoticeResponseBody;
class CourseSchedulingComplimentNoticeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CourseSchedulingComplimentNoticeResponseBody,
        };
    }
}
exports.CourseSchedulingComplimentNoticeResponse = CourseSchedulingComplimentNoticeResponse;
class CreateCustomClassHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateCustomClassHeaders = CreateCustomClassHeaders;
class CreateCustomClassRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            customClass: 'customClass',
            operator: 'operator',
            superId: 'superId',
        };
    }
    static types() {
        return {
            customClass: CreateCustomClassRequestCustomClass,
            operator: 'string',
            superId: 'number',
        };
    }
}
exports.CreateCustomClassRequest = CreateCustomClassRequest;
class CreateCustomClassResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateCustomClassResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.CreateCustomClassResponseBody = CreateCustomClassResponseBody;
class CreateCustomClassResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateCustomClassResponseBody,
        };
    }
}
exports.CreateCustomClassResponse = CreateCustomClassResponse;
class CreateCustomDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateCustomDeptHeaders = CreateCustomDeptHeaders;
class CreateCustomDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            customDept: 'customDept',
            operator: 'operator',
            superId: 'superId',
        };
    }
    static types() {
        return {
            customDept: CreateCustomDeptRequestCustomDept,
            operator: 'string',
            superId: 'number',
        };
    }
}
exports.CreateCustomDeptRequest = CreateCustomDeptRequest;
class CreateCustomDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateCustomDeptResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.CreateCustomDeptResponseBody = CreateCustomDeptResponseBody;
class CreateCustomDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateCustomDeptResponseBody,
        };
    }
}
exports.CreateCustomDeptResponse = CreateCustomDeptResponse;
class CreateEduAssetSpaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateEduAssetSpaceHeaders = CreateEduAssetSpaceHeaders;
class CreateEduAssetSpaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'bizCode',
            spaceDesc: 'spaceDesc',
            spaceIcon: 'spaceIcon',
            spaceName: 'spaceName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            spaceDesc: 'string',
            spaceIcon: 'string',
            spaceName: 'string',
            userId: 'string',
        };
    }
}
exports.CreateEduAssetSpaceRequest = CreateEduAssetSpaceRequest;
class CreateEduAssetSpaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeMillis: 'createTimeMillis',
            modifyTimeMillis: 'modifyTimeMillis',
            permissionMode: 'permissionMode',
            quota: 'quota',
            spaceId: 'spaceId',
            spaceName: 'spaceName',
            spaceType: 'spaceType',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            createTimeMillis: 'number',
            modifyTimeMillis: 'number',
            permissionMode: 'string',
            quota: 'number',
            spaceId: 'string',
            spaceName: 'string',
            spaceType: 'string',
            usedQuota: 'number',
        };
    }
}
exports.CreateEduAssetSpaceResponseBody = CreateEduAssetSpaceResponseBody;
class CreateEduAssetSpaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEduAssetSpaceResponseBody,
        };
    }
}
exports.CreateEduAssetSpaceResponse = CreateEduAssetSpaceResponse;
class CreateFulfilRecordHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateFulfilRecordHeaders = CreateFulfilRecordHeaders;
class CreateFulfilRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTime: 'bizTime',
            extInfo: 'extInfo',
            faceId: 'faceId',
            scene: 'scene',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizTime: 'number',
            extInfo: 'string',
            faceId: 'string',
            scene: 'number',
            sn: 'string',
            userId: 'string',
        };
    }
}
exports.CreateFulfilRecordRequest = CreateFulfilRecordRequest;
class CreateFulfilRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            successInfo: 'successInfo',
        };
    }
    static types() {
        return {
            successInfo: 'string',
        };
    }
}
exports.CreateFulfilRecordResponseBody = CreateFulfilRecordResponseBody;
class CreateFulfilRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateFulfilRecordResponseBody,
        };
    }
}
exports.CreateFulfilRecordResponse = CreateFulfilRecordResponse;
class CreateInviteUrlHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateInviteUrlHeaders = CreateInviteUrlHeaders;
class CreateInviteUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authCode: 'authCode',
            targetCorpId: 'targetCorpId',
            targetOperator: 'targetOperator',
        };
    }
    static types() {
        return {
            authCode: 'string',
            targetCorpId: 'string',
            targetOperator: 'string',
        };
    }
}
exports.CreateInviteUrlRequest = CreateInviteUrlRequest;
class CreateInviteUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateInviteUrlResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.CreateInviteUrlResponseBody = CreateInviteUrlResponseBody;
class CreateInviteUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateInviteUrlResponseBody,
        };
    }
}
exports.CreateInviteUrlResponse = CreateInviteUrlResponse;
class CreateItemHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateItemHeaders = CreateItemHeaders;
class CreateItemRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            effectType: 'effectType',
            endTime: 'endTime',
            merchantId: 'merchantId',
            name: 'name',
            optUser: 'optUser',
            periodType: 'periodType',
            price: 'price',
            scene: 'scene',
            startTime: 'startTime',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            description: 'string',
            effectType: 'number',
            endTime: 'number',
            merchantId: 'string',
            name: 'string',
            optUser: 'string',
            periodType: 'number',
            price: 'number',
            scene: 'number',
            startTime: 'number',
            status: 'number',
            type: 'number',
        };
    }
}
exports.CreateItemRequest = CreateItemRequest;
class CreateItemResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            merchantId: 'merchantId',
            status: 'status',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'number',
            merchantId: 'string',
            status: 'number',
        };
    }
}
exports.CreateItemResponseBody = CreateItemResponseBody;
class CreateItemResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateItemResponseBody,
        };
    }
}
exports.CreateItemResponse = CreateItemResponse;
class CreateOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateOrderHeaders = CreateOrderHeaders;
class CreateOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualAmount: 'actualAmount',
            createTime: 'createTime',
            detailList: 'detailList',
            faceId: 'faceId',
            ftoken: 'ftoken',
            signature: 'signature',
            sn: 'sn',
            terminalParams: 'terminalParams',
            timestamp: 'timestamp',
            totalAmount: 'totalAmount',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            createTime: 'number',
            detailList: { 'type': 'array', 'itemType': CreateOrderRequestDetailList },
            faceId: 'string',
            ftoken: 'string',
            signature: 'string',
            sn: 'string',
            terminalParams: 'string',
            timestamp: 'number',
            totalAmount: 'number',
            userId: 'string',
            version: 'string',
        };
    }
}
exports.CreateOrderRequest = CreateOrderRequest;
class CreateOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            orderNo: 'string',
        };
    }
}
exports.CreateOrderResponseBody = CreateOrderResponseBody;
class CreateOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOrderResponseBody,
        };
    }
}
exports.CreateOrderResponse = CreateOrderResponse;
class CreateOrderFlowHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateOrderFlowHeaders = CreateOrderFlowHeaders;
class CreateOrderFlowRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayUid: 'alipayUid',
            createTime: 'createTime',
            detailList: 'detailList',
            faceId: 'faceId',
            guardianUserId: 'guardianUserId',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            totalAmount: 'totalAmount',
            userId: 'userId',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayUid: 'string',
            createTime: 'number',
            detailList: { 'type': 'array', 'itemType': CreateOrderFlowRequestDetailList },
            faceId: 'string',
            guardianUserId: 'string',
            merchantId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            totalAmount: 'number',
            userId: 'string',
        };
    }
}
exports.CreateOrderFlowRequest = CreateOrderFlowRequest;
class CreateOrderFlowResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.CreateOrderFlowResponseBody = CreateOrderFlowResponseBody;
class CreateOrderFlowResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOrderFlowResponseBody,
        };
    }
}
exports.CreateOrderFlowResponse = CreateOrderFlowResponse;
class CreatePhysicalClassroomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreatePhysicalClassroomHeaders = CreatePhysicalClassroomHeaders;
class CreatePhysicalClassroomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classroomBuilding: 'classroomBuilding',
            classroomCampus: 'classroomCampus',
            classroomFloor: 'classroomFloor',
            classroomName: 'classroomName',
            classroomNumber: 'classroomNumber',
            directBroadcast: 'directBroadcast',
            ext: 'ext',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomBuilding: 'string',
            classroomCampus: 'string',
            classroomFloor: 'string',
            classroomName: 'string',
            classroomNumber: 'string',
            directBroadcast: 'string',
            ext: 'string',
            opUserId: 'string',
        };
    }
}
exports.CreatePhysicalClassroomRequest = CreatePhysicalClassroomRequest;
class CreatePhysicalClassroomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classroomId: 'classroomId',
        };
    }
    static types() {
        return {
            classroomId: 'number',
        };
    }
}
exports.CreatePhysicalClassroomResponseBody = CreatePhysicalClassroomResponseBody;
class CreatePhysicalClassroomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreatePhysicalClassroomResponseBody,
        };
    }
}
exports.CreatePhysicalClassroomResponse = CreatePhysicalClassroomResponse;
class CreateRefundFlowHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateRefundFlowHeaders = CreateRefundFlowHeaders;
class CreateRefundFlowRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faceId: 'faceId',
            operatorId: 'operatorId',
            operatorName: 'operatorName',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            operatorId: 'string',
            operatorName: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
        };
    }
}
exports.CreateRefundFlowRequest = CreateRefundFlowRequest;
class CreateRefundFlowResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.CreateRefundFlowResponseBody = CreateRefundFlowResponseBody;
class CreateRefundFlowResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateRefundFlowResponseBody,
        };
    }
}
exports.CreateRefundFlowResponse = CreateRefundFlowResponse;
class CreateRemoteClassCourseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateRemoteClassCourseHeaders = CreateRemoteClassCourseHeaders;
class CreateRemoteClassCourseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            authCode: 'authCode',
            courseName: 'courseName',
            endTime: 'endTime',
            startTime: 'startTime',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': CreateRemoteClassCourseRequestAttendParticipants },
            authCode: 'string',
            courseName: 'string',
            endTime: 'number',
            startTime: 'number',
            teachingParticipant: CreateRemoteClassCourseRequestTeachingParticipant,
        };
    }
}
exports.CreateRemoteClassCourseRequest = CreateRemoteClassCourseRequest;
class CreateRemoteClassCourseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateRemoteClassCourseResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.CreateRemoteClassCourseResponseBody = CreateRemoteClassCourseResponseBody;
class CreateRemoteClassCourseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateRemoteClassCourseResponseBody,
        };
    }
}
exports.CreateRemoteClassCourseResponse = CreateRemoteClassCourseResponse;
class CreateSectionConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSectionConfigHeaders = CreateSectionConfigHeaders;
class CreateSectionConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ext: 'ext',
            sectionConfigs: 'sectionConfigs',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            ext: 'string',
            sectionConfigs: { 'type': 'array', 'itemType': CreateSectionConfigRequestSectionConfigs },
            opUserId: 'string',
        };
    }
}
exports.CreateSectionConfigRequest = CreateSectionConfigRequest;
class CreateSectionConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CreateSectionConfigResponseBody = CreateSectionConfigResponseBody;
class CreateSectionConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSectionConfigResponseBody,
        };
    }
}
exports.CreateSectionConfigResponse = CreateSectionConfigResponse;
class CreateTokenHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTokenHeaders = CreateTokenHeaders;
class CreateTokenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            sn: 'string',
            type: 'string',
        };
    }
}
exports.CreateTokenRequest = CreateTokenRequest;
class CreateTokenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            expiration: 'expiration',
            extInfo: 'extInfo',
            securityToken: 'securityToken',
            status: 'status',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            expiration: 'string',
            extInfo: 'string',
            securityToken: 'string',
            status: 'string',
        };
    }
}
exports.CreateTokenResponseBody = CreateTokenResponseBody;
class CreateTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateTokenResponseBody,
        };
    }
}
exports.CreateTokenResponse = CreateTokenResponse;
class CreateUniversityCourseGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateUniversityCourseGroupHeaders = CreateUniversityCourseGroupHeaders;
class CreateUniversityCourseGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupIntroduce: 'courseGroupIntroduce',
            courseGroupName: 'courseGroupName',
            courserGroupItemModels: 'courserGroupItemModels',
            ext: 'ext',
            isvCourseGroupCode: 'isvCourseGroupCode',
            periodCode: 'periodCode',
            schoolYear: 'schoolYear',
            semester: 'semester',
            subjectName: 'subjectName',
            teacherInfos: 'teacherInfos',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupIntroduce: 'string',
            courseGroupName: 'string',
            courserGroupItemModels: { 'type': 'array', 'itemType': CreateUniversityCourseGroupRequestCourserGroupItemModels },
            ext: 'string',
            isvCourseGroupCode: 'string',
            periodCode: 'string',
            schoolYear: 'string',
            semester: 'number',
            subjectName: 'string',
            teacherInfos: { 'type': 'array', 'itemType': CreateUniversityCourseGroupRequestTeacherInfos },
            opUserId: 'string',
        };
    }
}
exports.CreateUniversityCourseGroupRequest = CreateUniversityCourseGroupRequest;
class CreateUniversityCourseGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupInfo: 'courseGroupInfo',
        };
    }
    static types() {
        return {
            courseGroupInfo: CreateUniversityCourseGroupResponseBodyCourseGroupInfo,
        };
    }
}
exports.CreateUniversityCourseGroupResponseBody = CreateUniversityCourseGroupResponseBody;
class CreateUniversityCourseGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateUniversityCourseGroupResponseBody,
        };
    }
}
exports.CreateUniversityCourseGroupResponse = CreateUniversityCourseGroupResponse;
class CreateUniversityStudentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateUniversityStudentHeaders = CreateUniversityStudentHeaders;
class CreateUniversityStudentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            gender: 'gender',
            identityNumber: 'identityNumber',
            mobile: 'mobile',
            name: 'name',
            studentNumber: 'studentNumber',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            gender: 'string',
            identityNumber: 'string',
            mobile: 'string',
            name: 'string',
            studentNumber: 'string',
            opUserId: 'string',
        };
    }
}
exports.CreateUniversityStudentRequest = CreateUniversityStudentRequest;
class CreateUniversityStudentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CreateUniversityStudentResponseBody = CreateUniversityStudentResponseBody;
class CreateUniversityStudentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateUniversityStudentResponseBody,
        };
    }
}
exports.CreateUniversityStudentResponse = CreateUniversityStudentResponse;
class CreateUniversityTeacherHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateUniversityTeacherHeaders = CreateUniversityTeacherHeaders;
class CreateUniversityTeacherRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            opUserId: 'opUserId',
            role: 'role',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            opUserId: 'string',
            role: 'string',
            teacherUserId: 'string',
        };
    }
}
exports.CreateUniversityTeacherRequest = CreateUniversityTeacherRequest;
class CreateUniversityTeacherResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CreateUniversityTeacherResponseBody = CreateUniversityTeacherResponseBody;
class CreateUniversityTeacherResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateUniversityTeacherResponseBody,
        };
    }
}
exports.CreateUniversityTeacherResponse = CreateUniversityTeacherResponse;
class DeleteDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteDeptHeaders = DeleteDeptHeaders;
class DeleteDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
}
exports.DeleteDeptRequest = DeleteDeptRequest;
class DeleteDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteDeptResponseBody = DeleteDeptResponseBody;
class DeleteDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDeptResponseBody,
        };
    }
}
exports.DeleteDeptResponse = DeleteDeptResponse;
class DeleteDeviceOrgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteDeviceOrgHeaders = DeleteDeviceOrgHeaders;
class DeleteDeviceOrgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authCode: 'authCode',
            deviceCode: 'deviceCode',
        };
    }
    static types() {
        return {
            authCode: 'string',
            deviceCode: 'string',
        };
    }
}
exports.DeleteDeviceOrgRequest = DeleteDeviceOrgRequest;
class DeleteDeviceOrgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteDeviceOrgResponseBody = DeleteDeviceOrgResponseBody;
class DeleteDeviceOrgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDeviceOrgResponseBody,
        };
    }
}
exports.DeleteDeviceOrgResponse = DeleteDeviceOrgResponse;
class DeleteGuardianHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteGuardianHeaders = DeleteGuardianHeaders;
class DeleteGuardianRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
            stuId: 'stuId',
        };
    }
    static types() {
        return {
            operator: 'string',
            stuId: 'string',
        };
    }
}
exports.DeleteGuardianRequest = DeleteGuardianRequest;
class DeleteGuardianResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteGuardianResponseBody = DeleteGuardianResponseBody;
class DeleteGuardianResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteGuardianResponseBody,
        };
    }
}
exports.DeleteGuardianResponse = DeleteGuardianResponse;
class DeleteOrgRelationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteOrgRelationHeaders = DeleteOrgRelationHeaders;
class DeleteOrgRelationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authCode: 'authCode',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            authCode: 'string',
            targetCorpId: 'string',
        };
    }
}
exports.DeleteOrgRelationRequest = DeleteOrgRelationRequest;
class DeleteOrgRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteOrgRelationResponseBody = DeleteOrgRelationResponseBody;
class DeleteOrgRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteOrgRelationResponseBody,
        };
    }
}
exports.DeleteOrgRelationResponse = DeleteOrgRelationResponse;
class DeletePhysicalClassroomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeletePhysicalClassroomHeaders = DeletePhysicalClassroomHeaders;
class DeletePhysicalClassroomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classroomId: 'classroomId',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomId: 'number',
            opUserId: 'string',
        };
    }
}
exports.DeletePhysicalClassroomRequest = DeletePhysicalClassroomRequest;
class DeletePhysicalClassroomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeletePhysicalClassroomResponseBody = DeletePhysicalClassroomResponseBody;
class DeletePhysicalClassroomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeletePhysicalClassroomResponseBody,
        };
    }
}
exports.DeletePhysicalClassroomResponse = DeletePhysicalClassroomResponse;
class DeleteRemoteClassCourseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteRemoteClassCourseHeaders = DeleteRemoteClassCourseHeaders;
class DeleteRemoteClassCourseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authCode: 'authCode',
        };
    }
    static types() {
        return {
            authCode: 'string',
        };
    }
}
exports.DeleteRemoteClassCourseRequest = DeleteRemoteClassCourseRequest;
class DeleteRemoteClassCourseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteRemoteClassCourseResponseBody = DeleteRemoteClassCourseResponseBody;
class DeleteRemoteClassCourseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteRemoteClassCourseResponseBody,
        };
    }
}
exports.DeleteRemoteClassCourseResponse = DeleteRemoteClassCourseResponse;
class DeleteStudentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteStudentHeaders = DeleteStudentHeaders;
class DeleteStudentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
}
exports.DeleteStudentRequest = DeleteStudentRequest;
class DeleteStudentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteStudentResponseBody = DeleteStudentResponseBody;
class DeleteStudentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteStudentResponseBody,
        };
    }
}
exports.DeleteStudentResponse = DeleteStudentResponse;
class DeleteTeacherHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteTeacherHeaders = DeleteTeacherHeaders;
class DeleteTeacherRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            adviser: 'adviser',
            operator: 'operator',
        };
    }
    static types() {
        return {
            adviser: 'number',
            operator: 'string',
        };
    }
}
exports.DeleteTeacherRequest = DeleteTeacherRequest;
class DeleteTeacherResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteTeacherResponseBody = DeleteTeacherResponseBody;
class DeleteTeacherResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteTeacherResponseBody,
        };
    }
}
exports.DeleteTeacherResponse = DeleteTeacherResponse;
class DeleteUniversityCourseGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteUniversityCourseGroupHeaders = DeleteUniversityCourseGroupHeaders;
class DeleteUniversityCourseGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            opUserId: 'string',
        };
    }
}
exports.DeleteUniversityCourseGroupRequest = DeleteUniversityCourseGroupRequest;
class DeleteUniversityCourseGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteUniversityCourseGroupResponseBody = DeleteUniversityCourseGroupResponseBody;
class DeleteUniversityCourseGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteUniversityCourseGroupResponseBody,
        };
    }
}
exports.DeleteUniversityCourseGroupResponse = DeleteUniversityCourseGroupResponse;
class DeleteUniversityStudentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteUniversityStudentHeaders = DeleteUniversityStudentHeaders;
class DeleteUniversityStudentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            opUserId: 'opUserId',
            studentUserId: 'studentUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            opUserId: 'string',
            studentUserId: 'string',
        };
    }
}
exports.DeleteUniversityStudentRequest = DeleteUniversityStudentRequest;
class DeleteUniversityStudentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteUniversityStudentResponseBody = DeleteUniversityStudentResponseBody;
class DeleteUniversityStudentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteUniversityStudentResponseBody,
        };
    }
}
exports.DeleteUniversityStudentResponse = DeleteUniversityStudentResponse;
class DeleteUniversityTeacherHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteUniversityTeacherHeaders = DeleteUniversityTeacherHeaders;
class DeleteUniversityTeacherRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            opUserId: 'opUserId',
            role: 'role',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            opUserId: 'string',
            role: 'string',
            teacherUserId: 'string',
        };
    }
}
exports.DeleteUniversityTeacherRequest = DeleteUniversityTeacherRequest;
class DeleteUniversityTeacherResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteUniversityTeacherResponseBody = DeleteUniversityTeacherResponseBody;
class DeleteUniversityTeacherResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteUniversityTeacherResponseBody,
        };
    }
}
exports.DeleteUniversityTeacherResponse = DeleteUniversityTeacherResponse;
class DeviceHeartbeatHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeviceHeartbeatHeaders = DeviceHeartbeatHeaders;
class DeviceHeartbeatRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sn: 'sn',
        };
    }
    static types() {
        return {
            sn: 'string',
        };
    }
}
exports.DeviceHeartbeatRequest = DeviceHeartbeatRequest;
class DeviceHeartbeatResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            command: 'command',
        };
    }
    static types() {
        return {
            command: 'number',
        };
    }
}
exports.DeviceHeartbeatResponseBody = DeviceHeartbeatResponseBody;
class DeviceHeartbeatResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeviceHeartbeatResponseBody,
        };
    }
}
exports.DeviceHeartbeatResponse = DeviceHeartbeatResponse;
class EduTeacherListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.EduTeacherListHeaders = EduTeacherListHeaders;
class EduTeacherListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.EduTeacherListRequest = EduTeacherListRequest;
class EduTeacherListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: EduTeacherListResponseBodyResult,
        };
    }
}
exports.EduTeacherListResponseBody = EduTeacherListResponseBody;
class EduTeacherListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: EduTeacherListResponseBody,
        };
    }
}
exports.EduTeacherListResponse = EduTeacherListResponse;
class EndCourseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.EndCourseHeaders = EndCourseHeaders;
class EndCourseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
            ext: 'ext',
            isvCode: 'isvCode',
            livePlayInfoList: 'livePlayInfoList',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            ext: 'string',
            isvCode: 'string',
            livePlayInfoList: { 'type': 'array', 'itemType': EndCourseRequestLivePlayInfoList },
            opUserId: 'string',
        };
    }
}
exports.EndCourseRequest = EndCourseRequest;
class EndCourseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            universityCourseCommonResponse: 'universityCourseCommonResponse',
        };
    }
    static types() {
        return {
            universityCourseCommonResponse: EndCourseResponseBodyUniversityCourseCommonResponse,
        };
    }
}
exports.EndCourseResponseBody = EndCourseResponseBody;
class EndCourseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: EndCourseResponseBody,
        };
    }
}
exports.EndCourseResponse = EndCourseResponse;
class GetBindChildInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetBindChildInfoHeaders = GetBindChildInfoHeaders;
class GetBindChildInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            schoolCorpId: 'schoolCorpId',
            studentUserId: 'studentUserId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            schoolCorpId: 'string',
            studentUserId: 'string',
            unionId: 'string',
        };
    }
}
exports.GetBindChildInfoRequest = GetBindChildInfoRequest;
class GetBindChildInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            childUserId: 'childUserId',
            currentUserId: 'currentUserId',
            familyCorpId: 'familyCorpId',
        };
    }
    static types() {
        return {
            childUserId: 'string',
            currentUserId: 'string',
            familyCorpId: 'string',
        };
    }
}
exports.GetBindChildInfoResponseBody = GetBindChildInfoResponseBody;
class GetBindChildInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetBindChildInfoResponseBody,
        };
    }
}
exports.GetBindChildInfoResponse = GetBindChildInfoResponse;
class GetDefaultChildHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDefaultChildHeaders = GetDefaultChildHeaders;
class GetDefaultChildResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatar: 'avatar',
            bindStudents: 'bindStudents',
            grade: 'grade',
            name: 'name',
            nick: 'nick',
            period: 'period',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            avatar: 'string',
            bindStudents: { 'type': 'array', 'itemType': GetDefaultChildResponseBodyBindStudents },
            grade: 'number',
            name: 'string',
            nick: 'string',
            period: 'string',
            unionId: 'string',
        };
    }
}
exports.GetDefaultChildResponseBody = GetDefaultChildResponseBody;
class GetDefaultChildResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDefaultChildResponseBody,
        };
    }
}
exports.GetDefaultChildResponse = GetDefaultChildResponse;
class GetOpenCourseDetailHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOpenCourseDetailHeaders = GetOpenCourseDetailHeaders;
class GetOpenCourseDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseId: 'courseId',
            courseType: 'courseType',
            coverUrl: 'coverUrl',
            introduction: 'introduction',
            pushModel: 'pushModel',
            startTime: 'startTime',
            teacherId: 'teacherId',
            teacherName: 'teacherName',
            title: 'title',
        };
    }
    static types() {
        return {
            courseId: 'string',
            courseType: 'number',
            coverUrl: 'string',
            introduction: 'string',
            pushModel: GetOpenCourseDetailResponseBodyPushModel,
            startTime: 'number',
            teacherId: 'string',
            teacherName: 'string',
            title: 'string',
        };
    }
}
exports.GetOpenCourseDetailResponseBody = GetOpenCourseDetailResponseBody;
class GetOpenCourseDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetOpenCourseDetailResponseBody,
        };
    }
}
exports.GetOpenCourseDetailResponse = GetOpenCourseDetailResponse;
class GetOpenCoursesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOpenCoursesHeaders = GetOpenCoursesHeaders;
class GetOpenCoursesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.GetOpenCoursesRequest = GetOpenCoursesRequest;
class GetOpenCoursesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseList: 'courseList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            courseList: { 'type': 'array', 'itemType': GetOpenCoursesResponseBodyCourseList },
            totalCount: 'number',
        };
    }
}
exports.GetOpenCoursesResponseBody = GetOpenCoursesResponseBody;
class GetOpenCoursesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetOpenCoursesResponseBody,
        };
    }
}
exports.GetOpenCoursesResponse = GetOpenCoursesResponse;
class GetRemoteClassCourseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRemoteClassCourseHeaders = GetRemoteClassCourseHeaders;
class GetRemoteClassCourseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
}
exports.GetRemoteClassCourseRequest = GetRemoteClassCourseRequest;
class GetRemoteClassCourseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetRemoteClassCourseResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.GetRemoteClassCourseResponseBody = GetRemoteClassCourseResponseBody;
class GetRemoteClassCourseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetRemoteClassCourseResponseBody,
        };
    }
}
exports.GetRemoteClassCourseResponse = GetRemoteClassCourseResponse;
class GetShareRoleMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetShareRoleMembersHeaders = GetShareRoleMembersHeaders;
class GetShareRoleMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetShareRoleMembersResponseBodyResult },
        };
    }
}
exports.GetShareRoleMembersResponseBody = GetShareRoleMembersResponseBody;
class GetShareRoleMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetShareRoleMembersResponseBody,
        };
    }
}
exports.GetShareRoleMembersResponse = GetShareRoleMembersResponse;
class GetShareRolesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetShareRolesHeaders = GetShareRolesHeaders;
class GetShareRolesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetShareRolesResponseBodyResult },
        };
    }
}
exports.GetShareRolesResponseBody = GetShareRolesResponseBody;
class GetShareRolesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetShareRolesResponseBody,
        };
    }
}
exports.GetShareRolesResponse = GetShareRolesResponse;
class InitCoursesOfClassHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InitCoursesOfClassHeaders = InitCoursesOfClassHeaders;
class InitCoursesOfClassRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courses: 'courses',
            sectionConfig: 'sectionConfig',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courses: { 'type': 'array', 'itemType': InitCoursesOfClassRequestCourses },
            sectionConfig: InitCoursesOfClassRequestSectionConfig,
            opUserId: 'string',
        };
    }
}
exports.InitCoursesOfClassRequest = InitCoursesOfClassRequest;
class InitCoursesOfClassResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.InitCoursesOfClassResponseBody = InitCoursesOfClassResponseBody;
class InitCoursesOfClassResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: InitCoursesOfClassResponseBody,
        };
    }
}
exports.InitCoursesOfClassResponse = InitCoursesOfClassResponse;
class InitDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InitDeviceHeaders = InitDeviceHeaders;
class InitDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            encryptPubKey: 'encryptPubKey',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            version: 'version',
        };
    }
    static types() {
        return {
            encryptPubKey: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            version: 'string',
        };
    }
}
exports.InitDeviceRequest = InitDeviceRequest;
class InitDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            successInfo: 'successInfo',
        };
    }
    static types() {
        return {
            successInfo: 'string',
        };
    }
}
exports.InitDeviceResponseBody = InitDeviceResponseBody;
class InitDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: InitDeviceResponseBody,
        };
    }
}
exports.InitDeviceResponse = InitDeviceResponse;
class InsertSectionConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InsertSectionConfigHeaders = InsertSectionConfigHeaders;
class InsertSectionConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            scheduleName: 'scheduleName',
            sectionModels: 'sectionModels',
            start: 'start',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            end: InsertSectionConfigRequestEnd,
            scheduleName: 'string',
            sectionModels: { 'type': 'array', 'itemType': InsertSectionConfigRequestSectionModels },
            start: InsertSectionConfigRequestStart,
            opUserId: 'string',
        };
    }
}
exports.InsertSectionConfigRequest = InsertSectionConfigRequest;
class InsertSectionConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.InsertSectionConfigResponseBody = InsertSectionConfigResponseBody;
class InsertSectionConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: InsertSectionConfigResponseBody,
        };
    }
}
exports.InsertSectionConfigResponse = InsertSectionConfigResponse;
class ListOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListOrderHeaders = ListOrderHeaders;
class ListOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeEnd: 'createTimeEnd',
            createTimeStart: 'createTimeStart',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            scene: 'scene',
            status: 'status',
            tradeNo: 'tradeNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            createTimeEnd: 'number',
            createTimeStart: 'number',
            merchantId: 'string',
            orderNo: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            scene: 'number',
            status: 'number',
            tradeNo: 'string',
            userId: 'string',
        };
    }
}
exports.ListOrderRequest = ListOrderRequest;
class ListOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
            total: 'total',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListOrderResponseBodyList },
            total: 'number',
        };
    }
}
exports.ListOrderResponseBody = ListOrderResponseBody;
class ListOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOrderResponseBody,
        };
    }
}
exports.ListOrderResponse = ListOrderResponse;
class MoveStudentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.MoveStudentHeaders = MoveStudentHeaders;
class MoveStudentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
            originClassId: 'originClassId',
            targetClassId: 'targetClassId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            operator: 'string',
            originClassId: 'number',
            targetClassId: 'number',
            userId: 'string',
        };
    }
}
exports.MoveStudentRequest = MoveStudentRequest;
class MoveStudentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.MoveStudentResponseBody = MoveStudentResponseBody;
class MoveStudentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: MoveStudentResponseBody,
        };
    }
}
exports.MoveStudentResponse = MoveStudentResponse;
class PayOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PayOrderHeaders = PayOrderHeaders;
class PayOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faceId: 'faceId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            faceId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
            version: 'string',
        };
    }
}
exports.PayOrderRequest = PayOrderRequest;
class PayOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.PayOrderResponseBody = PayOrderResponseBody;
class PayOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PayOrderResponseBody,
        };
    }
}
exports.PayOrderResponse = PayOrderResponse;
class PollingConfirmStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PollingConfirmStatusHeaders = PollingConfirmStatusHeaders;
class PollingConfirmStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
            ext: 'ext',
            isvCode: 'isvCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            ext: 'string',
            isvCode: 'string',
            opUserId: 'string',
        };
    }
}
exports.PollingConfirmStatusRequest = PollingConfirmStatusRequest;
class PollingConfirmStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            universityPollingCourseStatusResponse: 'universityPollingCourseStatusResponse',
        };
    }
    static types() {
        return {
            universityPollingCourseStatusResponse: PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse,
        };
    }
}
exports.PollingConfirmStatusResponseBody = PollingConfirmStatusResponseBody;
class PollingConfirmStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PollingConfirmStatusResponseBody,
        };
    }
}
exports.PollingConfirmStatusResponse = PollingConfirmStatusResponse;
class QueryAllSubjectsFromClassScheduleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleHeaders = QueryAllSubjectsFromClassScheduleHeaders;
class QueryAllSubjectsFromClassScheduleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
            periodCode: 'periodCode',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
            periodCode: 'string',
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleRequest = QueryAllSubjectsFromClassScheduleRequest;
class QueryAllSubjectsFromClassScheduleShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classIdsShrink: 'classIds',
            opUserId: 'opUserId',
            periodCode: 'periodCode',
        };
    }
    static types() {
        return {
            classIdsShrink: 'string',
            opUserId: 'string',
            periodCode: 'string',
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleShrinkRequest = QueryAllSubjectsFromClassScheduleShrinkRequest;
class QueryAllSubjectsFromClassScheduleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryAllSubjectsFromClassScheduleResponseBodyResult },
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBody = QueryAllSubjectsFromClassScheduleResponseBody;
class QueryAllSubjectsFromClassScheduleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllSubjectsFromClassScheduleResponseBody,
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleResponse = QueryAllSubjectsFromClassScheduleResponse;
class QueryClassScheduleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryClassScheduleHeaders = QueryClassScheduleHeaders;
class QueryClassScheduleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sectionIndexList: 'sectionIndexList',
            subscriberIds: 'subscriberIds',
            endTime: 'endTime',
            opUserId: 'opUserId',
            startTime: 'startTime',
            subscriberType: 'subscriberType',
        };
    }
    static types() {
        return {
            sectionIndexList: { 'type': 'array', 'itemType': 'number' },
            subscriberIds: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            opUserId: 'string',
            startTime: 'number',
            subscriberType: 'string',
        };
    }
}
exports.QueryClassScheduleRequest = QueryClassScheduleRequest;
class QueryClassScheduleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            config: 'config',
            courseDTOS: 'courseDTOS',
        };
    }
    static types() {
        return {
            config: QueryClassScheduleResponseBodyConfig,
            courseDTOS: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyCourseDTOS },
        };
    }
}
exports.QueryClassScheduleResponseBody = QueryClassScheduleResponseBody;
class QueryClassScheduleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryClassScheduleResponseBody,
        };
    }
}
exports.QueryClassScheduleResponse = QueryClassScheduleResponse;
class QueryClassScheduleByTimeSchoolHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryClassScheduleByTimeSchoolHeaders = QueryClassScheduleByTimeSchoolHeaders;
class QueryClassScheduleByTimeSchoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            opUserId: 'opUserId',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            opUserId: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryClassScheduleByTimeSchoolRequest = QueryClassScheduleByTimeSchoolRequest;
class QueryClassScheduleByTimeSchoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryClassScheduleByTimeSchoolResponseBodyResult },
        };
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBody = QueryClassScheduleByTimeSchoolResponseBody;
class QueryClassScheduleByTimeSchoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryClassScheduleByTimeSchoolResponseBody,
        };
    }
}
exports.QueryClassScheduleByTimeSchoolResponse = QueryClassScheduleByTimeSchoolResponse;
class QueryClassScheduleConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryClassScheduleConfigHeaders = QueryClassScheduleConfigHeaders;
class QueryClassScheduleConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
        };
    }
}
exports.QueryClassScheduleConfigRequest = QueryClassScheduleConfigRequest;
class QueryClassScheduleConfigShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classIdsShrink: 'classIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classIdsShrink: 'string',
            opUserId: 'string',
        };
    }
}
exports.QueryClassScheduleConfigShrinkRequest = QueryClassScheduleConfigShrinkRequest;
class QueryClassScheduleConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryClassScheduleConfigResponseBodyResult },
        };
    }
}
exports.QueryClassScheduleConfigResponseBody = QueryClassScheduleConfigResponseBody;
class QueryClassScheduleConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryClassScheduleConfigResponseBody,
        };
    }
}
exports.QueryClassScheduleConfigResponse = QueryClassScheduleConfigResponse;
class QueryDeviceListByCorpIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDeviceListByCorpIdHeaders = QueryDeviceListByCorpIdHeaders;
class QueryDeviceListByCorpIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            operator: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryDeviceListByCorpIdRequest = QueryDeviceListByCorpIdRequest;
class QueryDeviceListByCorpIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryDeviceListByCorpIdResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.QueryDeviceListByCorpIdResponseBody = QueryDeviceListByCorpIdResponseBody;
class QueryDeviceListByCorpIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceListByCorpIdResponseBody,
        };
    }
}
exports.QueryDeviceListByCorpIdResponse = QueryDeviceListByCorpIdResponse;
class QueryEduAssetSpacesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryEduAssetSpacesHeaders = QueryEduAssetSpacesHeaders;
class QueryEduAssetSpacesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'bizCode',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.QueryEduAssetSpacesRequest = QueryEduAssetSpacesRequest;
class QueryEduAssetSpacesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            spaces: 'spaces',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'string',
            spaces: { 'type': 'array', 'itemType': QueryEduAssetSpacesResponseBodySpaces },
        };
    }
}
exports.QueryEduAssetSpacesResponseBody = QueryEduAssetSpacesResponseBody;
class QueryEduAssetSpacesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEduAssetSpacesResponseBody,
        };
    }
}
exports.QueryEduAssetSpacesResponse = QueryEduAssetSpacesResponse;
class QueryGroupIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupIdHeaders = QueryGroupIdHeaders;
class QueryGroupIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sn: 'sn',
        };
    }
    static types() {
        return {
            sn: 'string',
        };
    }
}
exports.QueryGroupIdRequest = QueryGroupIdRequest;
class QueryGroupIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            groupId: 'groupId',
            merchantId: 'merchantId',
            merchantName: 'merchantName',
            name: 'name',
            pid: 'pid',
        };
    }
    static types() {
        return {
            corpId: 'string',
            groupId: 'string',
            merchantId: 'string',
            merchantName: 'string',
            name: 'string',
            pid: 'string',
        };
    }
}
exports.QueryGroupIdResponseBody = QueryGroupIdResponseBody;
class QueryGroupIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryGroupIdResponseBody,
        };
    }
}
exports.QueryGroupIdResponse = QueryGroupIdResponse;
class QueryOrgRelationListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryOrgRelationListHeaders = QueryOrgRelationListHeaders;
class QueryOrgRelationListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
}
exports.QueryOrgRelationListRequest = QueryOrgRelationListRequest;
class QueryOrgRelationListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryOrgRelationListResponseBodyResult },
            success: 'boolean',
        };
    }
}
exports.QueryOrgRelationListResponseBody = QueryOrgRelationListResponseBody;
class QueryOrgRelationListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryOrgRelationListResponseBody,
        };
    }
}
exports.QueryOrgRelationListResponse = QueryOrgRelationListResponse;
class QueryOrgSecretKeyHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryOrgSecretKeyHeaders = QueryOrgSecretKeyHeaders;
class QueryOrgSecretKeyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isvCode: 'isvCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            isvCode: 'string',
            opUserId: 'string',
        };
    }
}
exports.QueryOrgSecretKeyRequest = QueryOrgSecretKeyRequest;
class QueryOrgSecretKeyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            universitySecretKeyInfo: 'universitySecretKeyInfo',
        };
    }
    static types() {
        return {
            universitySecretKeyInfo: QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo,
        };
    }
}
exports.QueryOrgSecretKeyResponseBody = QueryOrgSecretKeyResponseBody;
class QueryOrgSecretKeyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryOrgSecretKeyResponseBody,
        };
    }
}
exports.QueryOrgSecretKeyResponse = QueryOrgSecretKeyResponse;
class QueryOrgTypeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryOrgTypeHeaders = QueryOrgTypeHeaders;
class QueryOrgTypeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orgType: 'orgType',
        };
    }
    static types() {
        return {
            orgType: 'number',
        };
    }
}
exports.QueryOrgTypeResponseBody = QueryOrgTypeResponseBody;
class QueryOrgTypeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryOrgTypeResponseBody,
        };
    }
}
exports.QueryOrgTypeResponse = QueryOrgTypeResponse;
class QueryPayResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPayResultHeaders = QueryPayResultHeaders;
class QueryPayResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faceId: 'faceId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            faceId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
            version: 'string',
        };
    }
}
exports.QueryPayResultRequest = QueryPayResultRequest;
class QueryPayResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
}
exports.QueryPayResultResponseBody = QueryPayResultResponseBody;
class QueryPayResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryPayResultResponseBody,
        };
    }
}
exports.QueryPayResultResponse = QueryPayResultResponse;
class QueryPhysicalClassroomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPhysicalClassroomHeaders = QueryPhysicalClassroomHeaders;
class QueryPhysicalClassroomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classroomId: 'classroomId',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomId: 'number',
            opUserId: 'string',
        };
    }
}
exports.QueryPhysicalClassroomRequest = QueryPhysicalClassroomRequest;
class QueryPhysicalClassroomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryPhysicalClassroomResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.QueryPhysicalClassroomResponseBody = QueryPhysicalClassroomResponseBody;
class QueryPhysicalClassroomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryPhysicalClassroomResponseBody,
        };
    }
}
exports.QueryPhysicalClassroomResponse = QueryPhysicalClassroomResponse;
class QueryPurchaseInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPurchaseInfoHeaders = QueryPurchaseInfoHeaders;
class QueryPurchaseInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            merchantId: 'merchantId',
            scene: 'scene',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            merchantId: 'string',
            scene: 'number',
            sn: 'string',
            userId: 'string',
        };
    }
}
exports.QueryPurchaseInfoRequest = QueryPurchaseInfoRequest;
class QueryPurchaseInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            merchantId: 'merchantId',
            name: 'name',
            scene: 'scene',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            merchantId: 'string',
            name: 'string',
            scene: 'number',
            status: 'number',
            userId: 'string',
        };
    }
}
exports.QueryPurchaseInfoResponseBody = QueryPurchaseInfoResponseBody;
class QueryPurchaseInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryPurchaseInfoResponseBody,
        };
    }
}
exports.QueryPurchaseInfoResponse = QueryPurchaseInfoResponse;
class QueryRemoteClassCourseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryRemoteClassCourseHeaders = QueryRemoteClassCourseHeaders;
class QueryRemoteClassCourseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            operator: 'operator',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            operator: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryRemoteClassCourseRequest = QueryRemoteClassCourseRequest;
class QueryRemoteClassCourseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryRemoteClassCourseResponseBodyResult },
            success: 'boolean',
        };
    }
}
exports.QueryRemoteClassCourseResponseBody = QueryRemoteClassCourseResponseBody;
class QueryRemoteClassCourseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryRemoteClassCourseResponseBody,
        };
    }
}
exports.QueryRemoteClassCourseResponse = QueryRemoteClassCourseResponse;
class QuerySchoolUserFaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySchoolUserFaceHeaders = QuerySchoolUserFaceHeaders;
class QuerySchoolUserFaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            sn: 'string',
            type: 'number',
        };
    }
}
exports.QuerySchoolUserFaceRequest = QuerySchoolUserFaceRequest;
class QuerySchoolUserFaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            hasMore: 'hasMore',
            userFaceList: 'userFaceList',
        };
    }
    static types() {
        return {
            corpId: 'string',
            hasMore: 'boolean',
            userFaceList: { 'type': 'array', 'itemType': QuerySchoolUserFaceResponseBodyUserFaceList },
        };
    }
}
exports.QuerySchoolUserFaceResponseBody = QuerySchoolUserFaceResponseBody;
class QuerySchoolUserFaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySchoolUserFaceResponseBody,
        };
    }
}
exports.QuerySchoolUserFaceResponse = QuerySchoolUserFaceResponse;
class QueryStatisticsDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryStatisticsDataHeaders = QueryStatisticsDataHeaders;
class QueryStatisticsDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sectionIndexList: 'sectionIndexList',
            teacherUserIds: 'teacherUserIds',
            endTime: 'endTime',
            opUserId: 'opUserId',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            sectionIndexList: { 'type': 'array', 'itemType': 'number' },
            teacherUserIds: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            opUserId: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryStatisticsDataRequest = QueryStatisticsDataRequest;
class QueryStatisticsDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryStatisticsDataResponseBodyResult },
        };
    }
}
exports.QueryStatisticsDataResponseBody = QueryStatisticsDataResponseBody;
class QueryStatisticsDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryStatisticsDataResponseBody,
        };
    }
}
exports.QueryStatisticsDataResponse = QueryStatisticsDataResponse;
class QuerySubjectTeachersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySubjectTeachersHeaders = QuerySubjectTeachersHeaders;
class QuerySubjectTeachersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
            subjectCode: 'subjectCode',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
            subjectCode: 'string',
        };
    }
}
exports.QuerySubjectTeachersRequest = QuerySubjectTeachersRequest;
class QuerySubjectTeachersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QuerySubjectTeachersResponseBodyResult },
        };
    }
}
exports.QuerySubjectTeachersResponseBody = QuerySubjectTeachersResponseBody;
class QuerySubjectTeachersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySubjectTeachersResponseBody,
        };
    }
}
exports.QuerySubjectTeachersResponse = QuerySubjectTeachersResponse;
class QueryTeachSubjectsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryTeachSubjectsHeaders = QueryTeachSubjectsHeaders;
class QueryTeachSubjectsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
        };
    }
}
exports.QueryTeachSubjectsRequest = QueryTeachSubjectsRequest;
class QueryTeachSubjectsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryTeachSubjectsResponseBodyResult },
        };
    }
}
exports.QueryTeachSubjectsResponseBody = QueryTeachSubjectsResponseBody;
class QueryTeachSubjectsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryTeachSubjectsResponseBody,
        };
    }
}
exports.QueryTeachSubjectsResponse = QueryTeachSubjectsResponse;
class QueryUniversityCourseGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUniversityCourseGroupHeaders = QueryUniversityCourseGroupHeaders;
class QueryUniversityCourseGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            opUserId: 'string',
        };
    }
}
exports.QueryUniversityCourseGroupRequest = QueryUniversityCourseGroupRequest;
class QueryUniversityCourseGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            universityCourseGroupInfo: 'universityCourseGroupInfo',
        };
    }
    static types() {
        return {
            universityCourseGroupInfo: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo,
        };
    }
}
exports.QueryUniversityCourseGroupResponseBody = QueryUniversityCourseGroupResponseBody;
class QueryUniversityCourseGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUniversityCourseGroupResponseBody,
        };
    }
}
exports.QueryUniversityCourseGroupResponse = QueryUniversityCourseGroupResponse;
class QueryUserFaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserFaceHeaders = QueryUserFaceHeaders;
class QueryUserFaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faceId: 'faceId',
            sn: 'sn',
        };
    }
    static types() {
        return {
            faceId: 'string',
            sn: 'string',
        };
    }
}
exports.QueryUserFaceRequest = QueryUserFaceRequest;
class QueryUserFaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            faceId: 'faceId',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            faceId: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.QueryUserFaceResponseBody = QueryUserFaceResponseBody;
class QueryUserFaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserFaceResponseBody,
        };
    }
}
exports.QueryUserFaceResponse = QueryUserFaceResponse;
class QueryUserPayInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserPayInfoHeaders = QueryUserPayInfoHeaders;
class QueryUserPayInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faceId: 'faceId',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            sn: 'string',
            userId: 'string',
        };
    }
}
exports.QueryUserPayInfoRequest = QueryUserPayInfoRequest;
class QueryUserPayInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            signNo: 'signNo',
        };
    }
    static types() {
        return {
            signNo: 'string',
        };
    }
}
exports.QueryUserPayInfoResponseBody = QueryUserPayInfoResponseBody;
class QueryUserPayInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserPayInfoResponseBody,
        };
    }
}
exports.QueryUserPayInfoResponse = QueryUserPayInfoResponse;
class RemoveDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveDeviceHeaders = RemoveDeviceHeaders;
class RemoveDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            merchantId: 'merchantId',
            sn: 'sn',
        };
    }
    static types() {
        return {
            merchantId: 'string',
            sn: 'string',
        };
    }
}
exports.RemoveDeviceRequest = RemoveDeviceRequest;
class RemoveDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
}
exports.RemoveDeviceResponseBody = RemoveDeviceResponseBody;
class RemoveDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RemoveDeviceResponseBody,
        };
    }
}
exports.RemoveDeviceResponse = RemoveDeviceResponse;
class ReportDeviceLogHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ReportDeviceLogHeaders = ReportDeviceLogHeaders;
class ReportDeviceLogRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mediaId: 'mediaId',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            mediaId: 'string',
            sn: 'string',
            type: 'string',
        };
    }
}
exports.ReportDeviceLogRequest = ReportDeviceLogRequest;
class ReportDeviceLogResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.ReportDeviceLogResponseBody = ReportDeviceLogResponseBody;
class ReportDeviceLogResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ReportDeviceLogResponseBody,
        };
    }
}
exports.ReportDeviceLogResponse = ReportDeviceLogResponse;
class ReportDeviceUseLogHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ReportDeviceUseLogHeaders = ReportDeviceUseLogHeaders;
class ReportDeviceUseLogRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            orderNo: 'orderNo',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            action: 'string',
            orderNo: 'string',
            sn: 'string',
            userId: 'string',
        };
    }
}
exports.ReportDeviceUseLogRequest = ReportDeviceUseLogRequest;
class ReportDeviceUseLogResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.ReportDeviceUseLogResponseBody = ReportDeviceUseLogResponseBody;
class ReportDeviceUseLogResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ReportDeviceUseLogResponseBody,
        };
    }
}
exports.ReportDeviceUseLogResponse = ReportDeviceUseLogResponse;
class SearchTeachersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchTeachersHeaders = SearchTeachersHeaders;
class SearchTeachersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameKeyword: 'nameKeyword',
        };
    }
    static types() {
        return {
            nameKeyword: 'string',
        };
    }
}
exports.SearchTeachersRequest = SearchTeachersRequest;
class SearchTeachersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            users: 'users',
        };
    }
    static types() {
        return {
            users: { 'type': 'array', 'itemType': SearchTeachersResponseBodyUsers },
        };
    }
}
exports.SearchTeachersResponseBody = SearchTeachersResponseBody;
class SearchTeachersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SearchTeachersResponseBody,
        };
    }
}
exports.SearchTeachersResponse = SearchTeachersResponse;
class SendMessageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendMessageHeaders = SendMessageHeaders;
class SendMessageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'bizId',
            fromUserId: 'fromUserId',
            sn: 'sn',
            toUserIdList: 'toUserIdList',
            type: 'type',
        };
    }
    static types() {
        return {
            bizId: 'string',
            fromUserId: 'string',
            sn: 'string',
            toUserIdList: { 'type': 'array', 'itemType': 'string' },
            type: 'number',
        };
    }
}
exports.SendMessageRequest = SendMessageRequest;
class SendMessageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            successInfo: 'successInfo',
        };
    }
    static types() {
        return {
            successInfo: 'string',
        };
    }
}
exports.SendMessageResponseBody = SendMessageResponseBody;
class SendMessageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SendMessageResponseBody,
        };
    }
}
exports.SendMessageResponse = SendMessageResponse;
class StartCourseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.StartCourseHeaders = StartCourseHeaders;
class StartCourseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
            ext: 'ext',
            isvCode: 'isvCode',
            livePlayInfoList: 'livePlayInfoList',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            ext: 'string',
            isvCode: 'string',
            livePlayInfoList: { 'type': 'array', 'itemType': StartCourseRequestLivePlayInfoList },
            opUserId: 'string',
        };
    }
}
exports.StartCourseRequest = StartCourseRequest;
class StartCourseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            universityCourseCommonResponse: 'universityCourseCommonResponse',
        };
    }
    static types() {
        return {
            universityCourseCommonResponse: StartCourseResponseBodyUniversityCourseCommonResponse,
        };
    }
}
exports.StartCourseResponseBody = StartCourseResponseBody;
class StartCourseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: StartCourseResponseBody,
        };
    }
}
exports.StartCourseResponse = StartCourseResponse;
class StartCoursePrepareHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.StartCoursePrepareHeaders = StartCoursePrepareHeaders;
class StartCoursePrepareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseDate: 'courseDate',
            courseGroupCode: 'courseGroupCode',
            deviceId: 'deviceId',
            ext: 'ext',
            isvCode: 'isvCode',
            liveCoverImage: 'liveCoverImage',
            sectionIndex: 'sectionIndex',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseDate: 'string',
            courseGroupCode: 'string',
            deviceId: 'string',
            ext: 'string',
            isvCode: 'string',
            liveCoverImage: 'string',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
        };
    }
}
exports.StartCoursePrepareRequest = StartCoursePrepareRequest;
class StartCoursePrepareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            universityCourseCommonResponse: 'universityCourseCommonResponse',
        };
    }
    static types() {
        return {
            universityCourseCommonResponse: StartCoursePrepareResponseBodyUniversityCourseCommonResponse,
        };
    }
}
exports.StartCoursePrepareResponseBody = StartCoursePrepareResponseBody;
class StartCoursePrepareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: StartCoursePrepareResponseBody,
        };
    }
}
exports.StartCoursePrepareResponse = StartCoursePrepareResponse;
class SubscribeUniversityCourseGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SubscribeUniversityCourseGroupHeaders = SubscribeUniversityCourseGroupHeaders;
class SubscribeUniversityCourseGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            studentUserIds: 'studentUserIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            studentUserIds: { 'type': 'array', 'itemType': 'string' },
            opUserId: 'string',
        };
    }
}
exports.SubscribeUniversityCourseGroupRequest = SubscribeUniversityCourseGroupRequest;
class SubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SubscribeUniversityCourseGroupResponseBody = SubscribeUniversityCourseGroupResponseBody;
class SubscribeUniversityCourseGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SubscribeUniversityCourseGroupResponseBody,
        };
    }
}
exports.SubscribeUniversityCourseGroupResponse = SubscribeUniversityCourseGroupResponse;
class UnsubscribeUniversityCourseGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UnsubscribeUniversityCourseGroupHeaders = UnsubscribeUniversityCourseGroupHeaders;
class UnsubscribeUniversityCourseGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            studentUserIds: 'studentUserIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            studentUserIds: { 'type': 'array', 'itemType': 'string' },
            opUserId: 'string',
        };
    }
}
exports.UnsubscribeUniversityCourseGroupRequest = UnsubscribeUniversityCourseGroupRequest;
class UnsubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UnsubscribeUniversityCourseGroupResponseBody = UnsubscribeUniversityCourseGroupResponseBody;
class UnsubscribeUniversityCourseGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UnsubscribeUniversityCourseGroupResponseBody,
        };
    }
}
exports.UnsubscribeUniversityCourseGroupResponse = UnsubscribeUniversityCourseGroupResponse;
class UpdateCoursesOfClassHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateCoursesOfClassHeaders = UpdateCoursesOfClassHeaders;
class UpdateCoursesOfClassRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courses: 'courses',
            sectionConfig: 'sectionConfig',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courses: { 'type': 'array', 'itemType': UpdateCoursesOfClassRequestCourses },
            sectionConfig: UpdateCoursesOfClassRequestSectionConfig,
            opUserId: 'string',
        };
    }
}
exports.UpdateCoursesOfClassRequest = UpdateCoursesOfClassRequest;
class UpdateCoursesOfClassResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateCoursesOfClassResponseBody = UpdateCoursesOfClassResponseBody;
class UpdateCoursesOfClassResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateCoursesOfClassResponseBody,
        };
    }
}
exports.UpdateCoursesOfClassResponse = UpdateCoursesOfClassResponse;
class UpdatePhysicalClassroomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdatePhysicalClassroomHeaders = UpdatePhysicalClassroomHeaders;
class UpdatePhysicalClassroomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classroomBuilding: 'classroomBuilding',
            classroomCampus: 'classroomCampus',
            classroomFloor: 'classroomFloor',
            classroomId: 'classroomId',
            classroomName: 'classroomName',
            classroomNumber: 'classroomNumber',
            directBroadcast: 'directBroadcast',
            ext: 'ext',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomBuilding: 'string',
            classroomCampus: 'string',
            classroomFloor: 'string',
            classroomId: 'number',
            classroomName: 'string',
            classroomNumber: 'string',
            directBroadcast: 'string',
            ext: 'string',
            opUserId: 'string',
        };
    }
}
exports.UpdatePhysicalClassroomRequest = UpdatePhysicalClassroomRequest;
class UpdatePhysicalClassroomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdatePhysicalClassroomResponseBody = UpdatePhysicalClassroomResponseBody;
class UpdatePhysicalClassroomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdatePhysicalClassroomResponseBody,
        };
    }
}
exports.UpdatePhysicalClassroomResponse = UpdatePhysicalClassroomResponse;
class UpdateRemoteClassCourseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateRemoteClassCourseHeaders = UpdateRemoteClassCourseHeaders;
class UpdateRemoteClassCourseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            authCode: 'authCode',
            courseCode: 'courseCode',
            courseName: 'courseName',
            endTime: 'endTime',
            startTime: 'startTime',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': UpdateRemoteClassCourseRequestAttendParticipants },
            authCode: 'string',
            courseCode: 'string',
            courseName: 'string',
            endTime: 'number',
            startTime: 'number',
            teachingParticipant: UpdateRemoteClassCourseRequestTeachingParticipant,
        };
    }
}
exports.UpdateRemoteClassCourseRequest = UpdateRemoteClassCourseRequest;
class UpdateRemoteClassCourseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateRemoteClassCourseResponseBody = UpdateRemoteClassCourseResponseBody;
class UpdateRemoteClassCourseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateRemoteClassCourseResponseBody,
        };
    }
}
exports.UpdateRemoteClassCourseResponse = UpdateRemoteClassCourseResponse;
class UpdateRemoteClassDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateRemoteClassDeviceHeaders = UpdateRemoteClassDeviceHeaders;
class UpdateRemoteClassDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authCode: 'authCode',
            deviceCode: 'deviceCode',
            deviceName: 'deviceName',
        };
    }
    static types() {
        return {
            authCode: 'string',
            deviceCode: 'string',
            deviceName: 'string',
        };
    }
}
exports.UpdateRemoteClassDeviceRequest = UpdateRemoteClassDeviceRequest;
class UpdateRemoteClassDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateRemoteClassDeviceResponseBody = UpdateRemoteClassDeviceResponseBody;
class UpdateRemoteClassDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateRemoteClassDeviceResponseBody,
        };
    }
}
exports.UpdateRemoteClassDeviceResponse = UpdateRemoteClassDeviceResponse;
class UpdateUniversityCourseGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateUniversityCourseGroupHeaders = UpdateUniversityCourseGroupHeaders;
class UpdateUniversityCourseGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            courseGroupIntroduce: 'courseGroupIntroduce',
            courseGroupName: 'courseGroupName',
            courserGroupItemModels: 'courserGroupItemModels',
            ext: 'ext',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            courseGroupIntroduce: 'string',
            courseGroupName: 'string',
            courserGroupItemModels: { 'type': 'array', 'itemType': UpdateUniversityCourseGroupRequestCourserGroupItemModels },
            ext: 'string',
            opUserId: 'string',
        };
    }
}
exports.UpdateUniversityCourseGroupRequest = UpdateUniversityCourseGroupRequest;
class UpdateUniversityCourseGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateUniversityCourseGroupResponseBody = UpdateUniversityCourseGroupResponseBody;
class UpdateUniversityCourseGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateUniversityCourseGroupResponseBody,
        };
    }
}
exports.UpdateUniversityCourseGroupResponse = UpdateUniversityCourseGroupResponse;
class BatchCreateRequestDataCardRuleItemParamList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardRuleAttr: 'cardRuleAttr',
            cardTaskCode: 'cardTaskCode',
            dailyDubbing: 'dailyDubbing',
            relationId: 'relationId',
            relationTitle: 'relationTitle',
            relationUrl: 'relationUrl',
        };
    }
    static types() {
        return {
            cardRuleAttr: 'string',
            cardTaskCode: 'string',
            dailyDubbing: 'number',
            relationId: 'string',
            relationTitle: 'string',
            relationUrl: 'string',
        };
    }
}
exports.BatchCreateRequestDataCardRuleItemParamList = BatchCreateRequestDataCardRuleItemParamList;
class BatchCreateRequestDataOrgClassStudentGroupListClassListStudents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            staffId: 'staffId',
        };
    }
    static types() {
        return {
            name: 'string',
            staffId: 'string',
        };
    }
}
exports.BatchCreateRequestDataOrgClassStudentGroupListClassListStudents = BatchCreateRequestDataOrgClassStudentGroupListClassListStudents;
class BatchCreateRequestDataOrgClassStudentGroupListClassList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            className: 'className',
            students: 'students',
        };
    }
    static types() {
        return {
            classId: 'number',
            className: 'string',
            students: { 'type': 'array', 'itemType': BatchCreateRequestDataOrgClassStudentGroupListClassListStudents },
        };
    }
}
exports.BatchCreateRequestDataOrgClassStudentGroupListClassList = BatchCreateRequestDataOrgClassStudentGroupListClassList;
class BatchCreateRequestDataOrgClassStudentGroupList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classList: 'classList',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            classList: { 'type': 'array', 'itemType': BatchCreateRequestDataOrgClassStudentGroupListClassList },
            corpId: 'string',
        };
    }
}
exports.BatchCreateRequestDataOrgClassStudentGroupList = BatchCreateRequestDataOrgClassStudentGroupList;
class BatchCreateRequestData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            canReissueCard: 'canReissueCard',
            cardCycle: 'cardCycle',
            cardFrequency: 'cardFrequency',
            cardRuleItemParamList: 'cardRuleItemParamList',
            classIds: 'classIds',
            classNames: 'classNames',
            content: 'content',
            effectDate: 'effectDate',
            medias: 'medias',
            needMetering: 'needMetering',
            orgClassStudentGroupList: 'orgClassStudentGroupList',
            remindHour: 'remindHour',
            remindMinute: 'remindMinute',
            targetRole: 'targetRole',
            templateId: 'templateId',
            title: 'title',
            unitOfMeasurement: 'unitOfMeasurement',
        };
    }
    static types() {
        return {
            canReissueCard: 'boolean',
            cardCycle: 'number',
            cardFrequency: { 'type': 'array', 'itemType': 'number' },
            cardRuleItemParamList: { 'type': 'array', 'itemType': BatchCreateRequestDataCardRuleItemParamList },
            classIds: { 'type': 'array', 'itemType': 'string' },
            classNames: { 'type': 'array', 'itemType': 'string' },
            content: 'string',
            effectDate: 'number',
            medias: 'string',
            needMetering: 'string',
            orgClassStudentGroupList: { 'type': 'array', 'itemType': BatchCreateRequestDataOrgClassStudentGroupList },
            remindHour: 'number',
            remindMinute: 'number',
            targetRole: 'string',
            templateId: 'number',
            title: 'string',
            unitOfMeasurement: 'string',
        };
    }
}
exports.BatchCreateRequestData = BatchCreateRequestData;
class BatchCreateResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpIdCardIdMap: 'corpIdCardIdMap',
        };
    }
    static types() {
        return {
            corpIdCardIdMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.BatchCreateResponseBodyResult = BatchCreateResponseBodyResult;
class BatchOrgCreateHWRequestOpenSelectItemListClassListStudents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatar: 'avatar',
            name: 'name',
            staffId: 'staffId',
        };
    }
    static types() {
        return {
            avatar: 'string',
            name: 'string',
            staffId: 'string',
        };
    }
}
exports.BatchOrgCreateHWRequestOpenSelectItemListClassListStudents = BatchOrgCreateHWRequestOpenSelectItemListClassListStudents;
class BatchOrgCreateHWRequestOpenSelectItemListClassList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            all: 'all',
            classId: 'classId',
            className: 'className',
            students: 'students',
        };
    }
    static types() {
        return {
            all: 'boolean',
            classId: 'string',
            className: 'string',
            students: { 'type': 'array', 'itemType': BatchOrgCreateHWRequestOpenSelectItemListClassListStudents },
        };
    }
}
exports.BatchOrgCreateHWRequestOpenSelectItemListClassList = BatchOrgCreateHWRequestOpenSelectItemListClassList;
class BatchOrgCreateHWRequestOpenSelectItemList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classList: 'classList',
            corpId: 'corpId',
            selectedClassesDesc: 'selectedClassesDesc',
        };
    }
    static types() {
        return {
            classList: { 'type': 'array', 'itemType': BatchOrgCreateHWRequestOpenSelectItemListClassList },
            corpId: 'string',
            selectedClassesDesc: 'string',
        };
    }
}
exports.BatchOrgCreateHWRequestOpenSelectItemList = BatchOrgCreateHWRequestOpenSelectItemList;
class BatchOrgCreateHWResponseBodyResultPublishList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpid: 'corpid',
            hwid: 'hwid',
        };
    }
    static types() {
        return {
            corpid: 'string',
            hwid: 'number',
        };
    }
}
exports.BatchOrgCreateHWResponseBodyResultPublishList = BatchOrgCreateHWResponseBodyResultPublishList;
class BatchOrgCreateHWResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            publishList: 'publishList',
        };
    }
    static types() {
        return {
            publishList: { 'type': 'array', 'itemType': BatchOrgCreateHWResponseBodyResultPublishList },
        };
    }
}
exports.BatchOrgCreateHWResponseBodyResult = BatchOrgCreateHWResponseBodyResult;
class CreateCustomClassRequestCustomClass extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
        };
    }
    static types() {
        return {
            name: 'string',
        };
    }
}
exports.CreateCustomClassRequestCustomClass = CreateCustomClassRequestCustomClass;
class CreateCustomClassResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
}
exports.CreateCustomClassResponseBodyResult = CreateCustomClassResponseBodyResult;
class CreateCustomDeptRequestCustomDept extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            type: 'type',
        };
    }
    static types() {
        return {
            name: 'string',
            type: 'string',
        };
    }
}
exports.CreateCustomDeptRequestCustomDept = CreateCustomDeptRequestCustomDept;
class CreateCustomDeptResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
}
exports.CreateCustomDeptResponseBodyResult = CreateCustomDeptResponseBodyResult;
class CreateInviteUrlResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inviteUrl: 'inviteUrl',
        };
    }
    static types() {
        return {
            inviteUrl: 'string',
        };
    }
}
exports.CreateInviteUrlResponseBodyResult = CreateInviteUrlResponseBodyResult;
class CreateOrderRequestDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualAmount: 'actualAmount',
            itemAmount: 'itemAmount',
            itemName: 'itemName',
            scene: 'scene',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            itemAmount: 'number',
            itemName: 'string',
            scene: 'number',
        };
    }
}
exports.CreateOrderRequestDetailList = CreateOrderRequestDetailList;
class CreateOrderFlowRequestDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualAmount: 'actualAmount',
            itemAmount: 'itemAmount',
            itemId: 'itemId',
            itemName: 'itemName',
            scene: 'scene',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            itemAmount: 'number',
            itemId: 'number',
            itemName: 'string',
            scene: 'number',
        };
    }
}
exports.CreateOrderFlowRequestDetailList = CreateOrderFlowRequestDetailList;
class CreateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
}
exports.CreateRemoteClassCourseRequestAttendParticipants = CreateRemoteClassCourseRequestAttendParticipants;
class CreateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
}
exports.CreateRemoteClassCourseRequestTeachingParticipant = CreateRemoteClassCourseRequestTeachingParticipant;
class CreateRemoteClassCourseResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
        };
    }
    static types() {
        return {
            courseCode: 'string',
        };
    }
}
exports.CreateRemoteClassCourseResponseBodyResult = CreateRemoteClassCourseResponseBodyResult;
class CreateSectionConfigRequestSectionConfigsSectionEndDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionEndDate = CreateSectionConfigRequestSectionConfigsSectionEndDate;
class CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime = CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime;
class CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime = CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime;
class CreateSectionConfigRequestSectionConfigsSectionModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sectionEndTime: 'sectionEndTime',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionStartTime: 'sectionStartTime',
            sectionType: 'sectionType',
        };
    }
    static types() {
        return {
            sectionEndTime: CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionStartTime: CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime,
            sectionType: 'string',
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionModels = CreateSectionConfigRequestSectionConfigsSectionModels;
class CreateSectionConfigRequestSectionConfigsSectionStartDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionStartDate = CreateSectionConfigRequestSectionConfigsSectionStartDate;
class CreateSectionConfigRequestSectionConfigsSemesterEndDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigsSemesterEndDate = CreateSectionConfigRequestSectionConfigsSemesterEndDate;
class CreateSectionConfigRequestSectionConfigsSemesterStartDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigsSemesterStartDate = CreateSectionConfigRequestSectionConfigsSemesterStartDate;
class CreateSectionConfigRequestSectionConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            scheduleName: 'scheduleName',
            schoolYear: 'schoolYear',
            sectionEndDate: 'sectionEndDate',
            sectionModels: 'sectionModels',
            sectionStartDate: 'sectionStartDate',
            semester: 'semester',
            semesterEndDate: 'semesterEndDate',
            semesterStartDate: 'semesterStartDate',
        };
    }
    static types() {
        return {
            scheduleName: 'string',
            schoolYear: 'string',
            sectionEndDate: CreateSectionConfigRequestSectionConfigsSectionEndDate,
            sectionModels: { 'type': 'array', 'itemType': CreateSectionConfigRequestSectionConfigsSectionModels },
            sectionStartDate: CreateSectionConfigRequestSectionConfigsSectionStartDate,
            semester: 'number',
            semesterEndDate: CreateSectionConfigRequestSectionConfigsSemesterEndDate,
            semesterStartDate: CreateSectionConfigRequestSectionConfigsSemesterStartDate,
        };
    }
}
exports.CreateSectionConfigRequestSectionConfigs = CreateSectionConfigRequestSectionConfigs;
class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate = CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate = CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
class CreateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classPeriodType: 'classPeriodType',
            classroomId: 'classroomId',
            courseType: 'courseType',
            courserGroupItemEndDate: 'courserGroupItemEndDate',
            courserGroupItemStartDate: 'courserGroupItemStartDate',
            dayOfWeek: 'dayOfWeek',
            sectionIndex: 'sectionIndex',
        };
    }
    static types() {
        return {
            classPeriodType: 'number',
            classroomId: 'number',
            courseType: 'number',
            courserGroupItemEndDate: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate,
            courserGroupItemStartDate: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate,
            dayOfWeek: 'number',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.CreateUniversityCourseGroupRequestCourserGroupItemModels = CreateUniversityCourseGroupRequestCourserGroupItemModels;
class CreateUniversityCourseGroupRequestTeacherInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            participantRole: 'participantRole',
            userId: 'userId',
        };
    }
    static types() {
        return {
            participantRole: 'string',
            userId: 'string',
        };
    }
}
exports.CreateUniversityCourseGroupRequestTeacherInfos = CreateUniversityCourseGroupRequestTeacherInfos;
class CreateUniversityCourseGroupResponseBodyCourseGroupInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
        };
    }
}
exports.CreateUniversityCourseGroupResponseBodyCourseGroupInfo = CreateUniversityCourseGroupResponseBodyCourseGroupInfo;
class EduTeacherListResponseBodyResultTeacherDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            role: 'role',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            role: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.EduTeacherListResponseBodyResultTeacherDetails = EduTeacherListResponseBodyResultTeacherDetails;
class EduTeacherListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            teacherDetails: 'teacherDetails',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            teacherDetails: { 'type': 'array', 'itemType': EduTeacherListResponseBodyResultTeacherDetails },
        };
    }
}
exports.EduTeacherListResponseBodyResult = EduTeacherListResponseBodyResult;
class EndCourseRequestLivePlayInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            liveInputUrl: 'liveInputUrl',
            liveOutputFlvUrl: 'liveOutputFlvUrl',
            liveOutputHlsUrl: 'liveOutputHlsUrl',
            liveType: 'liveType',
            replayUrl: 'replayUrl',
        };
    }
    static types() {
        return {
            liveInputUrl: 'string',
            liveOutputFlvUrl: 'string',
            liveOutputHlsUrl: 'string',
            liveType: 'number',
            replayUrl: 'string',
        };
    }
}
exports.EndCourseRequestLivePlayInfoList = EndCourseRequestLivePlayInfoList;
class EndCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
            success: 'success',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            success: 'boolean',
        };
    }
}
exports.EndCourseResponseBodyUniversityCourseCommonResponse = EndCourseResponseBodyUniversityCourseCommonResponse;
class GetDefaultChildResponseBodyBindStudents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            period: 'period',
            staffId: 'staffId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            period: 'string',
            staffId: 'string',
        };
    }
}
exports.GetDefaultChildResponseBodyBindStudents = GetDefaultChildResponseBodyBindStudents;
class GetOpenCourseDetailResponseBodyPushModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pushOrgNameList: 'pushOrgNameList',
            pushRoleNameList: 'pushRoleNameList',
        };
    }
    static types() {
        return {
            pushOrgNameList: { 'type': 'array', 'itemType': 'string' },
            pushRoleNameList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetOpenCourseDetailResponseBodyPushModel = GetOpenCourseDetailResponseBodyPushModel;
class GetOpenCoursesResponseBodyCourseList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseId: 'courseId',
            coverUrl: 'coverUrl',
            feedType: 'feedType',
            jumpUrl: 'jumpUrl',
            startTime: 'startTime',
            teacherId: 'teacherId',
            teacherName: 'teacherName',
            title: 'title',
        };
    }
    static types() {
        return {
            courseId: 'string',
            coverUrl: 'string',
            feedType: 'number',
            jumpUrl: 'string',
            startTime: 'number',
            teacherId: 'string',
            teacherName: 'string',
            title: 'string',
        };
    }
}
exports.GetOpenCoursesResponseBodyCourseList = GetOpenCoursesResponseBodyCourseList;
class GetRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
}
exports.GetRemoteClassCourseResponseBodyResultAttendParticipants = GetRemoteClassCourseResponseBodyResultAttendParticipants;
class GetRemoteClassCourseResponseBodyResultRecordInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            startTime: 'startTime',
            stopTime: 'stopTime',
            url: 'url',
        };
    }
    static types() {
        return {
            startTime: 'string',
            stopTime: 'string',
            url: 'string',
        };
    }
}
exports.GetRemoteClassCourseResponseBodyResultRecordInfos = GetRemoteClassCourseResponseBodyResultRecordInfos;
class GetRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
}
exports.GetRemoteClassCourseResponseBodyResultTeachingParticipant = GetRemoteClassCourseResponseBodyResultTeachingParticipant;
class GetRemoteClassCourseResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            canEdit: 'canEdit',
            courseCode: 'courseCode',
            courseName: 'courseName',
            endTime: 'endTime',
            liveUrl: 'liveUrl',
            recordInfos: 'recordInfos',
            roomStatus: 'roomStatus',
            startTime: 'startTime',
            status: 'status',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': GetRemoteClassCourseResponseBodyResultAttendParticipants },
            canEdit: 'boolean',
            courseCode: 'string',
            courseName: 'string',
            endTime: 'number',
            liveUrl: 'string',
            recordInfos: { 'type': 'array', 'itemType': GetRemoteClassCourseResponseBodyResultRecordInfos },
            roomStatus: 'number',
            startTime: 'number',
            status: 'number',
            teachingParticipant: GetRemoteClassCourseResponseBodyResultTeachingParticipant,
        };
    }
}
exports.GetRemoteClassCourseResponseBodyResult = GetRemoteClassCourseResponseBodyResult;
class GetShareRoleMembersResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            memberUserIdListInTrunkOrg: 'memberUserIdListInTrunkOrg',
        };
    }
    static types() {
        return {
            corpId: 'string',
            memberUserIdListInTrunkOrg: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetShareRoleMembersResponseBodyResult = GetShareRoleMembersResponseBodyResult;
class GetShareRolesResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            shareRoleCode: 'shareRoleCode',
            shareRoleName: 'shareRoleName',
        };
    }
    static types() {
        return {
            shareRoleCode: 'string',
            shareRoleName: 'string',
        };
    }
}
exports.GetShareRolesResponseBodyResult = GetShareRolesResponseBodyResult;
class InitCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.InitCoursesOfClassRequestCoursesDateModel = InitCoursesOfClassRequestCoursesDateModel;
class InitCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
        };
    }
    static types() {
        return {
            sectionIndex: 'number',
            sectionName: 'string',
        };
    }
}
exports.InitCoursesOfClassRequestCoursesSectionModel = InitCoursesOfClassRequestCoursesSectionModel;
class InitCoursesOfClassRequestCourses extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseName: 'courseName',
            creatorName: 'creatorName',
            dateModel: 'dateModel',
            location: 'location',
            sectionModel: 'sectionModel',
            teacherStaffIds: 'teacherStaffIds',
        };
    }
    static types() {
        return {
            courseName: 'string',
            creatorName: 'string',
            dateModel: InitCoursesOfClassRequestCoursesDateModel,
            location: 'string',
            sectionModel: InitCoursesOfClassRequestCoursesSectionModel,
            teacherStaffIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.InitCoursesOfClassRequestCourses = InitCoursesOfClassRequestCourses;
class InitCoursesOfClassRequestSectionConfigEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.InitCoursesOfClassRequestSectionConfigEnd = InitCoursesOfClassRequestSectionConfigEnd;
class InitCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.InitCoursesOfClassRequestSectionConfigSectionModelsEnd = InitCoursesOfClassRequestSectionConfigSectionModelsEnd;
class InitCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.InitCoursesOfClassRequestSectionConfigSectionModelsStart = InitCoursesOfClassRequestSectionConfigSectionModelsStart;
class InitCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: InitCoursesOfClassRequestSectionConfigSectionModelsEnd,
            sectionIndex: 'number',
            sectionType: 'string',
            start: InitCoursesOfClassRequestSectionConfigSectionModelsStart,
        };
    }
}
exports.InitCoursesOfClassRequestSectionConfigSectionModels = InitCoursesOfClassRequestSectionConfigSectionModels;
class InitCoursesOfClassRequestSectionConfigStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.InitCoursesOfClassRequestSectionConfigStart = InitCoursesOfClassRequestSectionConfigStart;
class InitCoursesOfClassRequestSectionConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            sectionModels: 'sectionModels',
            start: 'start',
        };
    }
    static types() {
        return {
            end: InitCoursesOfClassRequestSectionConfigEnd,
            sectionModels: { 'type': 'array', 'itemType': InitCoursesOfClassRequestSectionConfigSectionModels },
            start: InitCoursesOfClassRequestSectionConfigStart,
        };
    }
}
exports.InitCoursesOfClassRequestSectionConfig = InitCoursesOfClassRequestSectionConfig;
class InsertSectionConfigRequestEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.InsertSectionConfigRequestEnd = InsertSectionConfigRequestEnd;
class InsertSectionConfigRequestSectionModelsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.InsertSectionConfigRequestSectionModelsEnd = InsertSectionConfigRequestSectionModelsEnd;
class InsertSectionConfigRequestSectionModelsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.InsertSectionConfigRequestSectionModelsStart = InsertSectionConfigRequestSectionModelsStart;
class InsertSectionConfigRequestSectionModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: InsertSectionConfigRequestSectionModelsEnd,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
            start: InsertSectionConfigRequestSectionModelsStart,
        };
    }
}
exports.InsertSectionConfigRequestSectionModels = InsertSectionConfigRequestSectionModels;
class InsertSectionConfigRequestStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.InsertSectionConfigRequestStart = InsertSectionConfigRequestStart;
class ListOrderResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualAmount: 'actualAmount',
            buyerId: 'buyerId',
            corpId: 'corpId',
            createTime: 'createTime',
            endTime: 'endTime',
            orderNo: 'orderNo',
            payTime: 'payTime',
            refundNo: 'refundNo',
            scene: 'scene',
            startTime: 'startTime',
            status: 'status',
            tradeNo: 'tradeNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            buyerId: 'string',
            corpId: 'string',
            createTime: 'number',
            endTime: 'number',
            orderNo: 'string',
            payTime: 'number',
            refundNo: 'string',
            scene: 'number',
            startTime: 'number',
            status: 'number',
            tradeNo: 'string',
            userId: 'string',
        };
    }
}
exports.ListOrderResponseBodyList = ListOrderResponseBodyList;
class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            liveInputUrl: 'liveInputUrl',
            liveOutputUrl: 'liveOutputUrl',
            liveType: 'liveType',
            replayUrl: 'replayUrl',
        };
    }
    static types() {
        return {
            liveInputUrl: 'string',
            liveOutputUrl: 'string',
            liveType: 'number',
            replayUrl: 'string',
        };
    }
}
exports.PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList = PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList;
class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            confirmStatus: 'confirmStatus',
            courseCode: 'courseCode',
            livePlayInfoList: 'livePlayInfoList',
        };
    }
    static types() {
        return {
            confirmStatus: 'boolean',
            courseCode: 'string',
            livePlayInfoList: { 'type': 'array', 'itemType': PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList },
        };
    }
}
exports.PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse = PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse;
class QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avator: 'avator',
            name: 'name',
            uid: 'uid',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avator: 'string',
            name: 'string',
            uid: 'number',
            userId: 'string',
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList = QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList;
class QueryAllSubjectsFromClassScheduleResponseBodyResultExt extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundColor: 'backgroundColor',
            classId: 'classId',
            fontColor: 'fontColor',
            teacherList: 'teacherList',
        };
    }
    static types() {
        return {
            backgroundColor: 'string',
            classId: 'number',
            fontColor: 'string',
            teacherList: { 'type': 'array', 'itemType': QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList },
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBodyResultExt = QueryAllSubjectsFromClassScheduleResponseBodyResultExt;
class QueryAllSubjectsFromClassScheduleResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creatorOrgId: 'creatorOrgId',
            ext: 'ext',
            periodCode: 'periodCode',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
        };
    }
    static types() {
        return {
            creatorOrgId: 'number',
            ext: QueryAllSubjectsFromClassScheduleResponseBodyResultExt,
            periodCode: 'string',
            subjectCode: 'string',
            subjectName: 'string',
        };
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBodyResult = QueryAllSubjectsFromClassScheduleResponseBodyResult;
class QueryClassScheduleResponseBodyConfigEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.QueryClassScheduleResponseBodyConfigEnd = QueryClassScheduleResponseBodyConfigEnd;
class QueryClassScheduleResponseBodyConfigSectionModelsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.QueryClassScheduleResponseBodyConfigSectionModelsEnd = QueryClassScheduleResponseBodyConfigSectionModelsEnd;
class QueryClassScheduleResponseBodyConfigSectionModelsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.QueryClassScheduleResponseBodyConfigSectionModelsStart = QueryClassScheduleResponseBodyConfigSectionModelsStart;
class QueryClassScheduleResponseBodyConfigSectionModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: QueryClassScheduleResponseBodyConfigSectionModelsEnd,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
            start: QueryClassScheduleResponseBodyConfigSectionModelsStart,
        };
    }
}
exports.QueryClassScheduleResponseBodyConfigSectionModels = QueryClassScheduleResponseBodyConfigSectionModels;
class QueryClassScheduleResponseBodyConfigStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.QueryClassScheduleResponseBodyConfigStart = QueryClassScheduleResponseBodyConfigStart;
class QueryClassScheduleResponseBodyConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            sectionModels: 'sectionModels',
            start: 'start',
        };
    }
    static types() {
        return {
            end: QueryClassScheduleResponseBodyConfigEnd,
            sectionModels: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyConfigSectionModels },
            start: QueryClassScheduleResponseBodyConfigStart,
        };
    }
}
exports.QueryClassScheduleResponseBodyConfig = QueryClassScheduleResponseBodyConfig;
class QueryClassScheduleResponseBodyCourseDTOSClassrooms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            interactInfo: 'interactInfo',
            targetId: 'targetId',
        };
    }
    static types() {
        return {
            interactInfo: 'string',
            targetId: 'string',
        };
    }
}
exports.QueryClassScheduleResponseBodyCourseDTOSClassrooms = QueryClassScheduleResponseBodyCourseDTOSClassrooms;
class QueryClassScheduleResponseBodyCourseDTOSEduUserModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            uid: 'uid',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            uid: 'number',
            userId: 'string',
        };
    }
}
exports.QueryClassScheduleResponseBodyCourseDTOSEduUserModels = QueryClassScheduleResponseBodyCourseDTOSEduUserModels;
class QueryClassScheduleResponseBodyCourseDTOS extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            classrooms: 'classrooms',
            code: 'code',
            courseGroupCode: 'courseGroupCode',
            coverUrl: 'coverUrl',
            creatorCorpId: 'creatorCorpId',
            creatorUserId: 'creatorUserId',
            creatorUserName: 'creatorUserName',
            eduUserModels: 'eduUserModels',
            endTime: 'endTime',
            extInfo: 'extInfo',
            introduce: 'introduce',
            name: 'name',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            startTime: 'startTime',
            status: 'status',
            subjectCode: 'subjectCode',
            teacherCorpId: 'teacherCorpId',
            teacherUserId: 'teacherUserId',
            teacherUserName: 'teacherUserName',
        };
    }
    static types() {
        return {
            classId: 'number',
            classrooms: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyCourseDTOSClassrooms },
            code: 'string',
            courseGroupCode: 'string',
            coverUrl: 'string',
            creatorCorpId: 'string',
            creatorUserId: 'string',
            creatorUserName: 'string',
            eduUserModels: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyCourseDTOSEduUserModels },
            endTime: 'number',
            extInfo: 'string',
            introduce: 'string',
            name: 'string',
            sectionIndex: 'number',
            sectionName: 'string',
            startTime: 'number',
            status: 'number',
            subjectCode: 'string',
            teacherCorpId: 'string',
            teacherUserId: 'string',
            teacherUserName: 'string',
        };
    }
}
exports.QueryClassScheduleResponseBodyCourseDTOS = QueryClassScheduleResponseBodyCourseDTOS;
class QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            interactInfo: 'interactInfo',
            targetId: 'targetId',
        };
    }
    static types() {
        return {
            interactInfo: 'string',
            targetId: 'string',
        };
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms = QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms;
class QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            uid: 'uid',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            uid: 'number',
            userId: 'string',
        };
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels = QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels;
class QueryClassScheduleByTimeSchoolResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizKey: 'bizKey',
            classId: 'classId',
            classrooms: 'classrooms',
            code: 'code',
            courseGroupCode: 'courseGroupCode',
            coverUrl: 'coverUrl',
            creatorCorpId: 'creatorCorpId',
            creatorUserId: 'creatorUserId',
            creatorUserName: 'creatorUserName',
            eduUserModels: 'eduUserModels',
            endTime: 'endTime',
            extInfo: 'extInfo',
            introduce: 'introduce',
            name: 'name',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            startTime: 'startTime',
            status: 'status',
            subjectCode: 'subjectCode',
            teacherCorpId: 'teacherCorpId',
            teacherUserId: 'teacherUserId',
            teacherUserName: 'teacherUserName',
        };
    }
    static types() {
        return {
            bizKey: 'string',
            classId: 'number',
            classrooms: { 'type': 'array', 'itemType': QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms },
            code: 'string',
            courseGroupCode: 'string',
            coverUrl: 'string',
            creatorCorpId: 'string',
            creatorUserId: 'string',
            creatorUserName: 'string',
            eduUserModels: { 'type': 'array', 'itemType': QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels },
            endTime: 'number',
            extInfo: 'string',
            introduce: 'string',
            name: 'string',
            sectionIndex: 'number',
            sectionName: 'string',
            startTime: 'number',
            status: 'number',
            subjectCode: 'string',
            teacherCorpId: 'string',
            teacherUserId: 'string',
            teacherUserName: 'string',
        };
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBodyResult = QueryClassScheduleByTimeSchoolResponseBodyResult;
class QueryClassScheduleConfigResponseBodyResultEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.QueryClassScheduleConfigResponseBodyResultEnd = QueryClassScheduleConfigResponseBodyResultEnd;
class QueryClassScheduleConfigResponseBodyResultSectionModelsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.QueryClassScheduleConfigResponseBodyResultSectionModelsEnd = QueryClassScheduleConfigResponseBodyResultSectionModelsEnd;
class QueryClassScheduleConfigResponseBodyResultSectionModelsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.QueryClassScheduleConfigResponseBodyResultSectionModelsStart = QueryClassScheduleConfigResponseBodyResultSectionModelsStart;
class QueryClassScheduleConfigResponseBodyResultSectionModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: QueryClassScheduleConfigResponseBodyResultSectionModelsEnd,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
            start: QueryClassScheduleConfigResponseBodyResultSectionModelsStart,
        };
    }
}
exports.QueryClassScheduleConfigResponseBodyResultSectionModels = QueryClassScheduleConfigResponseBodyResultSectionModels;
class QueryClassScheduleConfigResponseBodyResultStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.QueryClassScheduleConfigResponseBodyResultStart = QueryClassScheduleConfigResponseBodyResultStart;
class QueryClassScheduleConfigResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            end: 'end',
            sectionModels: 'sectionModels',
            start: 'start',
        };
    }
    static types() {
        return {
            classId: 'number',
            end: QueryClassScheduleConfigResponseBodyResultEnd,
            sectionModels: { 'type': 'array', 'itemType': QueryClassScheduleConfigResponseBodyResultSectionModels },
            start: QueryClassScheduleConfigResponseBodyResultStart,
        };
    }
}
exports.QueryClassScheduleConfigResponseBodyResult = QueryClassScheduleConfigResponseBodyResult;
class QueryDeviceListByCorpIdResponseBodyResultList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appStatus: 'appStatus',
            deviceCode: 'deviceCode',
            deviceName: 'deviceName',
        };
    }
    static types() {
        return {
            appStatus: 'number',
            deviceCode: 'string',
            deviceName: 'string',
        };
    }
}
exports.QueryDeviceListByCorpIdResponseBodyResultList = QueryDeviceListByCorpIdResponseBodyResultList;
class QueryDeviceListByCorpIdResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryDeviceListByCorpIdResponseBodyResultList },
        };
    }
}
exports.QueryDeviceListByCorpIdResponseBodyResult = QueryDeviceListByCorpIdResponseBodyResult;
class QueryEduAssetSpacesResponseBodySpaces extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeMillis: 'createTimeMillis',
            modifyTimeMillis: 'modifyTimeMillis',
            permissionMode: 'permissionMode',
            quota: 'quota',
            spaceId: 'spaceId',
            spaceName: 'spaceName',
            spaceType: 'spaceType',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            createTimeMillis: 'number',
            modifyTimeMillis: 'number',
            permissionMode: 'string',
            quota: 'number',
            spaceId: 'string',
            spaceName: 'string',
            spaceType: 'string',
            usedQuota: 'number',
        };
    }
}
exports.QueryEduAssetSpacesResponseBodySpaces = QueryEduAssetSpacesResponseBodySpaces;
class QueryOrgRelationListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            deviceCount: 'deviceCount',
            name: 'name',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deviceCount: 'number',
            name: 'string',
        };
    }
}
exports.QueryOrgRelationListResponseBodyResult = QueryOrgRelationListResponseBodyResult;
class QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            secretKey: 'secretKey',
        };
    }
    static types() {
        return {
            secretKey: 'string',
        };
    }
}
exports.QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo = QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo;
class QueryPhysicalClassroomResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classroomBuilding: 'classroomBuilding',
            classroomCampus: 'classroomCampus',
            classroomFloor: 'classroomFloor',
            classroomId: 'classroomId',
            classroomName: 'classroomName',
            classroomNumber: 'classroomNumber',
            directBroadcast: 'directBroadcast',
        };
    }
    static types() {
        return {
            classroomBuilding: 'string',
            classroomCampus: 'string',
            classroomFloor: 'string',
            classroomId: 'number',
            classroomName: 'string',
            classroomNumber: 'string',
            directBroadcast: 'string',
        };
    }
}
exports.QueryPhysicalClassroomResponseBodyResult = QueryPhysicalClassroomResponseBodyResult;
class QueryRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
}
exports.QueryRemoteClassCourseResponseBodyResultAttendParticipants = QueryRemoteClassCourseResponseBodyResultAttendParticipants;
class QueryRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
}
exports.QueryRemoteClassCourseResponseBodyResultTeachingParticipant = QueryRemoteClassCourseResponseBodyResultTeachingParticipant;
class QueryRemoteClassCourseResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            canEdit: 'canEdit',
            courseCode: 'courseCode',
            courseName: 'courseName',
            courseWays: 'courseWays',
            endTime: 'endTime',
            startTime: 'startTime',
            status: 'status',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': QueryRemoteClassCourseResponseBodyResultAttendParticipants },
            canEdit: 'boolean',
            courseCode: 'string',
            courseName: 'string',
            courseWays: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            startTime: 'number',
            status: 'number',
            teachingParticipant: QueryRemoteClassCourseResponseBodyResultTeachingParticipant,
        };
    }
}
exports.QueryRemoteClassCourseResponseBodyResult = QueryRemoteClassCourseResponseBodyResult;
class QuerySchoolUserFaceResponseBodyUserFaceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faceId: 'faceId',
            name: 'name',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            name: 'string',
            status: 'number',
            userId: 'string',
        };
    }
}
exports.QuerySchoolUserFaceResponseBodyUserFaceList = QuerySchoolUserFaceResponseBodyUserFaceList;
class QueryStatisticsDataResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            courseCount: 'courseCount',
            courseHours: 'courseHours',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            classId: 'number',
            courseCount: 'number',
            courseHours: 'number',
            subjectCode: 'string',
            subjectName: 'number',
            userId: 'string',
            userName: 'string',
        };
    }
}
exports.QueryStatisticsDataResponseBodyResult = QueryStatisticsDataResponseBodyResult;
class QuerySubjectTeachersResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            periodCode: 'periodCode',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            periodCode: 'string',
            subjectCode: 'string',
            subjectName: 'string',
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
}
exports.QuerySubjectTeachersResponseBodyResult = QuerySubjectTeachersResponseBodyResult;
class QueryTeachSubjectsResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            periodCode: 'periodCode',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            periodCode: 'string',
            subjectCode: 'string',
            subjectName: 'string',
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
}
exports.QueryTeachSubjectsResponseBodyResult = QueryTeachSubjectsResponseBodyResult;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classPeriodType: 'classPeriodType',
            classroomId: 'classroomId',
            courseType: 'courseType',
            courserGroupItemEndDate: 'courserGroupItemEndDate',
            courserGroupItemStartDate: 'courserGroupItemStartDate',
            dayOfWeek: 'dayOfWeek',
            sectionIndex: 'sectionIndex',
        };
    }
    static types() {
        return {
            classPeriodType: 'number',
            classroomId: 'number',
            courseType: 'number',
            courserGroupItemEndDate: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate,
            courserGroupItemStartDate: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate,
            dayOfWeek: 'number',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            courseGroupIntroduce: 'courseGroupIntroduce',
            courseGroupName: 'courseGroupName',
            courserGroupItemModels: 'courserGroupItemModels',
            isvCourseGroupCode: 'isvCourseGroupCode',
            periodCode: 'periodCode',
            schoolYear: 'schoolYear',
            semester: 'semester',
            subjectName: 'subjectName',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            courseGroupIntroduce: 'string',
            courseGroupName: 'string',
            courserGroupItemModels: { 'type': 'array', 'itemType': QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels },
            isvCourseGroupCode: 'string',
            periodCode: 'string',
            schoolYear: 'string',
            semester: 'number',
            subjectName: 'string',
        };
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo;
class SearchTeachersResponseBodyUsers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classId: 'classId',
            deptName: 'deptName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            classId: 'number',
            deptName: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.SearchTeachersResponseBodyUsers = SearchTeachersResponseBodyUsers;
class StartCourseRequestLivePlayInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            liveInputUrl: 'liveInputUrl',
            liveOutputFlvUrl: 'liveOutputFlvUrl',
            liveOutputHlsUrl: 'liveOutputHlsUrl',
            liveType: 'liveType',
            replayUrl: 'replayUrl',
        };
    }
    static types() {
        return {
            liveInputUrl: 'string',
            liveOutputFlvUrl: 'string',
            liveOutputHlsUrl: 'string',
            liveType: 'number',
            replayUrl: 'string',
        };
    }
}
exports.StartCourseRequestLivePlayInfoList = StartCourseRequestLivePlayInfoList;
class StartCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
            success: 'success',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            success: 'boolean',
        };
    }
}
exports.StartCourseResponseBodyUniversityCourseCommonResponse = StartCourseResponseBodyUniversityCourseCommonResponse;
class StartCoursePrepareResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
            success: 'success',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            success: 'boolean',
        };
    }
}
exports.StartCoursePrepareResponseBodyUniversityCourseCommonResponse = StartCoursePrepareResponseBodyUniversityCourseCommonResponse;
class UpdateCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.UpdateCoursesOfClassRequestCoursesDateModel = UpdateCoursesOfClassRequestCoursesDateModel;
class UpdateCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
        };
    }
    static types() {
        return {
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
        };
    }
}
exports.UpdateCoursesOfClassRequestCoursesSectionModel = UpdateCoursesOfClassRequestCoursesSectionModel;
class UpdateCoursesOfClassRequestCourses extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            courseCode: 'courseCode',
            courseGroupCode: 'courseGroupCode',
            courseName: 'courseName',
            creatorName: 'creatorName',
            dateModel: 'dateModel',
            deleteTag: 'deleteTag',
            location: 'location',
            sectionModel: 'sectionModel',
            teacherStaffIds: 'teacherStaffIds',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            courseGroupCode: 'string',
            courseName: 'string',
            creatorName: 'string',
            dateModel: UpdateCoursesOfClassRequestCoursesDateModel,
            deleteTag: 'boolean',
            location: 'string',
            sectionModel: UpdateCoursesOfClassRequestCoursesSectionModel,
            teacherStaffIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdateCoursesOfClassRequestCourses = UpdateCoursesOfClassRequestCourses;
class UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd = UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd;
class UpdateCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
}
exports.UpdateCoursesOfClassRequestSectionConfigSectionModelsStart = UpdateCoursesOfClassRequestSectionConfigSectionModelsStart;
class UpdateCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd,
            sectionIndex: 'number',
            sectionType: 'string',
            start: UpdateCoursesOfClassRequestSectionConfigSectionModelsStart,
        };
    }
}
exports.UpdateCoursesOfClassRequestSectionConfigSectionModels = UpdateCoursesOfClassRequestSectionConfigSectionModels;
class UpdateCoursesOfClassRequestSectionConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sectionModels: 'sectionModels',
        };
    }
    static types() {
        return {
            sectionModels: { 'type': 'array', 'itemType': UpdateCoursesOfClassRequestSectionConfigSectionModels },
        };
    }
}
exports.UpdateCoursesOfClassRequestSectionConfig = UpdateCoursesOfClassRequestSectionConfig;
class UpdateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
}
exports.UpdateRemoteClassCourseRequestAttendParticipants = UpdateRemoteClassCourseRequestAttendParticipants;
class UpdateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
}
exports.UpdateRemoteClassCourseRequestTeachingParticipant = UpdateRemoteClassCourseRequestTeachingParticipant;
class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate = UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
}
exports.UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate = UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
class UpdateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classPeriodType: 'classPeriodType',
            classroomId: 'classroomId',
            courseType: 'courseType',
            courserGroupItemEndDate: 'courserGroupItemEndDate',
            courserGroupItemStartDate: 'courserGroupItemStartDate',
            dayOfWeek: 'dayOfWeek',
            sectionIndex: 'sectionIndex',
        };
    }
    static types() {
        return {
            classPeriodType: 'number',
            classroomId: 'number',
            courseType: 'number',
            courserGroupItemEndDate: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate,
            courserGroupItemStartDate: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate,
            dayOfWeek: 'number',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.UpdateUniversityCourseGroupRequestCourserGroupItemModels = UpdateUniversityCourseGroupRequestCourserGroupItemModels;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddDeviceHeaders({});
        return await this.addDeviceWithOptions(request, headers, runtime);
    }
    async addDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.model)) {
            body["model"] = request.model;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("AddDevice", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/devices`, "json", req, runtime), new AddDeviceResponse({}));
    }
    async addSchoolConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddSchoolConfigHeaders({});
        return await this.addSchoolConfigWithOptions(request, headers, runtime);
    }
    async addSchoolConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.operatorName)) {
            body["operatorName"] = request.operatorName;
        }
        if (!tea_util_1.default.isUnset(request.temperatureUpLimit)) {
            body["temperatureUpLimit"] = request.temperatureUpLimit;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("AddSchoolConfig", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/schools/configurations`, "json", req, runtime), new AddSchoolConfigResponse({}));
    }
    async batchCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateHeaders({});
        return await this.batchCreateWithOptions(request, headers, runtime);
    }
    async batchCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardBizCode)) {
            body["cardBizCode"] = request.cardBizCode;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.data))) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            body["identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.jsVersion)) {
            body["jsVersion"] = request.jsVersion;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            body["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("BatchCreate", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/cards`, "json", req, runtime), new BatchCreateResponse({}));
    }
    async batchOrgCreateHW(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchOrgCreateHWHeaders({});
        return await this.batchOrgCreateHWWithOptions(request, headers, runtime);
    }
    async batchOrgCreateHWWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.hwContent)) {
            body["hwContent"] = request.hwContent;
        }
        if (!tea_util_1.default.isUnset(request.hwDeadline)) {
            body["hwDeadline"] = request.hwDeadline;
        }
        if (!tea_util_1.default.isUnset(request.hwDeadlineOpen)) {
            body["hwDeadlineOpen"] = request.hwDeadlineOpen;
        }
        if (!tea_util_1.default.isUnset(request.hwMedia)) {
            body["hwMedia"] = request.hwMedia;
        }
        if (!tea_util_1.default.isUnset(request.hwPhoto)) {
            body["hwPhoto"] = request.hwPhoto;
        }
        if (!tea_util_1.default.isUnset(request.hwTitle)) {
            body["hwTitle"] = request.hwTitle;
        }
        if (!tea_util_1.default.isUnset(request.hwType)) {
            body["hwType"] = request.hwType;
        }
        if (!tea_util_1.default.isUnset(request.hwVideo)) {
            body["hwVideo"] = request.hwVideo;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            body["identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.openSelectItemList)) {
            body["openSelectItemList"] = request.openSelectItemList;
        }
        if (!tea_util_1.default.isUnset(request.scheduledRelease)) {
            body["scheduledRelease"] = request.scheduledRelease;
        }
        if (!tea_util_1.default.isUnset(request.scheduledTime)) {
            body["scheduledTime"] = request.scheduledTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.targetRole)) {
            body["targetRole"] = request.targetRole;
        }
        if (!tea_util_1.default.isUnset(request.teacherName)) {
            body["teacherName"] = request.teacherName;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("BatchOrgCreateHW", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/homeworks`, "json", req, runtime), new BatchOrgCreateHWResponse({}));
    }
    async cancelOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CancelOrderHeaders({});
        return await this.cancelOrderWithOptions(request, headers, runtime);
    }
    async cancelOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CancelOrder", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/orders/cancel`, "json", req, runtime), new CancelOrderResponse({}));
    }
    async checkRestriction(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckRestrictionHeaders({});
        return await this.checkRestrictionWithOptions(request, headers, runtime);
    }
    async checkRestrictionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CheckRestriction", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/restrictions/check`, "json", req, runtime), new CheckRestrictionResponse({}));
    }
    async courseSchedulingComplimentNotice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CourseSchedulingComplimentNoticeHeaders({});
        return await this.courseSchedulingComplimentNoticeWithOptions(request, headers, runtime);
    }
    async courseSchedulingComplimentNoticeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CourseSchedulingComplimentNotice", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/schedules/finishNotify`, "json", req, runtime), new CourseSchedulingComplimentNoticeResponse({}));
    }
    async createCustomClass(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCustomClassHeaders({});
        return await this.createCustomClassWithOptions(request, headers, runtime);
    }
    async createCustomClassWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset($tea.toMap(request.customClass))) {
            body["customClass"] = request.customClass;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            body["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateCustomClass", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/customClasses`, "json", req, runtime), new CreateCustomClassResponse({}));
    }
    async createCustomDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCustomDeptHeaders({});
        return await this.createCustomDeptWithOptions(request, headers, runtime);
    }
    async createCustomDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset($tea.toMap(request.customDept))) {
            body["customDept"] = request.customDept;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            body["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateCustomDept", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/customDepts`, "json", req, runtime), new CreateCustomDeptResponse({}));
    }
    async createEduAssetSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateEduAssetSpaceHeaders({});
        return await this.createEduAssetSpaceWithOptions(request, headers, runtime);
    }
    async createEduAssetSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.spaceDesc)) {
            body["spaceDesc"] = request.spaceDesc;
        }
        if (!tea_util_1.default.isUnset(request.spaceIcon)) {
            body["spaceIcon"] = request.spaceIcon;
        }
        if (!tea_util_1.default.isUnset(request.spaceName)) {
            body["spaceName"] = request.spaceName;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateEduAssetSpace", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/assets/spaces`, "json", req, runtime), new CreateEduAssetSpaceResponse({}));
    }
    async createFulfilRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateFulfilRecordHeaders({});
        return await this.createFulfilRecordWithOptions(request, headers, runtime);
    }
    async createFulfilRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizTime)) {
            body["bizTime"] = request.bizTime;
        }
        if (!tea_util_1.default.isUnset(request.extInfo)) {
            body["extInfo"] = request.extInfo;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateFulfilRecord", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/fulfilRecords`, "json", req, runtime), new CreateFulfilRecordResponse({}));
    }
    async createInviteUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateInviteUrlHeaders({});
        return await this.createInviteUrlWithOptions(request, headers, runtime);
    }
    async createInviteUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            body["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.targetOperator)) {
            body["targetOperator"] = request.targetOperator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateInviteUrl", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/remoteClasses/orgRelations/inviteUrls`, "json", req, runtime), new CreateInviteUrlResponse({}));
    }
    async createItem(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateItemHeaders({});
        return await this.createItemWithOptions(request, headers, runtime);
    }
    async createItemWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.effectType)) {
            body["effectType"] = request.effectType;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.optUser)) {
            body["optUser"] = request.optUser;
        }
        if (!tea_util_1.default.isUnset(request.periodType)) {
            body["periodType"] = request.periodType;
        }
        if (!tea_util_1.default.isUnset(request.price)) {
            body["price"] = request.price;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateItem", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/items`, "json", req, runtime), new CreateItemResponse({}));
    }
    async createOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOrderHeaders({});
        return await this.createOrderWithOptions(request, headers, runtime);
    }
    async createOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.createTime)) {
            body["createTime"] = request.createTime;
        }
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.ftoken)) {
            body["ftoken"] = request.ftoken;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.terminalParams)) {
            body["terminalParams"] = request.terminalParams;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.totalAmount)) {
            body["totalAmount"] = request.totalAmount;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateOrder", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/orders`, "json", req, runtime), new CreateOrderResponse({}));
    }
    async createOrderFlow(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOrderFlowHeaders({});
        return await this.createOrderFlowWithOptions(request, headers, runtime);
    }
    async createOrderFlowWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.alipayUid)) {
            body["alipayUid"] = request.alipayUid;
        }
        if (!tea_util_1.default.isUnset(request.createTime)) {
            body["createTime"] = request.createTime;
        }
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.guardianUserId)) {
            body["guardianUserId"] = request.guardianUserId;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.totalAmount)) {
            body["totalAmount"] = request.totalAmount;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateOrderFlow", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/orders/flows`, "json", req, runtime), new CreateOrderFlowResponse({}));
    }
    async createPhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreatePhysicalClassroomHeaders({});
        return await this.createPhysicalClassroomWithOptions(request, headers, runtime);
    }
    async createPhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.classroomBuilding)) {
            body["classroomBuilding"] = request.classroomBuilding;
        }
        if (!tea_util_1.default.isUnset(request.classroomCampus)) {
            body["classroomCampus"] = request.classroomCampus;
        }
        if (!tea_util_1.default.isUnset(request.classroomFloor)) {
            body["classroomFloor"] = request.classroomFloor;
        }
        if (!tea_util_1.default.isUnset(request.classroomName)) {
            body["classroomName"] = request.classroomName;
        }
        if (!tea_util_1.default.isUnset(request.classroomNumber)) {
            body["classroomNumber"] = request.classroomNumber;
        }
        if (!tea_util_1.default.isUnset(request.directBroadcast)) {
            body["directBroadcast"] = request.directBroadcast;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreatePhysicalClassroom", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/physicalClassrooms`, "json", req, runtime), new CreatePhysicalClassroomResponse({}));
    }
    async createRefundFlow(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateRefundFlowHeaders({});
        return await this.createRefundFlowWithOptions(request, headers, runtime);
    }
    async createRefundFlowWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.operatorName)) {
            body["operatorName"] = request.operatorName;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateRefundFlow", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/refunds/flows`, "json", req, runtime), new CreateRefundFlowResponse({}));
    }
    async createRemoteClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateRemoteClassCourseHeaders({});
        return await this.createRemoteClassCourseWithOptions(request, headers, runtime);
    }
    async createRemoteClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendParticipants)) {
            body["attendParticipants"] = request.attendParticipants;
        }
        if (!tea_util_1.default.isUnset(request.authCode)) {
            body["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.teachingParticipant))) {
            body["teachingParticipant"] = request.teachingParticipant;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateRemoteClassCourse", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/remoteClasses/courses`, "json", req, runtime), new CreateRemoteClassCourseResponse({}));
    }
    async createSectionConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSectionConfigHeaders({});
        return await this.createSectionConfigWithOptions(request, headers, runtime);
    }
    async createSectionConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.sectionConfigs)) {
            body["sectionConfigs"] = request.sectionConfigs;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateSectionConfig", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/sectionConfigs`, "json", req, runtime), new CreateSectionConfigResponse({}));
    }
    async createToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTokenHeaders({});
        return await this.createTokenWithOptions(request, headers, runtime);
    }
    async createTokenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateToken", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/tokens`, "json", req, runtime), new CreateTokenResponse({}));
    }
    async createUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateUniversityCourseGroupHeaders({});
        return await this.createUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    async createUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupIntroduce)) {
            body["courseGroupIntroduce"] = request.courseGroupIntroduce;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupName)) {
            body["courseGroupName"] = request.courseGroupName;
        }
        if (!tea_util_1.default.isUnset(request.courserGroupItemModels)) {
            body["courserGroupItemModels"] = request.courserGroupItemModels;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseGroupCode)) {
            body["isvCourseGroupCode"] = request.isvCourseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.periodCode)) {
            body["periodCode"] = request.periodCode;
        }
        if (!tea_util_1.default.isUnset(request.schoolYear)) {
            body["schoolYear"] = request.schoolYear;
        }
        if (!tea_util_1.default.isUnset(request.semester)) {
            body["semester"] = request.semester;
        }
        if (!tea_util_1.default.isUnset(request.subjectName)) {
            body["subjectName"] = request.subjectName;
        }
        if (!tea_util_1.default.isUnset(request.teacherInfos)) {
            body["teacherInfos"] = request.teacherInfos;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateUniversityCourseGroup", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/courseGroups`, "json", req, runtime), new CreateUniversityCourseGroupResponse({}));
    }
    async createUniversityStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateUniversityStudentHeaders({});
        return await this.createUniversityStudentWithOptions(request, headers, runtime);
    }
    async createUniversityStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.gender)) {
            body["gender"] = request.gender;
        }
        if (!tea_util_1.default.isUnset(request.identityNumber)) {
            body["identityNumber"] = request.identityNumber;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.studentNumber)) {
            body["studentNumber"] = request.studentNumber;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateUniversityStudent", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/students`, "json", req, runtime), new CreateUniversityStudentResponse({}));
    }
    async createUniversityTeacher(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateUniversityTeacherHeaders({});
        return await this.createUniversityTeacherWithOptions(request, headers, runtime);
    }
    async createUniversityTeacherWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.role)) {
            body["role"] = request.role;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateUniversityTeacher", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/teachers`, "json", req, runtime), new CreateUniversityTeacherResponse({}));
    }
    async deleteDept(deptId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDeptHeaders({});
        return await this.deleteDeptWithOptions(deptId, request, headers, runtime);
    }
    async deleteDeptWithOptions(deptId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        deptId = openapi_util_1.default.getEncodeParam(deptId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteDept", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/depts/${deptId}`, "json", req, runtime), new DeleteDeptResponse({}));
    }
    async deleteDeviceOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDeviceOrgHeaders({});
        return await this.deleteDeviceOrgWithOptions(request, headers, runtime);
    }
    async deleteDeviceOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            query["deviceCode"] = request.deviceCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteDeviceOrg", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/remoteClasses/deviceOrgs`, "json", req, runtime), new DeleteDeviceOrgResponse({}));
    }
    async deleteGuardian(classId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteGuardianHeaders({});
        return await this.deleteGuardianWithOptions(classId, userId, request, headers, runtime);
    }
    async deleteGuardianWithOptions(classId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        classId = openapi_util_1.default.getEncodeParam(classId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.stuId)) {
            query["stuId"] = request.stuId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteGuardian", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/classes/${classId}/guardians/${userId}`, "json", req, runtime), new DeleteGuardianResponse({}));
    }
    async deleteOrgRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteOrgRelationHeaders({});
        return await this.deleteOrgRelationWithOptions(request, headers, runtime);
    }
    async deleteOrgRelationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteOrgRelation", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/remoteClasses/orgRelations`, "json", req, runtime), new DeleteOrgRelationResponse({}));
    }
    async deletePhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeletePhysicalClassroomHeaders({});
        return await this.deletePhysicalClassroomWithOptions(request, headers, runtime);
    }
    async deletePhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classroomId)) {
            query["classroomId"] = request.classroomId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeletePhysicalClassroom", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/physicalClassrooms`, "json", req, runtime), new DeletePhysicalClassroomResponse({}));
    }
    async deleteRemoteClassCourse(courseCode, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteRemoteClassCourseHeaders({});
        return await this.deleteRemoteClassCourseWithOptions(courseCode, request, headers, runtime);
    }
    async deleteRemoteClassCourseWithOptions(courseCode, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        courseCode = openapi_util_1.default.getEncodeParam(courseCode);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteRemoteClassCourse", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/remoteClasses/courses/${courseCode}`, "json", req, runtime), new DeleteRemoteClassCourseResponse({}));
    }
    async deleteStudent(classId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteStudentHeaders({});
        return await this.deleteStudentWithOptions(classId, userId, request, headers, runtime);
    }
    async deleteStudentWithOptions(classId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        classId = openapi_util_1.default.getEncodeParam(classId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteStudent", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/classes/${classId}/students/${userId}`, "json", req, runtime), new DeleteStudentResponse({}));
    }
    async deleteTeacher(classId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteTeacherHeaders({});
        return await this.deleteTeacherWithOptions(classId, userId, request, headers, runtime);
    }
    async deleteTeacherWithOptions(classId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        classId = openapi_util_1.default.getEncodeParam(classId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.adviser)) {
            query["adviser"] = request.adviser;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteTeacher", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/classes/${classId}/teachers/${userId}`, "json", req, runtime), new DeleteTeacherResponse({}));
    }
    async deleteUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteUniversityCourseGroupHeaders({});
        return await this.deleteUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    async deleteUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            query["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteUniversityCourseGroup", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/universities/courseGroups`, "json", req, runtime), new DeleteUniversityCourseGroupResponse({}));
    }
    async deleteUniversityStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteUniversityStudentHeaders({});
        return await this.deleteUniversityStudentWithOptions(request, headers, runtime);
    }
    async deleteUniversityStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            query["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.studentUserId)) {
            query["studentUserId"] = request.studentUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteUniversityStudent", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/universities/students`, "json", req, runtime), new DeleteUniversityStudentResponse({}));
    }
    async deleteUniversityTeacher(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteUniversityTeacherHeaders({});
        return await this.deleteUniversityTeacherWithOptions(request, headers, runtime);
    }
    async deleteUniversityTeacherWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            query["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.role)) {
            query["role"] = request.role;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            query["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteUniversityTeacher", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/universities/teachers`, "json", req, runtime), new DeleteUniversityTeacherResponse({}));
    }
    async deviceHeartbeat(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeviceHeartbeatHeaders({});
        return await this.deviceHeartbeatWithOptions(request, headers, runtime);
    }
    async deviceHeartbeatWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeviceHeartbeat", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/heartbeats/report`, "json", req, runtime), new DeviceHeartbeatResponse({}));
    }
    async eduTeacherList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EduTeacherListHeaders({});
        return await this.eduTeacherListWithOptions(request, headers, runtime);
    }
    async eduTeacherListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("EduTeacherList", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/teachers`, "json", req, runtime), new EduTeacherListResponse({}));
    }
    async endCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EndCourseHeaders({});
        return await this.endCourseWithOptions(request, headers, runtime);
    }
    async endCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.livePlayInfoList)) {
            body["livePlayInfoList"] = request.livePlayInfoList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("EndCourse", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/courses/end`, "json", req, runtime), new EndCourseResponse({}));
    }
    async getBindChildInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetBindChildInfoHeaders({});
        return await this.getBindChildInfoWithOptions(request, headers, runtime);
    }
    async getBindChildInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.schoolCorpId)) {
            query["schoolCorpId"] = request.schoolCorpId;
        }
        if (!tea_util_1.default.isUnset(request.studentUserId)) {
            query["studentUserId"] = request.studentUserId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetBindChildInfo", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/families/childs/infos`, "json", req, runtime), new GetBindChildInfoResponse({}));
    }
    async getDefaultChild() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDefaultChildHeaders({});
        return await this.getDefaultChildWithOptions(headers, runtime);
    }
    async getDefaultChildWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetDefaultChild", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/defaultChildren`, "json", req, runtime), new GetDefaultChildResponse({}));
    }
    async getOpenCourseDetail(courseId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOpenCourseDetailHeaders({});
        return await this.getOpenCourseDetailWithOptions(courseId, headers, runtime);
    }
    async getOpenCourseDetailWithOptions(courseId, headers, runtime) {
        courseId = openapi_util_1.default.getEncodeParam(courseId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetOpenCourseDetail", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/openCourse/${courseId}`, "json", req, runtime), new GetOpenCourseDetailResponse({}));
    }
    async getOpenCourses(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOpenCoursesHeaders({});
        return await this.getOpenCoursesWithOptions(request, headers, runtime);
    }
    async getOpenCoursesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetOpenCourses", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/openCourses`, "json", req, runtime), new GetOpenCoursesResponse({}));
    }
    async getRemoteClassCourse(courseCode, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRemoteClassCourseHeaders({});
        return await this.getRemoteClassCourseWithOptions(courseCode, request, headers, runtime);
    }
    async getRemoteClassCourseWithOptions(courseCode, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        courseCode = openapi_util_1.default.getEncodeParam(courseCode);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetRemoteClassCourse", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/remoteClasses/courses/${courseCode}`, "json", req, runtime), new GetRemoteClassCourseResponse({}));
    }
    async getShareRoleMembers(shareRoleCode) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetShareRoleMembersHeaders({});
        return await this.getShareRoleMembersWithOptions(shareRoleCode, headers, runtime);
    }
    async getShareRoleMembersWithOptions(shareRoleCode, headers, runtime) {
        shareRoleCode = openapi_util_1.default.getEncodeParam(shareRoleCode);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetShareRoleMembers", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/shareRoles/${shareRoleCode}/members`, "json", req, runtime), new GetShareRoleMembersResponse({}));
    }
    async getShareRoles() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetShareRolesHeaders({});
        return await this.getShareRolesWithOptions(headers, runtime);
    }
    async getShareRolesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetShareRoles", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/shareRoles`, "json", req, runtime), new GetShareRolesResponse({}));
    }
    async initCoursesOfClass(classId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InitCoursesOfClassHeaders({});
        return await this.initCoursesOfClassWithOptions(classId, request, headers, runtime);
    }
    async initCoursesOfClassWithOptions(classId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        classId = openapi_util_1.default.getEncodeParam(classId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courses)) {
            body["courses"] = request.courses;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.sectionConfig))) {
            body["sectionConfig"] = request.sectionConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("InitCoursesOfClass", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/classes/${classId}/courses/init`, "json", req, runtime), new InitCoursesOfClassResponse({}));
    }
    async initDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InitDeviceHeaders({});
        return await this.initDeviceWithOptions(request, headers, runtime);
    }
    async initDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.encryptPubKey)) {
            body["encryptPubKey"] = request.encryptPubKey;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("InitDevice", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/devices/init`, "json", req, runtime), new InitDeviceResponse({}));
    }
    async insertSectionConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertSectionConfigHeaders({});
        return await this.insertSectionConfigWithOptions(request, headers, runtime);
    }
    async insertSectionConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset($tea.toMap(request.end))) {
            body["end"] = request.end;
        }
        if (!tea_util_1.default.isUnset(request.scheduleName)) {
            body["scheduleName"] = request.scheduleName;
        }
        if (!tea_util_1.default.isUnset(request.sectionModels)) {
            body["sectionModels"] = request.sectionModels;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.start))) {
            body["start"] = request.start;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("InsertSectionConfig", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/schedules/configs`, "json", req, runtime), new InsertSectionConfigResponse({}));
    }
    async listOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListOrderHeaders({});
        return await this.listOrderWithOptions(request, headers, runtime);
    }
    async listOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.createTimeEnd)) {
            body["createTimeEnd"] = request.createTimeEnd;
        }
        if (!tea_util_1.default.isUnset(request.createTimeStart)) {
            body["createTimeStart"] = request.createTimeStart;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.tradeNo)) {
            body["tradeNo"] = request.tradeNo;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("ListOrder", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/orders/query`, "json", req, runtime), new ListOrderResponse({}));
    }
    async moveStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MoveStudentHeaders({});
        return await this.moveStudentWithOptions(request, headers, runtime);
    }
    async moveStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.originClassId)) {
            body["originClassId"] = request.originClassId;
        }
        if (!tea_util_1.default.isUnset(request.targetClassId)) {
            body["targetClassId"] = request.targetClassId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("MoveStudent", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/students/move`, "json", req, runtime), new MoveStudentResponse({}));
    }
    async payOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PayOrderHeaders({});
        return await this.payOrderWithOptions(request, headers, runtime);
    }
    async payOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("PayOrder", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/orders/pay`, "json", req, runtime), new PayOrderResponse({}));
    }
    async pollingConfirmStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PollingConfirmStatusHeaders({});
        return await this.pollingConfirmStatusWithOptions(request, headers, runtime);
    }
    async pollingConfirmStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            query["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            query["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            query["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("PollingConfirmStatus", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/universities/courses/pollingConfirmStatus`, "json", req, runtime), new PollingConfirmStatusResponse({}));
    }
    async queryAllSubjectsFromClassSchedule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllSubjectsFromClassScheduleHeaders({});
        return await this.queryAllSubjectsFromClassScheduleWithOptions(request, headers, runtime);
    }
    async queryAllSubjectsFromClassScheduleWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryAllSubjectsFromClassScheduleShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.classIds)) {
            request.classIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.classIds, "classIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIdsShrink)) {
            query["classIds"] = request.classIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.periodCode)) {
            query["periodCode"] = request.periodCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllSubjectsFromClassSchedule", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/subjects/instances`, "json", req, runtime), new QueryAllSubjectsFromClassScheduleResponse({}));
    }
    async queryClassSchedule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryClassScheduleHeaders({});
        return await this.queryClassScheduleWithOptions(request, headers, runtime);
    }
    async queryClassScheduleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.subscriberType)) {
            query["subscriberType"] = request.subscriberType;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.sectionIndexList)) {
            body["sectionIndexList"] = request.sectionIndexList;
        }
        if (!tea_util_1.default.isUnset(request.subscriberIds)) {
            body["subscriberIds"] = request.subscriberIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryClassSchedule", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/classes/schedules/query`, "json", req, runtime), new QueryClassScheduleResponse({}));
    }
    async queryClassScheduleByTimeSchool(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryClassScheduleByTimeSchoolHeaders({});
        return await this.queryClassScheduleByTimeSchoolWithOptions(request, headers, runtime);
    }
    async queryClassScheduleByTimeSchoolWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryClassScheduleByTimeSchool", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/schools/classes/courses `, "json", req, runtime), new QueryClassScheduleByTimeSchoolResponse({}));
    }
    async queryClassScheduleConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryClassScheduleConfigHeaders({});
        return await this.queryClassScheduleConfigWithOptions(request, headers, runtime);
    }
    async queryClassScheduleConfigWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryClassScheduleConfigShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.classIds)) {
            request.classIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.classIds, "classIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIdsShrink)) {
            query["classIds"] = request.classIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryClassScheduleConfig", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/schedules/configs`, "json", req, runtime), new QueryClassScheduleConfigResponse({}));
    }
    async queryDeviceListByCorpId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDeviceListByCorpIdHeaders({});
        return await this.queryDeviceListByCorpIdWithOptions(request, headers, runtime);
    }
    async queryDeviceListByCorpIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryDeviceListByCorpId", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/remoteClasses/devices`, "json", req, runtime), new QueryDeviceListByCorpIdResponse({}));
    }
    async queryEduAssetSpaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEduAssetSpacesHeaders({});
        return await this.queryEduAssetSpacesWithOptions(request, headers, runtime);
    }
    async queryEduAssetSpacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            query["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryEduAssetSpaces", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/assets/spaces`, "json", req, runtime), new QueryEduAssetSpacesResponse({}));
    }
    async queryGroupId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupIdHeaders({});
        return await this.queryGroupIdWithOptions(request, headers, runtime);
    }
    async queryGroupIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryGroupId", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/faces/groups`, "json", req, runtime), new QueryGroupIdResponse({}));
    }
    async queryOrgRelationList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgRelationListHeaders({});
        return await this.queryOrgRelationListWithOptions(request, headers, runtime);
    }
    async queryOrgRelationListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryOrgRelationList", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/remoteClasses/orgRelations`, "json", req, runtime), new QueryOrgRelationListResponse({}));
    }
    async queryOrgSecretKey(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgSecretKeyHeaders({});
        return await this.queryOrgSecretKeyWithOptions(request, headers, runtime);
    }
    async queryOrgSecretKeyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            query["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryOrgSecretKey", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/universities/secretKeys`, "json", req, runtime), new QueryOrgSecretKeyResponse({}));
    }
    async queryOrgType() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgTypeHeaders({});
        return await this.queryOrgTypeWithOptions(headers, runtime);
    }
    async queryOrgTypeWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryOrgType", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/orgTypes`, "json", req, runtime), new QueryOrgTypeResponse({}));
    }
    async queryPayResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPayResultHeaders({});
        return await this.queryPayResultWithOptions(request, headers, runtime);
    }
    async queryPayResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryPayResult", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/payResults/query`, "json", req, runtime), new QueryPayResultResponse({}));
    }
    async queryPhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPhysicalClassroomHeaders({});
        return await this.queryPhysicalClassroomWithOptions(request, headers, runtime);
    }
    async queryPhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classroomId)) {
            query["classroomId"] = request.classroomId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryPhysicalClassroom", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/physicalClassrooms`, "json", req, runtime), new QueryPhysicalClassroomResponse({}));
    }
    async queryPurchaseInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPurchaseInfoHeaders({});
        return await this.queryPurchaseInfoWithOptions(request, headers, runtime);
    }
    async queryPurchaseInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            query["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            query["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryPurchaseInfo", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/users/purchases`, "json", req, runtime), new QueryPurchaseInfoResponse({}));
    }
    async queryRemoteClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRemoteClassCourseHeaders({});
        return await this.queryRemoteClassCourseWithOptions(request, headers, runtime);
    }
    async queryRemoteClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryRemoteClassCourse", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/remoteClasses/courses`, "json", req, runtime), new QueryRemoteClassCourseResponse({}));
    }
    async querySchoolUserFace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySchoolUserFaceHeaders({});
        return await this.querySchoolUserFaceWithOptions(request, headers, runtime);
    }
    async querySchoolUserFaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QuerySchoolUserFace", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/schools/faces`, "json", req, runtime), new QuerySchoolUserFaceResponse({}));
    }
    async queryStatisticsData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryStatisticsDataHeaders({});
        return await this.queryStatisticsDataWithOptions(request, headers, runtime);
    }
    async queryStatisticsDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.sectionIndexList)) {
            body["sectionIndexList"] = request.sectionIndexList;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserIds)) {
            body["teacherUserIds"] = request.teacherUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryStatisticsData", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/classes/schedules/statisticData/query`, "json", req, runtime), new QueryStatisticsDataResponse({}));
    }
    async querySubjectTeachers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySubjectTeachersHeaders({});
        return await this.querySubjectTeachersWithOptions(request, headers, runtime);
    }
    async querySubjectTeachersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIds)) {
            query["classIds"] = request.classIds;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.subjectCode)) {
            query["subjectCode"] = request.subjectCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QuerySubjectTeachers", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/subjects/teachers`, "json", req, runtime), new QuerySubjectTeachersResponse({}));
    }
    async queryTeachSubjects(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTeachSubjectsHeaders({});
        return await this.queryTeachSubjectsWithOptions(request, headers, runtime);
    }
    async queryTeachSubjectsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIds)) {
            query["classIds"] = request.classIds;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryTeachSubjects", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/teachers/subjects`, "json", req, runtime), new QueryTeachSubjectsResponse({}));
    }
    async queryUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUniversityCourseGroupHeaders({});
        return await this.queryUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    async queryUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            query["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryUniversityCourseGroup", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/universities/courseGroups`, "json", req, runtime), new QueryUniversityCourseGroupResponse({}));
    }
    async queryUserFace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserFaceHeaders({});
        return await this.queryUserFaceWithOptions(request, headers, runtime);
    }
    async queryUserFaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            query["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryUserFace", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/users/faces`, "json", req, runtime), new QueryUserFaceResponse({}));
    }
    async queryUserPayInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserPayInfoHeaders({});
        return await this.queryUserPayInfoWithOptions(request, headers, runtime);
    }
    async queryUserPayInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            query["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryUserPayInfo", "edu_1.0", "HTTP", "GET", "AK", `/v1.0/edu/orders/payInfos`, "json", req, runtime), new QueryUserPayInfoResponse({}));
    }
    async removeDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveDeviceHeaders({});
        return await this.removeDeviceWithOptions(request, headers, runtime);
    }
    async removeDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            query["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("RemoveDevice", "edu_1.0", "HTTP", "DELETE", "AK", `/v1.0/edu/devices`, "json", req, runtime), new RemoveDeviceResponse({}));
    }
    async reportDeviceLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ReportDeviceLogHeaders({});
        return await this.reportDeviceLogWithOptions(request, headers, runtime);
    }
    async reportDeviceLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            query["mediaId"] = request.mediaId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ReportDeviceLog", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/deviceLogs/report`, "json", req, runtime), new ReportDeviceLogResponse({}));
    }
    async reportDeviceUseLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ReportDeviceUseLogHeaders({});
        return await this.reportDeviceUseLogWithOptions(request, headers, runtime);
    }
    async reportDeviceUseLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("ReportDeviceUseLog", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/deviceUseLogs/report`, "json", req, runtime), new ReportDeviceUseLogResponse({}));
    }
    async searchTeachers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchTeachersHeaders({});
        return await this.searchTeachersWithOptions(request, headers, runtime);
    }
    async searchTeachersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.nameKeyword)) {
            query["nameKeyword"] = request.nameKeyword;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("SearchTeachers", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/teachers/search`, "json", req, runtime), new SearchTeachersResponse({}));
    }
    async sendMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendMessageHeaders({});
        return await this.sendMessageWithOptions(request, headers, runtime);
    }
    async sendMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.fromUserId)) {
            body["fromUserId"] = request.fromUserId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.toUserIdList)) {
            body["toUserIdList"] = request.toUserIdList;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SendMessage", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/messages/send`, "json", req, runtime), new SendMessageResponse({}));
    }
    async startCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartCourseHeaders({});
        return await this.startCourseWithOptions(request, headers, runtime);
    }
    async startCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.livePlayInfoList)) {
            body["livePlayInfoList"] = request.livePlayInfoList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("StartCourse", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/courses/start`, "json", req, runtime), new StartCourseResponse({}));
    }
    async startCoursePrepare(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartCoursePrepareHeaders({});
        return await this.startCoursePrepareWithOptions(request, headers, runtime);
    }
    async startCoursePrepareWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseDate)) {
            body["courseDate"] = request.courseDate;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceId)) {
            body["deviceId"] = request.deviceId;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.liveCoverImage)) {
            body["liveCoverImage"] = request.liveCoverImage;
        }
        if (!tea_util_1.default.isUnset(request.sectionIndex)) {
            body["sectionIndex"] = request.sectionIndex;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("StartCoursePrepare", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/courses/prepare`, "json", req, runtime), new StartCoursePrepareResponse({}));
    }
    async subscribeUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubscribeUniversityCourseGroupHeaders({});
        return await this.subscribeUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    async subscribeUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.studentUserIds)) {
            body["studentUserIds"] = request.studentUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SubscribeUniversityCourseGroup", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/courseGroups/subscribe`, "json", req, runtime), new SubscribeUniversityCourseGroupResponse({}));
    }
    async unsubscribeUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnsubscribeUniversityCourseGroupHeaders({});
        return await this.unsubscribeUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    async unsubscribeUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.studentUserIds)) {
            body["studentUserIds"] = request.studentUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UnsubscribeUniversityCourseGroup", "edu_1.0", "HTTP", "POST", "AK", `/v1.0/edu/universities/courseGroups/unsubscribe`, "json", req, runtime), new UnsubscribeUniversityCourseGroupResponse({}));
    }
    async updateCoursesOfClass(classId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCoursesOfClassHeaders({});
        return await this.updateCoursesOfClassWithOptions(classId, request, headers, runtime);
    }
    async updateCoursesOfClassWithOptions(classId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        classId = openapi_util_1.default.getEncodeParam(classId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courses)) {
            body["courses"] = request.courses;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.sectionConfig))) {
            body["sectionConfig"] = request.sectionConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateCoursesOfClass", "edu_1.0", "HTTP", "PUT", "AK", `/v1.0/edu/classes/${classId}/courses/schedules`, "json", req, runtime), new UpdateCoursesOfClassResponse({}));
    }
    async updatePhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePhysicalClassroomHeaders({});
        return await this.updatePhysicalClassroomWithOptions(request, headers, runtime);
    }
    async updatePhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.classroomBuilding)) {
            body["classroomBuilding"] = request.classroomBuilding;
        }
        if (!tea_util_1.default.isUnset(request.classroomCampus)) {
            body["classroomCampus"] = request.classroomCampus;
        }
        if (!tea_util_1.default.isUnset(request.classroomFloor)) {
            body["classroomFloor"] = request.classroomFloor;
        }
        if (!tea_util_1.default.isUnset(request.classroomId)) {
            body["classroomId"] = request.classroomId;
        }
        if (!tea_util_1.default.isUnset(request.classroomName)) {
            body["classroomName"] = request.classroomName;
        }
        if (!tea_util_1.default.isUnset(request.classroomNumber)) {
            body["classroomNumber"] = request.classroomNumber;
        }
        if (!tea_util_1.default.isUnset(request.directBroadcast)) {
            body["directBroadcast"] = request.directBroadcast;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdatePhysicalClassroom", "edu_1.0", "HTTP", "PUT", "AK", `/v1.0/edu/physicalClassrooms`, "json", req, runtime), new UpdatePhysicalClassroomResponse({}));
    }
    async updateRemoteClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRemoteClassCourseHeaders({});
        return await this.updateRemoteClassCourseWithOptions(request, headers, runtime);
    }
    async updateRemoteClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendParticipants)) {
            body["attendParticipants"] = request.attendParticipants;
        }
        if (!tea_util_1.default.isUnset(request.authCode)) {
            body["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.teachingParticipant))) {
            body["teachingParticipant"] = request.teachingParticipant;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateRemoteClassCourse", "edu_1.0", "HTTP", "PUT", "AK", `/v1.0/edu/remoteClasses/courses`, "json", req, runtime), new UpdateRemoteClassCourseResponse({}));
    }
    async updateRemoteClassDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRemoteClassDeviceHeaders({});
        return await this.updateRemoteClassDeviceWithOptions(request, headers, runtime);
    }
    async updateRemoteClassDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            query["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["deviceName"] = request.deviceName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("UpdateRemoteClassDevice", "edu_1.0", "HTTP", "PUT", "AK", `/v1.0/edu/remoteClasses/deviceNames`, "json", req, runtime), new UpdateRemoteClassDeviceResponse({}));
    }
    async updateUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateUniversityCourseGroupHeaders({});
        return await this.updateUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    async updateUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupIntroduce)) {
            body["courseGroupIntroduce"] = request.courseGroupIntroduce;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupName)) {
            body["courseGroupName"] = request.courseGroupName;
        }
        if (!tea_util_1.default.isUnset(request.courserGroupItemModels)) {
            body["courserGroupItemModels"] = request.courserGroupItemModels;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateUniversityCourseGroup", "edu_1.0", "HTTP", "PUT", "AK", `/v1.0/edu/universities/courseGroups`, "json", req, runtime), new UpdateUniversityCourseGroupResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map