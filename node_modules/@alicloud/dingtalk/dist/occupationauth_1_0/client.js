"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CheckUserTaskStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CheckUserTaskStatusHeaders = CheckUserTaskStatusHeaders;
class CheckUserTaskStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            provinceCode: 'string',
        };
    }
}
exports.CheckUserTaskStatusRequest = CheckUserTaskStatusRequest;
class CheckUserTaskStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CheckUserTaskStatusResponseBody = CheckUserTaskStatusResponseBody;
class CheckUserTaskStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CheckUserTaskStatusResponseBody,
        };
    }
}
exports.CheckUserTaskStatusResponse = CheckUserTaskStatusResponse;
class CheckUserTasksStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CheckUserTasksStatusHeaders = CheckUserTasksStatusHeaders;
class CheckUserTasksStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            provinceCode: 'string',
        };
    }
}
exports.CheckUserTasksStatusRequest = CheckUserTasksStatusRequest;
class CheckUserTasksStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'boolean',
        };
    }
}
exports.CheckUserTasksStatusResponseBody = CheckUserTasksStatusResponseBody;
class CheckUserTasksStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CheckUserTasksStatusResponseBody,
        };
    }
}
exports.CheckUserTasksStatusResponse = CheckUserTasksStatusResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async checkUserTaskStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckUserTaskStatusHeaders({});
        return await this.checkUserTaskStatusWithOptions(request, headers, runtime);
    }
    async checkUserTaskStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.provinceCode)) {
            body["provinceCode"] = request.provinceCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CheckUserTaskStatus", "occupationauth_1.0", "HTTP", "POST", "AK", `/v1.0/occupationauth/auths/userTasks`, "json", req, runtime), new CheckUserTaskStatusResponse({}));
    }
    async checkUserTasksStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckUserTasksStatusHeaders({});
        return await this.checkUserTasksStatusWithOptions(request, headers, runtime);
    }
    async checkUserTasksStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.provinceCode)) {
            query["provinceCode"] = request.provinceCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CheckUserTasksStatus", "occupationauth_1.0", "HTTP", "POST", "AK", `/v1.0/occupationauth/userTasks/check`, "json", req, runtime), new CheckUserTasksStatusResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map