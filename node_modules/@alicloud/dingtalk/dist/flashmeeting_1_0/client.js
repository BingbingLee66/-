"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateFlashMeetingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateFlashMeetingHeaders = CreateFlashMeetingHeaders;
class CreateFlashMeetingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creator: 'creator',
            eventId: 'eventId',
            title: 'title',
        };
    }
    static types() {
        return {
            creator: 'string',
            eventId: 'string',
            title: 'string',
        };
    }
}
exports.CreateFlashMeetingRequest = CreateFlashMeetingRequest;
class CreateFlashMeetingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            flashMeetingKey: 'flashMeetingKey',
            startTime: 'startTime',
            title: 'title',
            url: 'url',
        };
    }
    static types() {
        return {
            endTime: 'number',
            flashMeetingKey: 'string',
            startTime: 'number',
            title: 'string',
            url: 'string',
        };
    }
}
exports.CreateFlashMeetingResponseBody = CreateFlashMeetingResponseBody;
class CreateFlashMeetingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateFlashMeetingResponseBody,
        };
    }
}
exports.CreateFlashMeetingResponse = CreateFlashMeetingResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async createFlashMeeting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateFlashMeetingHeaders({});
        return await this.createFlashMeetingWithOptions(request, headers, runtime);
    }
    async createFlashMeetingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.creator)) {
            body["creator"] = request.creator;
        }
        if (!tea_util_1.default.isUnset(request.eventId)) {
            body["eventId"] = request.eventId;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateFlashMeeting", "flashmeeting_1.0", "HTTP", "POST", "AK", `/v1.0/flashmeeting/meetings`, "json", req, runtime), new CreateFlashMeetingResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map