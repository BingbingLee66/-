"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class SyncSecretKeyHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SyncSecretKeyHeaders = SyncSecretKeyHeaders;
class SyncSecretKeyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionType: 'actionType',
            secretString: 'secretString',
            targetCorpId: 'targetCorpId',
            tripAppKey: 'tripAppKey',
            tripAppSecurity: 'tripAppSecurity',
            tripCorpId: 'tripCorpId',
        };
    }
    static types() {
        return {
            actionType: 'string',
            secretString: 'string',
            targetCorpId: 'string',
            tripAppKey: 'string',
            tripAppSecurity: 'string',
            tripCorpId: 'string',
        };
    }
}
exports.SyncSecretKeyRequest = SyncSecretKeyRequest;
class SyncSecretKeyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: SyncSecretKeyResponseBodyResult,
            success: 'string',
        };
    }
}
exports.SyncSecretKeyResponseBody = SyncSecretKeyResponseBody;
class SyncSecretKeyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SyncSecretKeyResponseBody,
        };
    }
}
exports.SyncSecretKeyResponse = SyncSecretKeyResponse;
class SyncTripOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SyncTripOrderHeaders = SyncTripOrderHeaders;
class SyncTripOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currency: 'currency',
            dingUserId: 'dingUserId',
            discountAmount: 'discountAmount',
            endorseFlag: 'endorseFlag',
            event: 'event',
            gmtOrder: 'gmtOrder',
            gmtPay: 'gmtPay',
            gmtRefund: 'gmtRefund',
            invoiceApplyUrl: 'invoiceApplyUrl',
            journeyBizNo: 'journeyBizNo',
            orderDetails: 'orderDetails',
            orderNo: 'orderNo',
            orderUrl: 'orderUrl',
            realAmount: 'realAmount',
            refundAmount: 'refundAmount',
            relativeOrderNo: 'relativeOrderNo',
            source: 'source',
            targetCorpId: 'targetCorpId',
            totalAmount: 'totalAmount',
            type: 'type',
        };
    }
    static types() {
        return {
            currency: 'string',
            dingUserId: 'string',
            discountAmount: 'string',
            endorseFlag: 'boolean',
            event: SyncTripOrderRequestEvent,
            gmtOrder: 'string',
            gmtPay: 'string',
            gmtRefund: 'string',
            invoiceApplyUrl: 'string',
            journeyBizNo: 'string',
            orderDetails: { 'type': 'array', 'itemType': SyncTripOrderRequestOrderDetails },
            orderNo: 'string',
            orderUrl: 'string',
            realAmount: 'string',
            refundAmount: 'string',
            relativeOrderNo: 'string',
            source: 'string',
            targetCorpId: 'string',
            totalAmount: 'string',
            type: 'string',
        };
    }
}
exports.SyncTripOrderRequest = SyncTripOrderRequest;
class SyncTripOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SyncTripOrderResponseBody = SyncTripOrderResponseBody;
class SyncTripOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SyncTripOrderResponseBody,
        };
    }
}
exports.SyncTripOrderResponse = SyncTripOrderResponse;
class SyncSecretKeyResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            secretString: 'secretString',
            targetCorpId: 'targetCorpId',
            tripAppKey: 'tripAppKey',
            tripAppSecurity: 'tripAppSecurity',
            tripCorpId: 'tripCorpId',
        };
    }
    static types() {
        return {
            secretString: 'string',
            targetCorpId: 'string',
            tripAppKey: 'string',
            tripAppSecurity: 'string',
            tripCorpId: 'string',
        };
    }
}
exports.SyncSecretKeyResponseBodyResult = SyncSecretKeyResponseBodyResult;
class SyncTripOrderRequestEvent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            gmtAction: 'gmtAction',
        };
    }
    static types() {
        return {
            action: 'string',
            gmtAction: 'string',
        };
    }
}
exports.SyncTripOrderRequestEvent = SyncTripOrderRequestEvent;
class SyncTripOrderRequestOrderDetailsHotelLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lat: 'lat',
            lon: 'lon',
            source: 'source',
            url: 'url',
        };
    }
    static types() {
        return {
            lat: 'string',
            lon: 'string',
            source: 'string',
            url: 'string',
        };
    }
}
exports.SyncTripOrderRequestOrderDetailsHotelLocation = SyncTripOrderRequestOrderDetailsHotelLocation;
class SyncTripOrderRequestOrderDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            arrivalTime: 'arrivalTime',
            carColor: 'carColor',
            carModel: 'carModel',
            carNumber: 'carNumber',
            cateringType: 'cateringType',
            checkInTime: 'checkInTime',
            checkOutTime: 'checkOutTime',
            departTime: 'departTime',
            destinationCityCode: 'destinationCityCode',
            destinationStation: 'destinationStation',
            hotelAddress: 'hotelAddress',
            hotelLocation: 'hotelLocation',
            hotelName: 'hotelName',
            originCityCode: 'originCityCode',
            originStation: 'originStation',
            roomCount: 'roomCount',
            seatInfo: 'seatInfo',
            serviceType: 'serviceType',
            subSupplyLogo: 'subSupplyLogo',
            subSupplyName: 'subSupplyName',
            taxiType: 'taxiType',
            telephone: 'telephone',
            transportNumber: 'transportNumber',
            typeDescription: 'typeDescription',
        };
    }
    static types() {
        return {
            arrivalTime: 'string',
            carColor: 'string',
            carModel: 'string',
            carNumber: 'string',
            cateringType: 'string',
            checkInTime: 'string',
            checkOutTime: 'string',
            departTime: 'string',
            destinationCityCode: 'string',
            destinationStation: 'string',
            hotelAddress: 'string',
            hotelLocation: SyncTripOrderRequestOrderDetailsHotelLocation,
            hotelName: 'string',
            originCityCode: 'string',
            originStation: 'string',
            roomCount: 'number',
            seatInfo: 'string',
            serviceType: 'string',
            subSupplyLogo: 'string',
            subSupplyName: 'string',
            taxiType: 'string',
            telephone: 'string',
            transportNumber: 'string',
            typeDescription: 'string',
        };
    }
}
exports.SyncTripOrderRequestOrderDetails = SyncTripOrderRequestOrderDetails;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async syncSecretKey(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SyncSecretKeyHeaders({});
        return await this.syncSecretKeyWithOptions(request, headers, runtime);
    }
    async syncSecretKeyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionType)) {
            body["actionType"] = request.actionType;
        }
        if (!tea_util_1.default.isUnset(request.secretString)) {
            body["secretString"] = request.secretString;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.tripAppKey)) {
            body["tripAppKey"] = request.tripAppKey;
        }
        if (!tea_util_1.default.isUnset(request.tripAppSecurity)) {
            body["tripAppSecurity"] = request.tripAppSecurity;
        }
        if (!tea_util_1.default.isUnset(request.tripCorpId)) {
            body["tripCorpId"] = request.tripCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SyncSecretKey", "trip_1.0", "HTTP", "POST", "AK", `/v1.0/trip/secretKeys/sync`, "json", req, runtime), new SyncSecretKeyResponse({}));
    }
    async syncTripOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SyncTripOrderHeaders({});
        return await this.syncTripOrderWithOptions(request, headers, runtime);
    }
    async syncTripOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.currency)) {
            body["currency"] = request.currency;
        }
        if (!tea_util_1.default.isUnset(request.dingUserId)) {
            body["dingUserId"] = request.dingUserId;
        }
        if (!tea_util_1.default.isUnset(request.discountAmount)) {
            body["discountAmount"] = request.discountAmount;
        }
        if (!tea_util_1.default.isUnset(request.endorseFlag)) {
            body["endorseFlag"] = request.endorseFlag;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.event))) {
            body["event"] = request.event;
        }
        if (!tea_util_1.default.isUnset(request.gmtOrder)) {
            body["gmtOrder"] = request.gmtOrder;
        }
        if (!tea_util_1.default.isUnset(request.gmtPay)) {
            body["gmtPay"] = request.gmtPay;
        }
        if (!tea_util_1.default.isUnset(request.gmtRefund)) {
            body["gmtRefund"] = request.gmtRefund;
        }
        if (!tea_util_1.default.isUnset(request.invoiceApplyUrl)) {
            body["invoiceApplyUrl"] = request.invoiceApplyUrl;
        }
        if (!tea_util_1.default.isUnset(request.journeyBizNo)) {
            body["journeyBizNo"] = request.journeyBizNo;
        }
        if (!tea_util_1.default.isUnset(request.orderDetails)) {
            body["orderDetails"] = request.orderDetails;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.orderUrl)) {
            body["orderUrl"] = request.orderUrl;
        }
        if (!tea_util_1.default.isUnset(request.realAmount)) {
            body["realAmount"] = request.realAmount;
        }
        if (!tea_util_1.default.isUnset(request.refundAmount)) {
            body["refundAmount"] = request.refundAmount;
        }
        if (!tea_util_1.default.isUnset(request.relativeOrderNo)) {
            body["relativeOrderNo"] = request.relativeOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.source)) {
            body["source"] = request.source;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.totalAmount)) {
            body["totalAmount"] = request.totalAmount;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SyncTripOrder", "trip_1.0", "HTTP", "POST", "AK", `/v1.0/trip/tripOrders/sync`, "json", req, runtime), new SyncTripOrderResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map