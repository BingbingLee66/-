"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateMiniAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateMiniAppHeaders = CreateMiniAppHeaders;
class CreateMiniAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'bizId',
            bizType: 'bizType',
            bundleId: 'bundleId',
            desc: 'desc',
            icon: 'icon',
            name: 'name',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'number',
            bundleId: 'string',
            desc: 'string',
            icon: 'string',
            name: 'string',
        };
    }
}
exports.CreateMiniAppRequest = CreateMiniAppRequest;
class CreateMiniAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
        };
    }
}
exports.CreateMiniAppResponseBody = CreateMiniAppResponseBody;
class CreateMiniAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateMiniAppResponseBody,
        };
    }
}
exports.CreateMiniAppResponse = CreateMiniAppResponse;
class CreateMiniAppPluginHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateMiniAppPluginHeaders = CreateMiniAppPluginHeaders;
class CreateMiniAppPluginRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'bizId',
            bizType: 'bizType',
            bundleId: 'bundleId',
            desc: 'desc',
            icon: 'icon',
            name: 'name',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'number',
            bundleId: 'string',
            desc: 'string',
            icon: 'string',
            name: 'string',
        };
    }
}
exports.CreateMiniAppPluginRequest = CreateMiniAppPluginRequest;
class CreateMiniAppPluginResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
        };
    }
}
exports.CreateMiniAppPluginResponseBody = CreateMiniAppPluginResponseBody;
class CreateMiniAppPluginResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateMiniAppPluginResponseBody,
        };
    }
}
exports.CreateMiniAppPluginResponse = CreateMiniAppPluginResponse;
class CreateVersionAcrossBundleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateVersionAcrossBundleHeaders = CreateVersionAcrossBundleHeaders;
class CreateVersionAcrossBundleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            sourceBundleId: 'sourceBundleId',
            sourceVersion: 'sourceVersion',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            sourceBundleId: 'string',
            sourceVersion: 'string',
            version: 'string',
        };
    }
}
exports.CreateVersionAcrossBundleRequest = CreateVersionAcrossBundleRequest;
class CreateVersionAcrossBundleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.CreateVersionAcrossBundleResponseBody = CreateVersionAcrossBundleResponseBody;
class CreateVersionAcrossBundleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateVersionAcrossBundleResponseBody,
        };
    }
}
exports.CreateVersionAcrossBundleResponse = CreateVersionAcrossBundleResponse;
class GetMaxVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMaxVersionHeaders = GetMaxVersionHeaders;
class GetMaxVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
        };
    }
}
exports.GetMaxVersionRequest = GetMaxVersionRequest;
class GetMaxVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.GetMaxVersionResponseBody = GetMaxVersionResponseBody;
class GetMaxVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetMaxVersionResponseBody,
        };
    }
}
exports.GetMaxVersionResponse = GetMaxVersionResponse;
class GetMiniAppMetaDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMiniAppMetaDataHeaders = GetMiniAppMetaDataHeaders;
class GetMiniAppMetaDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'bundleId',
            bundleIdTableGmtModified: 'bundleIdTableGmtModified',
            fromAppName: 'fromAppName',
            miniAppIdTableGmtModified: 'miniAppIdTableGmtModified',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            bundleIdTableGmtModified: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            fromAppName: 'string',
            miniAppIdTableGmtModified: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GetMiniAppMetaDataRequest = GetMiniAppMetaDataRequest;
class GetMiniAppMetaDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingOpenErrcode: 'dingOpenErrcode',
            errorMsg: 'errorMsg',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            dingOpenErrcode: 'number',
            errorMsg: 'string',
            result: GetMiniAppMetaDataResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.GetMiniAppMetaDataResponseBody = GetMiniAppMetaDataResponseBody;
class GetMiniAppMetaDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetMiniAppMetaDataResponseBody,
        };
    }
}
exports.GetMiniAppMetaDataResponse = GetMiniAppMetaDataResponse;
class GetSettingByMiniAppIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSettingByMiniAppIdHeaders = GetSettingByMiniAppIdHeaders;
class GetSettingByMiniAppIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.GetSettingByMiniAppIdResponseBody = GetSettingByMiniAppIdResponseBody;
class GetSettingByMiniAppIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSettingByMiniAppIdResponseBody,
        };
    }
}
exports.GetSettingByMiniAppIdResponse = GetSettingByMiniAppIdResponse;
class InvokeHtmlBundleBuildHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InvokeHtmlBundleBuildHeaders = InvokeHtmlBundleBuildHeaders;
class InvokeHtmlBundleBuildRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
        };
    }
}
exports.InvokeHtmlBundleBuildRequest = InvokeHtmlBundleBuildRequest;
class InvokeHtmlBundleBuildResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.InvokeHtmlBundleBuildResponseBody = InvokeHtmlBundleBuildResponseBody;
class InvokeHtmlBundleBuildResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: InvokeHtmlBundleBuildResponseBody,
        };
    }
}
exports.InvokeHtmlBundleBuildResponse = InvokeHtmlBundleBuildResponse;
class ListAvaiableVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAvaiableVersionHeaders = ListAvaiableVersionHeaders;
class ListAvaiableVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            pageNum: 'pageNum',
            pageSize: 'pageSize',
            versionTypeSet: 'versionTypeSet',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            pageNum: 'number',
            pageSize: 'number',
            versionTypeSet: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListAvaiableVersionRequest = ListAvaiableVersionRequest;
class ListAvaiableVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            versions: 'versions',
        };
    }
    static types() {
        return {
            versions: { 'type': 'array', 'itemType': ListAvaiableVersionResponseBodyVersions },
        };
    }
}
exports.ListAvaiableVersionResponseBody = ListAvaiableVersionResponseBody;
class ListAvaiableVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListAvaiableVersionResponseBody,
        };
    }
}
exports.ListAvaiableVersionResponse = ListAvaiableVersionResponse;
class QueryHtmlBundleBuildHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryHtmlBundleBuildHeaders = QueryHtmlBundleBuildHeaders;
class QueryHtmlBundleBuildRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
        };
    }
}
exports.QueryHtmlBundleBuildRequest = QueryHtmlBundleBuildRequest;
class QueryHtmlBundleBuildResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.QueryHtmlBundleBuildResponseBody = QueryHtmlBundleBuildResponseBody;
class QueryHtmlBundleBuildResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryHtmlBundleBuildResponseBody,
        };
    }
}
exports.QueryHtmlBundleBuildResponse = QueryHtmlBundleBuildResponse;
class SetExtendSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetExtendSettingHeaders = SetExtendSettingHeaders;
class SetExtendSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            buildH5Bundle: 'buildH5Bundle',
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            buildH5Bundle: 'boolean',
            miniAppId: 'string',
        };
    }
}
exports.SetExtendSettingRequest = SetExtendSettingRequest;
class SetExtendSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.SetExtendSettingResponseBody = SetExtendSettingResponseBody;
class SetExtendSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetExtendSettingResponseBody,
        };
    }
}
exports.SetExtendSettingResponse = SetExtendSettingResponse;
class UpdateVersionStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateVersionStatusHeaders = UpdateVersionStatusHeaders;
class UpdateVersionStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
            versionType: 'versionType',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
            versionType: 'number',
        };
    }
}
exports.UpdateVersionStatusRequest = UpdateVersionStatusRequest;
class UpdateVersionStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.UpdateVersionStatusResponseBody = UpdateVersionStatusResponseBody;
class UpdateVersionStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateVersionStatusResponseBody,
        };
    }
}
exports.UpdateVersionStatusResponse = UpdateVersionStatusResponse;
class GetMiniAppMetaDataResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GetMiniAppMetaDataResponseBodyResult = GetMiniAppMetaDataResponseBodyResult;
class ListAvaiableVersionResponseBodyVersions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            buildStatus: 'buildStatus',
            h5Bundle: 'h5Bundle',
            packageSize: 'packageSize',
            packageUrl: 'packageUrl',
            version: 'version',
        };
    }
    static types() {
        return {
            buildStatus: 'number',
            h5Bundle: 'string',
            packageSize: 'string',
            packageUrl: 'string',
            version: 'string',
        };
    }
}
exports.ListAvaiableVersionResponseBodyVersions = ListAvaiableVersionResponseBodyVersions;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async createMiniApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMiniAppHeaders({});
        return await this.createMiniAppWithOptions(request, headers, runtime);
    }
    async createMiniAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.desc)) {
            body["desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateMiniApp", "miniapp_1.0", "HTTP", "POST", "AK", `/v1.0/miniapp/apps`, "json", req, runtime), new CreateMiniAppResponse({}));
    }
    async createMiniAppPlugin(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMiniAppPluginHeaders({});
        return await this.createMiniAppPluginWithOptions(request, headers, runtime);
    }
    async createMiniAppPluginWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.desc)) {
            body["desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateMiniAppPlugin", "miniapp_1.0", "HTTP", "POST", "AK", `/v1.0/miniapp/plugins`, "json", req, runtime), new CreateMiniAppPluginResponse({}));
    }
    async createVersionAcrossBundle(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateVersionAcrossBundleHeaders({});
        return await this.createVersionAcrossBundleWithOptions(request, headers, runtime);
    }
    async createVersionAcrossBundleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.sourceBundleId)) {
            body["sourceBundleId"] = request.sourceBundleId;
        }
        if (!tea_util_1.default.isUnset(request.sourceVersion)) {
            body["sourceVersion"] = request.sourceVersion;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateVersionAcrossBundle", "miniapp_1.0", "HTTP", "POST", "AK", `/v1.0/miniapp/versions/createAcrossBundle`, "json", req, runtime), new CreateVersionAcrossBundleResponse({}));
    }
    async getMaxVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMaxVersionHeaders({});
        return await this.getMaxVersionWithOptions(request, headers, runtime);
    }
    async getMaxVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            query["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetMaxVersion", "miniapp_1.0", "HTTP", "GET", "AK", `/v1.0/miniapp/apps/maxVersions`, "json", req, runtime), new GetMaxVersionResponse({}));
    }
    async getMiniAppMetaData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMiniAppMetaDataHeaders({});
        return await this.getMiniAppMetaDataWithOptions(request, headers, runtime);
    }
    async getMiniAppMetaDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.bundleIdTableGmtModified)) {
            body["bundleIdTableGmtModified"] = request.bundleIdTableGmtModified;
        }
        if (!tea_util_1.default.isUnset(request.fromAppName)) {
            body["fromAppName"] = request.fromAppName;
        }
        if (!tea_util_1.default.isUnset(request.miniAppIdTableGmtModified)) {
            body["miniAppIdTableGmtModified"] = request.miniAppIdTableGmtModified;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("GetMiniAppMetaData", "miniapp_1.0", "HTTP", "POST", "AK", `/v1.0/miniapp/apps/metadata`, "json", req, runtime), new GetMiniAppMetaDataResponse({}));
    }
    async getSettingByMiniAppId(miniAppId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSettingByMiniAppIdHeaders({});
        return await this.getSettingByMiniAppIdWithOptions(miniAppId, headers, runtime);
    }
    async getSettingByMiniAppIdWithOptions(miniAppId, headers, runtime) {
        miniAppId = openapi_util_1.default.getEncodeParam(miniAppId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetSettingByMiniAppId", "miniapp_1.0", "HTTP", "GET", "AK", `/v1.0/miniapp/apps/settings`, "json", req, runtime), new GetSettingByMiniAppIdResponse({}));
    }
    async invokeHtmlBundleBuild(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InvokeHtmlBundleBuildHeaders({});
        return await this.invokeHtmlBundleBuildWithOptions(request, headers, runtime);
    }
    async invokeHtmlBundleBuildWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("InvokeHtmlBundleBuild", "miniapp_1.0", "HTTP", "POST", "AK", `/v1.0/miniapp/h5Bundles/build`, "json", req, runtime), new InvokeHtmlBundleBuildResponse({}));
    }
    async listAvaiableVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAvaiableVersionHeaders({});
        return await this.listAvaiableVersionWithOptions(request, headers, runtime);
    }
    async listAvaiableVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.pageNum)) {
            body["pageNum"] = request.pageNum;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.versionTypeSet)) {
            body["versionTypeSet"] = request.versionTypeSet;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("ListAvaiableVersion", "miniapp_1.0", "HTTP", "POST", "AK", `/v1.0/miniapp/apps/versions/query`, "json", req, runtime), new ListAvaiableVersionResponse({}));
    }
    async queryHtmlBundleBuild(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHtmlBundleBuildHeaders({});
        return await this.queryHtmlBundleBuildWithOptions(request, headers, runtime);
    }
    async queryHtmlBundleBuildWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            query["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryHtmlBundleBuild", "miniapp_1.0", "HTTP", "GET", "AK", `/v1.0/miniapp/h5Bundles/buildResults`, "json", req, runtime), new QueryHtmlBundleBuildResponse({}));
    }
    async setExtendSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetExtendSettingHeaders({});
        return await this.setExtendSettingWithOptions(request, headers, runtime);
    }
    async setExtendSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.buildH5Bundle)) {
            body["buildH5Bundle"] = request.buildH5Bundle;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SetExtendSetting", "miniapp_1.0", "HTTP", "PUT", "AK", `/v1.0/miniapp/apps/settings`, "json", req, runtime), new SetExtendSettingResponse({}));
    }
    async updateVersionStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateVersionStatusHeaders({});
        return await this.updateVersionStatusWithOptions(request, headers, runtime);
    }
    async updateVersionStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        if (!tea_util_1.default.isUnset(request.versionType)) {
            body["versionType"] = request.versionType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateVersionStatus", "miniapp_1.0", "HTTP", "POST", "AK", `/v1.0/miniapp/versions/status`, "json", req, runtime), new UpdateVersionStatusResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map