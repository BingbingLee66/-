/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddLeaveTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequest extends $tea.Model {
    bizType?: string;
    extras?: string;
    hoursInPerDay?: number;
    leaveCertificate?: AddLeaveTypeRequestLeaveCertificate;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    submitTimeRule?: AddLeaveTypeRequestSubmitTimeRule;
    visibilityRules?: AddLeaveTypeRequestVisibilityRules[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBody extends $tea.Model {
    result?: AddLeaveTypeResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddLeaveTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddRequest extends $tea.Model {
    deviceIdList?: number[];
    groupKey?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBody extends $tea.Model {
    errorList?: AttendanceBleDevicesAddResponseBodyErrorList[];
    successList?: AttendanceBleDevicesAddResponseBodySuccessList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AttendanceBleDevicesAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryRequest extends $tea.Model {
    groupKey?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryResponseBody extends $tea.Model {
    result?: AttendanceBleDevicesQueryResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AttendanceBleDevicesQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveRequest extends $tea.Model {
    deviceIdList?: number[];
    groupKey?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveResponseBody extends $tea.Model {
    errorList?: AttendanceBleDevicesRemoveResponseBodyErrorList[];
    successList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AttendanceBleDevicesRemoveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountRequest extends $tea.Model {
    bizCode?: string;
    userIds?: string[];
    userTimeRange?: CheckClosingAccountRequestUserTimeRange[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountResponseBody extends $tea.Model {
    code?: string;
    mesage?: string;
    pass?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CheckClosingAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionRequest extends $tea.Model {
    category?: string;
    entityIds?: number[];
    opUserId?: string;
    resourceKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionResponseBody extends $tea.Model {
    entityPermissionMap?: {
        [key: string]: boolean;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CheckWritePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveRequest extends $tea.Model {
    approveId?: string;
    opUserid?: string;
    punchParam?: CreateApproveRequestPunchParam;
    subType?: string;
    tagName?: string;
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveResponseBody extends $tea.Model {
    dingtalkApproveId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateApproveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateRequest extends $tea.Model {
    formCode?: string;
    formContent?: string;
    openConversationId?: string;
    systemTemplate?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteWaterMarkTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckRequest extends $tea.Model {
    clientVer?: string;
    platform?: string;
    platformVer?: string;
    sec?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckResponseBody extends $tea.Model {
    result?: DingTalkSecurityCheckResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DingTalkSecurityCheckResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponseBody extends $tea.Model {
    result?: GetAdjustmentsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetAdjustmentsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateRequest extends $tea.Model {
    bizCode?: string;
    openConversationId?: string;
    sceneCode?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponseBody extends $tea.Model {
    result?: GetCheckInSchemaTemplateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetCheckInSchemaTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsRequest extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBody extends $tea.Model {
    result?: GetClosingAccountsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetClosingAccountsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeRequest extends $tea.Model {
    opUserId?: string;
    vacationSource?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBody extends $tea.Model {
    result?: GetLeaveTypeResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetLeaveTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponseBody extends $tea.Model {
    result?: GetMachineResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetMachineResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponseBody extends $tea.Model {
    result?: GetMachineUserResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetMachineUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingRequest extends $tea.Model {
    overtimeSettingIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBody extends $tea.Model {
    result?: GetOvertimeSettingResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetOvertimeSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponseBody extends $tea.Model {
    result?: GetSimpleOvertimeSettingResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSimpleOvertimeSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysRequest extends $tea.Model {
    userIds?: string[];
    workDateFrom?: number;
    workDateTo?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponseBody extends $tea.Model {
    result?: GetUserHolidaysResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetUserHolidaysResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasRequest extends $tea.Model {
    leaveCode?: string;
    opUserId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasResponseBody extends $tea.Model {
    result?: InitAndGetLeaveALlocationQuotasResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: InitAndGetLeaveALlocationQuotasResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateRequest extends $tea.Model {
    formCode?: string;
    icon?: string;
    layoutDesignId?: string;
    schemaContent?: string;
    title?: string;
    waterMarkId?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ModifyWaterMarkTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateRequest extends $tea.Model {
    approveId?: string;
    opUserId?: string;
    punchParam?: ProcessApproveCreateRequestPunchParam;
    subType?: string;
    tagName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateResponseBody extends $tea.Model {
    result?: ProcessApproveCreateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ProcessApproveCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateRequest extends $tea.Model {
    bizCode?: string;
    icon?: string;
    layoutDesignId?: string;
    sceneCode?: string;
    schemaContent?: string;
    title?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateResponseBody extends $tea.Model {
    result?: SaveCustomWaterMarkTemplateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SaveCustomWaterMarkTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoRequest extends $tea.Model {
    opUserId?: string;
    scheduleInfos?: SyncScheduleInfoRequestScheduleInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequest extends $tea.Model {
    bizType?: string;
    extras?: string;
    hoursInPerDay?: number;
    leaveCertificate?: UpdateLeaveTypeRequestLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    submitTimeRule?: UpdateLeaveTypeRequestSubmitTimeRule;
    visibilityRules?: UpdateLeaveTypeRequestVisibilityRules[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBody extends $tea.Model {
    result?: UpdateLeaveTypeResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateLeaveTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResultDurationSettingsValue extends $tea.Model {
    calcType?: number;
    durationType?: number;
    overtimeRedress?: boolean;
    settings?: {
        [key: string]: any;
    };
    overtimeRedressBy?: string;
    vacationRate?: number;
    skipTime?: string;
    skipTimeByFrames?: ResultDurationSettingsValueSkipTimeByFrames[];
    skipTimeByDurations?: ResultDurationSettingsValueSkipTimeByDurations[];
    holidayPlanOvertimeRedress?: boolean;
    holidayPlanOvertimeRedressBy?: string;
    holidayPlanVacationRate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequestLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequestSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequestVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResultLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResultSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResultVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResult extends $tea.Model {
    bizType?: string;
    hoursInPerDay?: number;
    leaveCertificate?: AddLeaveTypeResponseBodyResultLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    submitTimeRule?: AddLeaveTypeResponseBodyResultSubmitTimeRule;
    visibilityRules?: AddLeaveTypeResponseBodyResultVisibilityRules[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBodyErrorListFailureList extends $tea.Model {
    deviceId?: number;
    deviceName?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBodyErrorList extends $tea.Model {
    code?: string;
    failureList?: AttendanceBleDevicesAddResponseBodyErrorListFailureList[];
    msg?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBodySuccessList extends $tea.Model {
    deviceId?: number;
    deviceName?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryResponseBodyResult extends $tea.Model {
    deviceId?: number;
    deviceName?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveResponseBodyErrorList extends $tea.Model {
    code?: string;
    failureList?: number[];
    msg?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountRequestUserTimeRange extends $tea.Model {
    endTime?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveRequestPunchParam extends $tea.Model {
    positionId?: string;
    positionName?: string;
    positionType?: string;
    punchTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckResponseBodyResult extends $tea.Model {
    hasRisk?: boolean;
    riskInfo?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponseBodyResultItems extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponseBodyResult extends $tea.Model {
    items?: GetAdjustmentsResponseBodyResultItems[];
    pageNumber?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponseBodyResultWaterMarkTemplateModels extends $tea.Model {
    canModify?: boolean;
    formCode?: string;
    icon?: string;
    layoutDesign?: string;
    sceneCode?: string;
    schemaContent?: string;
    suiteKey?: string;
    systemTemplate?: boolean;
    title?: string;
    waterMarkId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponseBodyResult extends $tea.Model {
    bizCode?: string;
    canModifyAndAddTemplate?: boolean;
    conversationAdmin?: boolean;
    customTemplateMaxSize?: number;
    openConversationId?: string;
    showStat?: boolean;
    templateDegrade?: boolean;
    waterMarkTemplateModels?: GetCheckInSchemaTemplateResponseBodyResultWaterMarkTemplateModels[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBodyResultClosingAccountModel extends $tea.Model {
    closingDay?: number;
    closingHourMinutes?: number;
    endDay?: number;
    endMonth?: number;
    startDay?: number;
    startMonth?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBodyResultUnsealClosingAccountModel extends $tea.Model {
    invalidTimeStamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBodyResult extends $tea.Model {
    closingAccountModel?: GetClosingAccountsResponseBodyResultClosingAccountModel;
    switchOn?: boolean;
    unsealClosingAccountModel?: GetClosingAccountsResponseBodyResultUnsealClosingAccountModel;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResultLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResultSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResultVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResult extends $tea.Model {
    bizType?: string;
    hoursInPerDay?: number;
    leaveCertificate?: GetLeaveTypeResponseBodyResultLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    source?: string;
    submitTimeRule?: GetLeaveTypeResponseBodyResultSubmitTimeRule;
    validityType?: string;
    validityValue?: string;
    visibilityRules?: GetLeaveTypeResponseBodyResultVisibilityRules[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponseBodyResultMachineBluetoothVO extends $tea.Model {
    address?: string;
    bluetoothCheckWithFace?: boolean;
    bluetoothDistanceMode?: string;
    bluetoothDistanceModeDesc?: string;
    bluetoothValue?: boolean;
    latitude?: number;
    limitUserDeviceCount?: boolean;
    longitude?: number;
    monitorLocationAbnormal?: boolean;
    userDeviceCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponseBodyResult extends $tea.Model {
    atmManagerList?: string[];
    devId?: number;
    deviceId?: string;
    deviceName?: string;
    deviceSn?: string;
    machineBluetoothVO?: GetMachineResponseBodyResultMachineBluetoothVO;
    maxFace?: number;
    netStatus?: string;
    productName?: string;
    productVersion?: string;
    voiceMode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponseBodyResultUserList extends $tea.Model {
    hasFace?: boolean;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    userList?: GetMachineUserResponseBodyResultUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBodyResultOvertimeDivisions extends $tea.Model {
    nextDayType?: string;
    previousDayType?: string;
    timeSplitPoint?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBodyResultWarningSettings extends $tea.Model {
    action?: string;
    threshold?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBodyResult extends $tea.Model {
    default?: boolean;
    durationSettings?: {
        [key: string]: ResultDurationSettingsValue;
    };
    id?: number;
    name?: string;
    overtimeDivisions?: GetOvertimeSettingResponseBodyResultOvertimeDivisions[];
    settingId?: number;
    stepType?: number;
    stepValue?: number;
    warningSettings?: GetOvertimeSettingResponseBodyResultWarningSettings[];
    workMinutesPerDay?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponseBodyResultItems extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponseBodyResult extends $tea.Model {
    items?: GetSimpleOvertimeSettingResponseBodyResultItems[];
    pageNumber?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponseBodyResultHolidays extends $tea.Model {
    holidayName?: string;
    holidayType?: string;
    realWorkDate?: number;
    workDate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponseBodyResult extends $tea.Model {
    holidays?: GetUserHolidaysResponseBodyResultHolidays[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasResponseBodyResult extends $tea.Model {
    endTime?: number;
    leaveCode?: string;
    quotaCycle?: string;
    quotaId?: string;
    quotaNumPerDay?: number;
    quotaNumPerHour?: number;
    startTime?: number;
    usedNumPerDay?: number;
    usedNumPerHour?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateRequestPunchParam extends $tea.Model {
    positionId?: string;
    positionName?: string;
    positionType?: string;
    punchTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateResponseBodyResult extends $tea.Model {
    dingtalkApproveId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateResponseBodyResult extends $tea.Model {
    formCode?: string;
    waterMarkId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoRequestScheduleInfos extends $tea.Model {
    planId?: number;
    positionKeys?: string[];
    retainAttendanceCheck?: boolean;
    wifiKeys?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequestLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequestSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequestVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResultLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResultSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResultVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResult extends $tea.Model {
    bizType?: string;
    hoursInPerDay?: number;
    leaveCertificate?: UpdateLeaveTypeResponseBodyResultLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    submitTimeRule?: UpdateLeaveTypeResponseBodyResultSubmitTimeRule;
    visibilityRules?: UpdateLeaveTypeResponseBodyResultVisibilityRules[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResultDurationSettingsValueSkipTimeByFrames extends $tea.Model {
    startTime?: string;
    endTime?: string;
    valid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResultDurationSettingsValueSkipTimeByDurations extends $tea.Model {
    duration?: number;
    minus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    addLeaveType(request: AddLeaveTypeRequest): Promise<AddLeaveTypeResponse>;
    addLeaveTypeWithOptions(request: AddLeaveTypeRequest, headers: AddLeaveTypeHeaders, runtime: $Util.RuntimeOptions): Promise<AddLeaveTypeResponse>;
    attendanceBleDevicesAdd(request: AttendanceBleDevicesAddRequest): Promise<AttendanceBleDevicesAddResponse>;
    attendanceBleDevicesAddWithOptions(request: AttendanceBleDevicesAddRequest, headers: AttendanceBleDevicesAddHeaders, runtime: $Util.RuntimeOptions): Promise<AttendanceBleDevicesAddResponse>;
    attendanceBleDevicesQuery(request: AttendanceBleDevicesQueryRequest): Promise<AttendanceBleDevicesQueryResponse>;
    attendanceBleDevicesQueryWithOptions(request: AttendanceBleDevicesQueryRequest, headers: AttendanceBleDevicesQueryHeaders, runtime: $Util.RuntimeOptions): Promise<AttendanceBleDevicesQueryResponse>;
    attendanceBleDevicesRemove(request: AttendanceBleDevicesRemoveRequest): Promise<AttendanceBleDevicesRemoveResponse>;
    attendanceBleDevicesRemoveWithOptions(request: AttendanceBleDevicesRemoveRequest, headers: AttendanceBleDevicesRemoveHeaders, runtime: $Util.RuntimeOptions): Promise<AttendanceBleDevicesRemoveResponse>;
    checkClosingAccount(request: CheckClosingAccountRequest): Promise<CheckClosingAccountResponse>;
    checkClosingAccountWithOptions(request: CheckClosingAccountRequest, headers: CheckClosingAccountHeaders, runtime: $Util.RuntimeOptions): Promise<CheckClosingAccountResponse>;
    checkWritePermission(request: CheckWritePermissionRequest): Promise<CheckWritePermissionResponse>;
    checkWritePermissionWithOptions(request: CheckWritePermissionRequest, headers: CheckWritePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<CheckWritePermissionResponse>;
    createApprove(request: CreateApproveRequest): Promise<CreateApproveResponse>;
    createApproveWithOptions(request: CreateApproveRequest, headers: CreateApproveHeaders, runtime: $Util.RuntimeOptions): Promise<CreateApproveResponse>;
    deleteWaterMarkTemplate(request: DeleteWaterMarkTemplateRequest): Promise<DeleteWaterMarkTemplateResponse>;
    deleteWaterMarkTemplateWithOptions(request: DeleteWaterMarkTemplateRequest, headers: DeleteWaterMarkTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWaterMarkTemplateResponse>;
    dingTalkSecurityCheck(request: DingTalkSecurityCheckRequest): Promise<DingTalkSecurityCheckResponse>;
    dingTalkSecurityCheckWithOptions(request: DingTalkSecurityCheckRequest, headers: DingTalkSecurityCheckHeaders, runtime: $Util.RuntimeOptions): Promise<DingTalkSecurityCheckResponse>;
    getAdjustments(request: GetAdjustmentsRequest): Promise<GetAdjustmentsResponse>;
    getAdjustmentsWithOptions(request: GetAdjustmentsRequest, headers: GetAdjustmentsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAdjustmentsResponse>;
    getCheckInSchemaTemplate(request: GetCheckInSchemaTemplateRequest): Promise<GetCheckInSchemaTemplateResponse>;
    getCheckInSchemaTemplateWithOptions(request: GetCheckInSchemaTemplateRequest, headers: GetCheckInSchemaTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<GetCheckInSchemaTemplateResponse>;
    getClosingAccounts(request: GetClosingAccountsRequest): Promise<GetClosingAccountsResponse>;
    getClosingAccountsWithOptions(request: GetClosingAccountsRequest, headers: GetClosingAccountsHeaders, runtime: $Util.RuntimeOptions): Promise<GetClosingAccountsResponse>;
    getLeaveType(request: GetLeaveTypeRequest): Promise<GetLeaveTypeResponse>;
    getLeaveTypeWithOptions(request: GetLeaveTypeRequest, headers: GetLeaveTypeHeaders, runtime: $Util.RuntimeOptions): Promise<GetLeaveTypeResponse>;
    getMachine(devId: string): Promise<GetMachineResponse>;
    getMachineWithOptions(devId: string, headers: GetMachineHeaders, runtime: $Util.RuntimeOptions): Promise<GetMachineResponse>;
    getMachineUser(devId: string, request: GetMachineUserRequest): Promise<GetMachineUserResponse>;
    getMachineUserWithOptions(devId: string, request: GetMachineUserRequest, headers: GetMachineUserHeaders, runtime: $Util.RuntimeOptions): Promise<GetMachineUserResponse>;
    getOvertimeSetting(request: GetOvertimeSettingRequest): Promise<GetOvertimeSettingResponse>;
    getOvertimeSettingWithOptions(request: GetOvertimeSettingRequest, headers: GetOvertimeSettingHeaders, runtime: $Util.RuntimeOptions): Promise<GetOvertimeSettingResponse>;
    getSimpleOvertimeSetting(request: GetSimpleOvertimeSettingRequest): Promise<GetSimpleOvertimeSettingResponse>;
    getSimpleOvertimeSettingWithOptions(request: GetSimpleOvertimeSettingRequest, headers: GetSimpleOvertimeSettingHeaders, runtime: $Util.RuntimeOptions): Promise<GetSimpleOvertimeSettingResponse>;
    getUserHolidays(request: GetUserHolidaysRequest): Promise<GetUserHolidaysResponse>;
    getUserHolidaysWithOptions(request: GetUserHolidaysRequest, headers: GetUserHolidaysHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserHolidaysResponse>;
    initAndGetLeaveALlocationQuotas(request: InitAndGetLeaveALlocationQuotasRequest): Promise<InitAndGetLeaveALlocationQuotasResponse>;
    initAndGetLeaveALlocationQuotasWithOptions(request: InitAndGetLeaveALlocationQuotasRequest, headers: InitAndGetLeaveALlocationQuotasHeaders, runtime: $Util.RuntimeOptions): Promise<InitAndGetLeaveALlocationQuotasResponse>;
    modifyWaterMarkTemplate(request: ModifyWaterMarkTemplateRequest): Promise<ModifyWaterMarkTemplateResponse>;
    modifyWaterMarkTemplateWithOptions(request: ModifyWaterMarkTemplateRequest, headers: ModifyWaterMarkTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<ModifyWaterMarkTemplateResponse>;
    processApproveCreate(request: ProcessApproveCreateRequest): Promise<ProcessApproveCreateResponse>;
    processApproveCreateWithOptions(request: ProcessApproveCreateRequest, headers: ProcessApproveCreateHeaders, runtime: $Util.RuntimeOptions): Promise<ProcessApproveCreateResponse>;
    saveCustomWaterMarkTemplate(request: SaveCustomWaterMarkTemplateRequest): Promise<SaveCustomWaterMarkTemplateResponse>;
    saveCustomWaterMarkTemplateWithOptions(request: SaveCustomWaterMarkTemplateRequest, headers: SaveCustomWaterMarkTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<SaveCustomWaterMarkTemplateResponse>;
    syncScheduleInfo(request: SyncScheduleInfoRequest): Promise<SyncScheduleInfoResponse>;
    syncScheduleInfoWithOptions(request: SyncScheduleInfoRequest, headers: SyncScheduleInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SyncScheduleInfoResponse>;
    updateLeaveType(request: UpdateLeaveTypeRequest): Promise<UpdateLeaveTypeResponse>;
    updateLeaveTypeWithOptions(request: UpdateLeaveTypeRequest, headers: UpdateLeaveTypeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateLeaveTypeResponse>;
}
