"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BatchRegisterDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchRegisterDeviceHeaders = BatchRegisterDeviceHeaders;
class BatchRegisterDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceList: 'deviceList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deviceList: { 'type': 'array', 'itemType': BatchRegisterDeviceRequestDeviceList },
            userId: 'string',
        };
    }
}
exports.BatchRegisterDeviceRequest = BatchRegisterDeviceRequest;
class BatchRegisterDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.BatchRegisterDeviceResponseBody = BatchRegisterDeviceResponseBody;
class BatchRegisterDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchRegisterDeviceResponseBody,
        };
    }
}
exports.BatchRegisterDeviceResponse = BatchRegisterDeviceResponse;
class CreateChatRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateChatRoomHeaders = CreateChatRoomHeaders;
class CreateChatRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatGroupName: 'chatGroupName',
            deviceCodes: 'deviceCodes',
            deviceTypeId: 'deviceTypeId',
            ownerUserId: 'ownerUserId',
            roleList: 'roleList',
        };
    }
    static types() {
        return {
            chatGroupName: 'string',
            deviceCodes: { 'type': 'array', 'itemType': 'string' },
            deviceTypeId: 'string',
            ownerUserId: 'string',
            roleList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateChatRoomRequest = CreateChatRoomRequest;
class CreateChatRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateChatRoomResponseBody = CreateChatRoomResponseBody;
class CreateChatRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateChatRoomResponseBody,
        };
    }
}
exports.CreateChatRoomResponse = CreateChatRoomResponse;
class CreateDepartmentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateDepartmentHeaders = CreateDepartmentHeaders;
class CreateDepartmentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authInfo: 'authInfo',
            authType: 'authType',
            bizExt: 'bizExt',
            departmentName: 'departmentName',
            departmentType: 'departmentType',
            description: 'description',
            systemUrl: 'systemUrl',
            userId: 'userId',
        };
    }
    static types() {
        return {
            authInfo: 'string',
            authType: 'string',
            bizExt: 'string',
            departmentName: 'string',
            departmentType: 'string',
            description: 'string',
            systemUrl: 'string',
            userId: 'string',
        };
    }
}
exports.CreateDepartmentRequest = CreateDepartmentRequest;
class CreateDepartmentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.CreateDepartmentResponseBody = CreateDepartmentResponseBody;
class CreateDepartmentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateDepartmentResponseBody,
        };
    }
}
exports.CreateDepartmentResponse = CreateDepartmentResponse;
class CreateDeviceChatRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateDeviceChatRoomHeaders = CreateDeviceChatRoomHeaders;
class CreateDeviceChatRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatType: 'chatType',
            deviceCodes: 'deviceCodes',
            deviceUuids: 'deviceUuids',
            ownerUserId: 'ownerUserId',
            title: 'title',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            chatType: 'string',
            deviceCodes: { 'type': 'array', 'itemType': 'string' },
            deviceUuids: { 'type': 'array', 'itemType': 'string' },
            ownerUserId: 'string',
            title: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateDeviceChatRoomRequest = CreateDeviceChatRoomRequest;
class CreateDeviceChatRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateDeviceChatRoomResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.CreateDeviceChatRoomResponseBody = CreateDeviceChatRoomResponseBody;
class CreateDeviceChatRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateDeviceChatRoomResponseBody,
        };
    }
}
exports.CreateDeviceChatRoomResponse = CreateDeviceChatRoomResponse;
class DeviceDingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeviceDingHeaders = DeviceDingHeaders;
class DeviceDingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceKey: 'deviceKey',
            paramsJson: 'paramsJson',
            receiverUserIdList: 'receiverUserIdList',
        };
    }
    static types() {
        return {
            deviceKey: 'string',
            paramsJson: 'string',
            receiverUserIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeviceDingRequest = DeviceDingRequest;
class DeviceDingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.DeviceDingResponseBody = DeviceDingResponseBody;
class DeviceDingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeviceDingResponseBody,
        };
    }
}
exports.DeviceDingResponse = DeviceDingResponse;
class DissolveGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DissolveGroupHeaders = DissolveGroupHeaders;
class DissolveGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.DissolveGroupRequest = DissolveGroupRequest;
class DissolveGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.DissolveGroupResponseBody = DissolveGroupResponseBody;
class DissolveGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DissolveGroupResponseBody,
        };
    }
}
exports.DissolveGroupResponse = DissolveGroupResponse;
class EditDeviceAdminHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.EditDeviceAdminHeaders = EditDeviceAdminHeaders;
class EditDeviceAdminRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCode: 'deviceCode',
            roleUuid: 'roleUuid',
            userIds: 'userIds',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            deviceCode: 'string',
            roleUuid: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
            uuid: 'string',
        };
    }
}
exports.EditDeviceAdminRequest = EditDeviceAdminRequest;
class EditDeviceAdminResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.EditDeviceAdminResponseBody = EditDeviceAdminResponseBody;
class EditDeviceAdminResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: EditDeviceAdminResponseBody,
        };
    }
}
exports.EditDeviceAdminResponse = EditDeviceAdminResponse;
class GetDeviceGroupInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDeviceGroupInfoHeaders = GetDeviceGroupInfoHeaders;
class GetDeviceGroupInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.GetDeviceGroupInfoRequest = GetDeviceGroupInfoRequest;
class GetDeviceGroupInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetDeviceGroupInfoResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.GetDeviceGroupInfoResponseBody = GetDeviceGroupInfoResponseBody;
class GetDeviceGroupInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDeviceGroupInfoResponseBody,
        };
    }
}
exports.GetDeviceGroupInfoResponse = GetDeviceGroupInfoResponse;
class GetWholeDeviceGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetWholeDeviceGroupHeaders = GetWholeDeviceGroupHeaders;
class GetWholeDeviceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.GetWholeDeviceGroupResponseBody = GetWholeDeviceGroupResponseBody;
class GetWholeDeviceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetWholeDeviceGroupResponseBody,
        };
    }
}
exports.GetWholeDeviceGroupResponse = GetWholeDeviceGroupResponse;
class ListActivateDevicesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListActivateDevicesHeaders = ListActivateDevicesHeaders;
class ListActivateDevicesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCategory: 'deviceCategory',
            deviceCode: 'deviceCode',
            deviceTypeId: 'deviceTypeId',
            groupId: 'groupId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            deviceCategory: 'number',
            deviceCode: 'string',
            deviceTypeId: 'string',
            groupId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListActivateDevicesRequest = ListActivateDevicesRequest;
class ListActivateDevicesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ListActivateDevicesResponseBodyResult },
            success: 'boolean',
            totalCount: 'number',
        };
    }
}
exports.ListActivateDevicesResponseBody = ListActivateDevicesResponseBody;
class ListActivateDevicesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListActivateDevicesResponseBody,
        };
    }
}
exports.ListActivateDevicesResponse = ListActivateDevicesResponse;
class PullDeviceToGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PullDeviceToGroupHeaders = PullDeviceToGroupHeaders;
class PullDeviceToGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCodes: 'deviceCodes',
            deviceUuids: 'deviceUuids',
            openConversationId: 'openConversationId',
            operator: 'operator',
        };
    }
    static types() {
        return {
            deviceCodes: { 'type': 'array', 'itemType': 'string' },
            deviceUuids: { 'type': 'array', 'itemType': 'string' },
            openConversationId: 'string',
            operator: 'string',
        };
    }
}
exports.PullDeviceToGroupRequest = PullDeviceToGroupRequest;
class PullDeviceToGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.PullDeviceToGroupResponseBody = PullDeviceToGroupResponseBody;
class PullDeviceToGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PullDeviceToGroupResponseBody,
        };
    }
}
exports.PullDeviceToGroupResponse = PullDeviceToGroupResponse;
class PullUserToGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PullUserToGroupHeaders = PullUserToGroupHeaders;
class PullUserToGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.PullUserToGroupRequest = PullUserToGroupRequest;
class PullUserToGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.PullUserToGroupResponseBody = PullUserToGroupResponseBody;
class PullUserToGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PullUserToGroupResponseBody,
        };
    }
}
exports.PullUserToGroupResponse = PullUserToGroupResponse;
class RegisterAndActivateDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RegisterAndActivateDeviceHeaders = RegisterAndActivateDeviceHeaders;
class RegisterAndActivateDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCallbackUrl: 'deviceCallbackUrl',
            deviceCategory: 'deviceCategory',
            deviceCode: 'deviceCode',
            deviceDetailUrl: 'deviceDetailUrl',
            deviceName: 'deviceName',
            introduction: 'introduction',
            roleUuid: 'roleUuid',
            typeUuid: 'typeUuid',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deviceCallbackUrl: 'string',
            deviceCategory: 'number',
            deviceCode: 'string',
            deviceDetailUrl: 'string',
            deviceName: 'string',
            introduction: 'string',
            roleUuid: 'string',
            typeUuid: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RegisterAndActivateDeviceRequest = RegisterAndActivateDeviceRequest;
class RegisterAndActivateDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: RegisterAndActivateDeviceResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.RegisterAndActivateDeviceResponseBody = RegisterAndActivateDeviceResponseBody;
class RegisterAndActivateDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RegisterAndActivateDeviceResponseBody,
        };
    }
}
exports.RegisterAndActivateDeviceResponse = RegisterAndActivateDeviceResponse;
class RegisterAndActivateDeviceBatchHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RegisterAndActivateDeviceBatchHeaders = RegisterAndActivateDeviceBatchHeaders;
class RegisterAndActivateDeviceBatchRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            registerAndActivateVOS: 'registerAndActivateVOS',
        };
    }
    static types() {
        return {
            registerAndActivateVOS: { 'type': 'array', 'itemType': RegisterAndActivateDeviceBatchRequestRegisterAndActivateVOS },
        };
    }
}
exports.RegisterAndActivateDeviceBatchRequest = RegisterAndActivateDeviceBatchRequest;
class RegisterAndActivateDeviceBatchResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failItems: 'failItems',
            success: 'success',
            successItems: 'successItems',
        };
    }
    static types() {
        return {
            failItems: { 'type': 'array', 'itemType': RegisterAndActivateDeviceBatchResponseBodyFailItems },
            success: 'boolean',
            successItems: { 'type': 'array', 'itemType': RegisterAndActivateDeviceBatchResponseBodySuccessItems },
        };
    }
}
exports.RegisterAndActivateDeviceBatchResponseBody = RegisterAndActivateDeviceBatchResponseBody;
class RegisterAndActivateDeviceBatchResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RegisterAndActivateDeviceBatchResponseBody,
        };
    }
}
exports.RegisterAndActivateDeviceBatchResponse = RegisterAndActivateDeviceBatchResponse;
class RegisterDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RegisterDeviceHeaders = RegisterDeviceHeaders;
class RegisterDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            collaborators: 'collaborators',
            departmentId: 'departmentId',
            description: 'description',
            deviceKey: 'deviceKey',
            deviceName: 'deviceName',
            managers: 'managers',
            userId: 'userId',
        };
    }
    static types() {
        return {
            collaborators: 'string',
            departmentId: 'number',
            description: 'string',
            deviceKey: 'string',
            deviceName: 'string',
            managers: 'string',
            userId: 'string',
        };
    }
}
exports.RegisterDeviceRequest = RegisterDeviceRequest;
class RegisterDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.RegisterDeviceResponseBody = RegisterDeviceResponseBody;
class RegisterDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RegisterDeviceResponseBody,
        };
    }
}
exports.RegisterDeviceResponse = RegisterDeviceResponse;
class RemoveDeviceFromGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveDeviceFromGroupHeaders = RemoveDeviceFromGroupHeaders;
class RemoveDeviceFromGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCodes: 'deviceCodes',
            deviceUuids: 'deviceUuids',
            openConversationId: 'openConversationId',
            operator: 'operator',
        };
    }
    static types() {
        return {
            deviceCodes: { 'type': 'array', 'itemType': 'string' },
            deviceUuids: { 'type': 'array', 'itemType': 'string' },
            openConversationId: 'string',
            operator: 'string',
        };
    }
}
exports.RemoveDeviceFromGroupRequest = RemoveDeviceFromGroupRequest;
class RemoveDeviceFromGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.RemoveDeviceFromGroupResponseBody = RemoveDeviceFromGroupResponseBody;
class RemoveDeviceFromGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RemoveDeviceFromGroupResponseBody,
        };
    }
}
exports.RemoveDeviceFromGroupResponse = RemoveDeviceFromGroupResponse;
class RemoveUserFromGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveUserFromGroupHeaders = RemoveUserFromGroupHeaders;
class RemoveUserFromGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RemoveUserFromGroupRequest = RemoveUserFromGroupRequest;
class RemoveUserFromGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.RemoveUserFromGroupResponseBody = RemoveUserFromGroupResponseBody;
class RemoveUserFromGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RemoveUserFromGroupResponseBody,
        };
    }
}
exports.RemoveUserFromGroupResponse = RemoveUserFromGroupResponse;
class SendCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendCardHeaders = SendCardHeaders;
class SendCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'bizId',
            cardData: 'cardData',
            deviceCode: 'deviceCode',
            deviceUuid: 'deviceUuid',
            openConversationId: 'openConversationId',
            templateId: 'templateId',
            topbox: 'topbox',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            cardData: 'string',
            deviceCode: 'string',
            deviceUuid: 'string',
            openConversationId: 'string',
            templateId: 'string',
            topbox: 'boolean',
            userId: 'string',
        };
    }
}
exports.SendCardRequest = SendCardRequest;
class SendCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.SendCardResponseBody = SendCardResponseBody;
class SendCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SendCardResponseBody,
        };
    }
}
exports.SendCardResponse = SendCardResponse;
class SendMsgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendMsgHeaders = SendMsgHeaders;
class SendMsgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            deviceCode: 'deviceCode',
            deviceUuid: 'deviceUuid',
            openConversationId: 'openConversationId',
            userList: 'userList',
        };
    }
    static types() {
        return {
            content: 'string',
            deviceCode: 'string',
            deviceUuid: 'string',
            openConversationId: 'string',
            userList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.SendMsgRequest = SendMsgRequest;
class SendMsgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.SendMsgResponseBody = SendMsgResponseBody;
class SendMsgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SendMsgResponseBody,
        };
    }
}
exports.SendMsgResponse = SendMsgResponse;
class UninstallDeviceRobotHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UninstallDeviceRobotHeaders = UninstallDeviceRobotHeaders;
class UninstallDeviceRobotRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCode: 'deviceCode',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            deviceCode: 'string',
            uuid: 'string',
        };
    }
}
exports.UninstallDeviceRobotRequest = UninstallDeviceRobotRequest;
class UninstallDeviceRobotResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.UninstallDeviceRobotResponseBody = UninstallDeviceRobotResponseBody;
class UninstallDeviceRobotResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UninstallDeviceRobotResponseBody,
        };
    }
}
exports.UninstallDeviceRobotResponse = UninstallDeviceRobotResponse;
class UpdateCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateCardHeaders = UpdateCardHeaders;
class UpdateCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'bizId',
            cardData: 'cardData',
        };
    }
    static types() {
        return {
            bizId: 'string',
            cardData: 'string',
        };
    }
}
exports.UpdateCardRequest = UpdateCardRequest;
class UpdateCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateCardResponseBody = UpdateCardResponseBody;
class UpdateCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateCardResponseBody,
        };
    }
}
exports.UpdateCardResponse = UpdateCardResponse;
class UploadEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UploadEventHeaders = UploadEventHeaders;
class UploadEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            coverUrl: 'coverUrl',
            deviceCode: 'deviceCode',
            deviceUuid: 'deviceUuid',
            eventTime: 'eventTime',
            eventType: 'eventType',
            level: 'level',
        };
    }
    static types() {
        return {
            content: 'string',
            coverUrl: 'string',
            deviceCode: 'string',
            deviceUuid: 'string',
            eventTime: 'string',
            eventType: 'string',
            level: 'string',
        };
    }
}
exports.UploadEventRequest = UploadEventRequest;
class UploadEventResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.UploadEventResponseBody = UploadEventResponseBody;
class UploadEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UploadEventResponseBody,
        };
    }
}
exports.UploadEventResponse = UploadEventResponse;
class BatchRegisterDeviceRequestDeviceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            collaborators: 'collaborators',
            departmentId: 'departmentId',
            description: 'description',
            deviceKey: 'deviceKey',
            deviceName: 'deviceName',
            managers: 'managers',
        };
    }
    static types() {
        return {
            collaborators: 'string',
            departmentId: 'number',
            description: 'string',
            deviceKey: 'string',
            deviceName: 'string',
            managers: 'string',
        };
    }
}
exports.BatchRegisterDeviceRequestDeviceList = BatchRegisterDeviceRequestDeviceList;
class CreateDeviceChatRoomResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatId: 'chatId',
            encodedCid: 'encodedCid',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            chatId: 'string',
            encodedCid: 'string',
            openConversationId: 'string',
        };
    }
}
exports.CreateDeviceChatRoomResponseBodyResult = CreateDeviceChatRoomResponseBodyResult;
class GetDeviceGroupInfoResponseBodyResultDevices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCode: 'deviceCode',
            deviceName: 'deviceName',
            deviceUuid: 'deviceUuid',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            deviceCode: 'string',
            deviceName: 'string',
            deviceUuid: 'string',
            uuid: 'string',
        };
    }
}
exports.GetDeviceGroupInfoResponseBodyResultDevices = GetDeviceGroupInfoResponseBodyResultDevices;
class GetDeviceGroupInfoResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            devices: 'devices',
            ownerUser: 'ownerUser',
            subAdminUsers: 'subAdminUsers',
            title: 'title',
            users: 'users',
        };
    }
    static types() {
        return {
            devices: { 'type': 'array', 'itemType': GetDeviceGroupInfoResponseBodyResultDevices },
            ownerUser: 'string',
            subAdminUsers: { 'type': 'array', 'itemType': 'string' },
            title: 'string',
            users: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.GetDeviceGroupInfoResponseBodyResult = GetDeviceGroupInfoResponseBodyResult;
class ListActivateDevicesResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizExt: 'bizExt',
            deviceCallbackUrl: 'deviceCallbackUrl',
            deviceCategory: 'deviceCategory',
            deviceCode: 'deviceCode',
            deviceDetailUrl: 'deviceDetailUrl',
            deviceName: 'deviceName',
            groupUuid: 'groupUuid',
            icon: 'icon',
            introduction: 'introduction',
            typeUuid: 'typeUuid',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            bizExt: 'string',
            deviceCallbackUrl: 'string',
            deviceCategory: 'number',
            deviceCode: 'string',
            deviceDetailUrl: 'string',
            deviceName: 'string',
            groupUuid: 'string',
            icon: 'string',
            introduction: 'string',
            typeUuid: 'string',
            uuid: 'string',
        };
    }
}
exports.ListActivateDevicesResponseBodyResult = ListActivateDevicesResponseBodyResult;
class RegisterAndActivateDeviceResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCategory: 'deviceCategory',
            deviceCode: 'deviceCode',
            deviceDetailUrl: 'deviceDetailUrl',
            deviceName: 'deviceName',
            deviceUuid: 'deviceUuid',
            introduction: 'introduction',
            roleUuid: 'roleUuid',
            typeUuid: 'typeUuid',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deviceCategory: 'number',
            deviceCode: 'string',
            deviceDetailUrl: 'string',
            deviceName: 'string',
            deviceUuid: 'string',
            introduction: 'string',
            roleUuid: 'string',
            typeUuid: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RegisterAndActivateDeviceResponseBodyResult = RegisterAndActivateDeviceResponseBodyResult;
class RegisterAndActivateDeviceBatchRequestRegisterAndActivateVOS extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCallbackUrl: 'deviceCallbackUrl',
            deviceCategory: 'deviceCategory',
            deviceCode: 'deviceCode',
            deviceDetailUrl: 'deviceDetailUrl',
            deviceName: 'deviceName',
            groupUuid: 'groupUuid',
            introduction: 'introduction',
            roleUuid: 'roleUuid',
            typeUuid: 'typeUuid',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deviceCallbackUrl: 'string',
            deviceCategory: 'number',
            deviceCode: 'string',
            deviceDetailUrl: 'string',
            deviceName: 'string',
            groupUuid: 'string',
            introduction: 'string',
            roleUuid: 'string',
            typeUuid: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RegisterAndActivateDeviceBatchRequestRegisterAndActivateVOS = RegisterAndActivateDeviceBatchRequestRegisterAndActivateVOS;
class RegisterAndActivateDeviceBatchResponseBodyFailItemsResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCallbackUrl: 'deviceCallbackUrl',
            deviceCategory: 'deviceCategory',
            deviceCode: 'deviceCode',
            deviceDetailUrl: 'deviceDetailUrl',
            deviceName: 'deviceName',
            groupUuid: 'groupUuid',
            icon: 'icon',
            introduction: 'introduction',
            roleUuid: 'roleUuid',
            status: 'status',
            typeUuid: 'typeUuid',
            userIds: 'userIds',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            deviceCallbackUrl: 'string',
            deviceCategory: 'number',
            deviceCode: 'string',
            deviceDetailUrl: 'string',
            deviceName: 'string',
            groupUuid: 'string',
            icon: 'string',
            introduction: 'string',
            roleUuid: 'string',
            status: 'number',
            typeUuid: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
            uuid: 'string',
        };
    }
}
exports.RegisterAndActivateDeviceBatchResponseBodyFailItemsResult = RegisterAndActivateDeviceBatchResponseBodyFailItemsResult;
class RegisterAndActivateDeviceBatchResponseBodyFailItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            errorCode: 'string',
            errorMsg: 'string',
            result: RegisterAndActivateDeviceBatchResponseBodyFailItemsResult,
            success: 'boolean',
        };
    }
}
exports.RegisterAndActivateDeviceBatchResponseBodyFailItems = RegisterAndActivateDeviceBatchResponseBodyFailItems;
class RegisterAndActivateDeviceBatchResponseBodySuccessItemsResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCallbackUrl: 'deviceCallbackUrl',
            deviceCategory: 'deviceCategory',
            deviceCode: 'deviceCode',
            deviceDetailUrl: 'deviceDetailUrl',
            deviceName: 'deviceName',
            groupUuid: 'groupUuid',
            icon: 'icon',
            introduction: 'introduction',
            roleUuid: 'roleUuid',
            status: 'status',
            typeUuid: 'typeUuid',
            userIds: 'userIds',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            deviceCallbackUrl: 'string',
            deviceCategory: 'number',
            deviceCode: 'string',
            deviceDetailUrl: 'string',
            deviceName: 'string',
            groupUuid: 'string',
            icon: 'string',
            introduction: 'string',
            roleUuid: 'string',
            status: 'number',
            typeUuid: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
            uuid: 'string',
        };
    }
}
exports.RegisterAndActivateDeviceBatchResponseBodySuccessItemsResult = RegisterAndActivateDeviceBatchResponseBodySuccessItemsResult;
class RegisterAndActivateDeviceBatchResponseBodySuccessItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            errorCode: 'string',
            errorMsg: 'string',
            result: RegisterAndActivateDeviceBatchResponseBodySuccessItemsResult,
            success: 'boolean',
        };
    }
}
exports.RegisterAndActivateDeviceBatchResponseBodySuccessItems = RegisterAndActivateDeviceBatchResponseBodySuccessItems;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async batchRegisterDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchRegisterDeviceHeaders({});
        return await this.batchRegisterDeviceWithOptions(request, headers, runtime);
    }
    async batchRegisterDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceList)) {
            body["deviceList"] = request.deviceList;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("BatchRegisterDevice", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/devices/batch`, "json", req, runtime), new BatchRegisterDeviceResponse({}));
    }
    async createChatRoom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateChatRoomHeaders({});
        return await this.createChatRoomWithOptions(request, headers, runtime);
    }
    async createChatRoomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.chatGroupName)) {
            body["chatGroupName"] = request.chatGroupName;
        }
        if (!tea_util_1.default.isUnset(request.deviceCodes)) {
            body["deviceCodes"] = request.deviceCodes;
        }
        if (!tea_util_1.default.isUnset(request.deviceTypeId)) {
            body["deviceTypeId"] = request.deviceTypeId;
        }
        if (!tea_util_1.default.isUnset(request.ownerUserId)) {
            body["ownerUserId"] = request.ownerUserId;
        }
        if (!tea_util_1.default.isUnset(request.roleList)) {
            body["roleList"] = request.roleList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateChatRoom", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRoom`, "json", req, runtime), new CreateChatRoomResponse({}));
    }
    async createDepartment(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateDepartmentHeaders({});
        return await this.createDepartmentWithOptions(request, headers, runtime);
    }
    async createDepartmentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.authInfo)) {
            body["authInfo"] = request.authInfo;
        }
        if (!tea_util_1.default.isUnset(request.authType)) {
            body["authType"] = request.authType;
        }
        if (!tea_util_1.default.isUnset(request.bizExt)) {
            body["bizExt"] = request.bizExt;
        }
        if (!tea_util_1.default.isUnset(request.departmentName)) {
            body["departmentName"] = request.departmentName;
        }
        if (!tea_util_1.default.isUnset(request.departmentType)) {
            body["departmentType"] = request.departmentType;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.systemUrl)) {
            body["systemUrl"] = request.systemUrl;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateDepartment", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/departments`, "json", req, runtime), new CreateDepartmentResponse({}));
    }
    async createDeviceChatRoom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateDeviceChatRoomHeaders({});
        return await this.createDeviceChatRoomWithOptions(request, headers, runtime);
    }
    async createDeviceChatRoomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.chatType)) {
            body["chatType"] = request.chatType;
        }
        if (!tea_util_1.default.isUnset(request.deviceCodes)) {
            body["deviceCodes"] = request.deviceCodes;
        }
        if (!tea_util_1.default.isUnset(request.deviceUuids)) {
            body["deviceUuids"] = request.deviceUuids;
        }
        if (!tea_util_1.default.isUnset(request.ownerUserId)) {
            body["ownerUserId"] = request.ownerUserId;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateDeviceChatRoom", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRooms/groups`, "json", req, runtime), new CreateDeviceChatRoomResponse({}));
    }
    async deviceDing(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeviceDingHeaders({});
        return await this.deviceDingWithOptions(request, headers, runtime);
    }
    async deviceDingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceKey)) {
            body["deviceKey"] = request.deviceKey;
        }
        if (!tea_util_1.default.isUnset(request.paramsJson)) {
            body["paramsJson"] = request.paramsJson;
        }
        if (!tea_util_1.default.isUnset(request.receiverUserIdList)) {
            body["receiverUserIdList"] = request.receiverUserIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("DeviceDing", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/ding`, "json", req, runtime), new DeviceDingResponse({}));
    }
    async dissolveGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DissolveGroupHeaders({});
        return await this.dissolveGroupWithOptions(request, headers, runtime);
    }
    async dissolveGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("DissolveGroup", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRooms/groups/dissolve`, "json", req, runtime), new DissolveGroupResponse({}));
    }
    async editDeviceAdmin(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditDeviceAdminHeaders({});
        return await this.editDeviceAdminWithOptions(request, headers, runtime);
    }
    async editDeviceAdminWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            body["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.roleUuid)) {
            body["roleUuid"] = request.roleUuid;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("EditDeviceAdmin", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/devices/administrators/edit`, "json", req, runtime), new EditDeviceAdminResponse({}));
    }
    async getDeviceGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDeviceGroupInfoHeaders({});
        return await this.getDeviceGroupInfoWithOptions(request, headers, runtime);
    }
    async getDeviceGroupInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("GetDeviceGroupInfo", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRooms/groupInfos/query`, "json", req, runtime), new GetDeviceGroupInfoResponse({}));
    }
    async getWholeDeviceGroup() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetWholeDeviceGroupHeaders({});
        return await this.getWholeDeviceGroupWithOptions(headers, runtime);
    }
    async getWholeDeviceGroupWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetWholeDeviceGroup", "devicemng_1.0", "HTTP", "GET", "AK", `/v1.0/devicemng/customers/chatRooms/wholeGroupId`, "json", req, runtime), new GetWholeDeviceGroupResponse({}));
    }
    async listActivateDevices(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListActivateDevicesHeaders({});
        return await this.listActivateDevicesWithOptions(request, headers, runtime);
    }
    async listActivateDevicesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceCategory)) {
            query["deviceCategory"] = request.deviceCategory;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            query["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceTypeId)) {
            query["deviceTypeId"] = request.deviceTypeId;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["groupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListActivateDevices", "devicemng_1.0", "HTTP", "GET", "AK", `/v1.0/devicemng/customers/devices/activations/infos`, "json", req, runtime), new ListActivateDevicesResponse({}));
    }
    async pullDeviceToGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PullDeviceToGroupHeaders({});
        return await this.pullDeviceToGroupWithOptions(request, headers, runtime);
    }
    async pullDeviceToGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceCodes)) {
            body["deviceCodes"] = request.deviceCodes;
        }
        if (!tea_util_1.default.isUnset(request.deviceUuids)) {
            body["deviceUuids"] = request.deviceUuids;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("PullDeviceToGroup", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRooms/devices`, "json", req, runtime), new PullDeviceToGroupResponse({}));
    }
    async pullUserToGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PullUserToGroupHeaders({});
        return await this.pullUserToGroupWithOptions(request, headers, runtime);
    }
    async pullUserToGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("PullUserToGroup", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRooms/users`, "json", req, runtime), new PullUserToGroupResponse({}));
    }
    async registerAndActivateDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterAndActivateDeviceHeaders({});
        return await this.registerAndActivateDeviceWithOptions(request, headers, runtime);
    }
    async registerAndActivateDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceCallbackUrl)) {
            body["deviceCallbackUrl"] = request.deviceCallbackUrl;
        }
        if (!tea_util_1.default.isUnset(request.deviceCategory)) {
            body["deviceCategory"] = request.deviceCategory;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            body["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceDetailUrl)) {
            body["deviceDetailUrl"] = request.deviceDetailUrl;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            body["deviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.introduction)) {
            body["introduction"] = request.introduction;
        }
        if (!tea_util_1.default.isUnset(request.roleUuid)) {
            body["roleUuid"] = request.roleUuid;
        }
        if (!tea_util_1.default.isUnset(request.typeUuid)) {
            body["typeUuid"] = request.typeUuid;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("RegisterAndActivateDevice", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/devices/registerAndActivate`, "json", req, runtime), new RegisterAndActivateDeviceResponse({}));
    }
    async registerAndActivateDeviceBatch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterAndActivateDeviceBatchHeaders({});
        return await this.registerAndActivateDeviceBatchWithOptions(request, headers, runtime);
    }
    async registerAndActivateDeviceBatchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.registerAndActivateVOS)) {
            body["registerAndActivateVOS"] = request.registerAndActivateVOS;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("RegisterAndActivateDeviceBatch", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/devices/registrationActivations/batch`, "json", req, runtime), new RegisterAndActivateDeviceBatchResponse({}));
    }
    async registerDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterDeviceHeaders({});
        return await this.registerDeviceWithOptions(request, headers, runtime);
    }
    async registerDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.collaborators)) {
            body["collaborators"] = request.collaborators;
        }
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            body["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.deviceKey)) {
            body["deviceKey"] = request.deviceKey;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            body["deviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.managers)) {
            body["managers"] = request.managers;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("RegisterDevice", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/devices`, "json", req, runtime), new RegisterDeviceResponse({}));
    }
    async removeDeviceFromGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveDeviceFromGroupHeaders({});
        return await this.removeDeviceFromGroupWithOptions(request, headers, runtime);
    }
    async removeDeviceFromGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceCodes)) {
            body["deviceCodes"] = request.deviceCodes;
        }
        if (!tea_util_1.default.isUnset(request.deviceUuids)) {
            body["deviceUuids"] = request.deviceUuids;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("RemoveDeviceFromGroup", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRooms/devices/remove`, "json", req, runtime), new RemoveDeviceFromGroupResponse({}));
    }
    async removeUserFromGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveUserFromGroupHeaders({});
        return await this.removeUserFromGroupWithOptions(request, headers, runtime);
    }
    async removeUserFromGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("RemoveUserFromGroup", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/chatRooms/users/remove`, "json", req, runtime), new RemoveUserFromGroupResponse({}));
    }
    async sendCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendCardHeaders({});
        return await this.sendCardWithOptions(request, headers, runtime);
    }
    async sendCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            body["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceUuid)) {
            body["deviceUuid"] = request.deviceUuid;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.topbox)) {
            body["topbox"] = request.topbox;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SendCard", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/cards/send`, "json", req, runtime), new SendCardResponse({}));
    }
    async sendMsg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendMsgHeaders({});
        return await this.sendMsgWithOptions(request, headers, runtime);
    }
    async sendMsgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            body["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceUuid)) {
            body["deviceUuid"] = request.deviceUuid;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userList)) {
            body["userList"] = request.userList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SendMsg", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/messages/send`, "json", req, runtime), new SendMsgResponse({}));
    }
    async uninstallDeviceRobot(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UninstallDeviceRobotHeaders({});
        return await this.uninstallDeviceRobotWithOptions(request, headers, runtime);
    }
    async uninstallDeviceRobotWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            body["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UninstallDeviceRobot", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/customers/devices/uninstall`, "json", req, runtime), new UninstallDeviceRobotResponse({}));
    }
    async updateCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCardHeaders({});
        return await this.updateCardWithOptions(request, headers, runtime);
    }
    async updateCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateCard", "devicemng_1.0", "HTTP", "PUT", "AK", `/v1.0/devicemng/customers/cards`, "json", req, runtime), new UpdateCardResponse({}));
    }
    async uploadEvent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UploadEventHeaders({});
        return await this.uploadEventWithOptions(request, headers, runtime);
    }
    async uploadEventWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.coverUrl)) {
            body["coverUrl"] = request.coverUrl;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            body["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceUuid)) {
            body["deviceUuid"] = request.deviceUuid;
        }
        if (!tea_util_1.default.isUnset(request.eventTime)) {
            body["eventTime"] = request.eventTime;
        }
        if (!tea_util_1.default.isUnset(request.eventType)) {
            body["eventType"] = request.eventType;
        }
        if (!tea_util_1.default.isUnset(request.level)) {
            body["level"] = request.level;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UploadEvent", "devicemng_1.0", "HTTP", "POST", "AK", `/v1.0/devicemng/suppliers/events/upload`, "json", req, runtime), new UploadEventResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map