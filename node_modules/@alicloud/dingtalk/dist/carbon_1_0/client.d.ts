/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetPersonalCarbonInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalCarbonInfoRequest extends $tea.Model {
    actionType?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalCarbonInfoResponseBody extends $tea.Model {
    content?: string;
    personalCarbonAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalCarbonInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetPersonalCarbonInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaOrgCarbonHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaOrgCarbonRequest extends $tea.Model {
    orgDetailsList?: WriteAlibabaOrgCarbonRequestOrgDetailsList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaOrgCarbonResponseBody extends $tea.Model {
    result?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaOrgCarbonResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: WriteAlibabaOrgCarbonResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaUserCarbonHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaUserCarbonRequest extends $tea.Model {
    userDetailsList?: WriteAlibabaUserCarbonRequestUserDetailsList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaUserCarbonResponseBody extends $tea.Model {
    result?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaUserCarbonResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: WriteAlibabaUserCarbonResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteIsvStateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteIsvStateRequest extends $tea.Model {
    isvName?: string;
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteIsvStateResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteIsvStateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: WriteIsvStateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteOrgCarbonHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteOrgCarbonRequest extends $tea.Model {
    orgDetailsList?: WriteOrgCarbonRequestOrgDetailsList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteOrgCarbonResponseBody extends $tea.Model {
    result?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteOrgCarbonResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: WriteOrgCarbonResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteUserCarbonHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteUserCarbonRequest extends $tea.Model {
    userDetailsList?: WriteUserCarbonRequestUserDetailsList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteUserCarbonResponseBody extends $tea.Model {
    result?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteUserCarbonResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: WriteUserCarbonResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaOrgCarbonRequestOrgDetailsList extends $tea.Model {
    actionId?: string;
    actionTime?: string;
    actionType?: string;
    carbonAmount?: string;
    corpId?: string;
    deptId?: number;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteAlibabaUserCarbonRequestUserDetailsList extends $tea.Model {
    actionEndTime?: string;
    actionId?: string;
    actionStartTime?: string;
    actionType?: string;
    carbonAmount?: string;
    corpId?: string;
    deptId?: number;
    userId?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteOrgCarbonRequestOrgDetailsList extends $tea.Model {
    actionId?: string;
    actionTime?: string;
    actionType?: string;
    carbonAmount?: string;
    corpId?: string;
    deptId?: number;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteUserCarbonRequestUserDetailsList extends $tea.Model {
    actionEndTime?: string;
    actionId?: string;
    actionStartTime?: string;
    actionType?: string;
    carbonAmount?: string;
    corpId?: string;
    deptId?: number;
    userId?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getPersonalCarbonInfo(request: GetPersonalCarbonInfoRequest): Promise<GetPersonalCarbonInfoResponse>;
    getPersonalCarbonInfoWithOptions(request: GetPersonalCarbonInfoRequest, headers: GetPersonalCarbonInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPersonalCarbonInfoResponse>;
    writeAlibabaOrgCarbon(request: WriteAlibabaOrgCarbonRequest): Promise<WriteAlibabaOrgCarbonResponse>;
    writeAlibabaOrgCarbonWithOptions(request: WriteAlibabaOrgCarbonRequest, headers: WriteAlibabaOrgCarbonHeaders, runtime: $Util.RuntimeOptions): Promise<WriteAlibabaOrgCarbonResponse>;
    writeAlibabaUserCarbon(request: WriteAlibabaUserCarbonRequest): Promise<WriteAlibabaUserCarbonResponse>;
    writeAlibabaUserCarbonWithOptions(request: WriteAlibabaUserCarbonRequest, headers: WriteAlibabaUserCarbonHeaders, runtime: $Util.RuntimeOptions): Promise<WriteAlibabaUserCarbonResponse>;
    writeIsvState(request: WriteIsvStateRequest): Promise<WriteIsvStateResponse>;
    writeIsvStateWithOptions(request: WriteIsvStateRequest, headers: WriteIsvStateHeaders, runtime: $Util.RuntimeOptions): Promise<WriteIsvStateResponse>;
    writeOrgCarbon(request: WriteOrgCarbonRequest): Promise<WriteOrgCarbonResponse>;
    writeOrgCarbonWithOptions(request: WriteOrgCarbonRequest, headers: WriteOrgCarbonHeaders, runtime: $Util.RuntimeOptions): Promise<WriteOrgCarbonResponse>;
    writeUserCarbon(request: WriteUserCarbonRequest): Promise<WriteUserCarbonResponse>;
    writeUserCarbonWithOptions(request: WriteUserCarbonRequest, headers: WriteUserCarbonHeaders, runtime: $Util.RuntimeOptions): Promise<WriteUserCarbonResponse>;
}
