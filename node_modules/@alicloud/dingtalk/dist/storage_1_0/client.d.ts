/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddFolderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderRequest extends $tea.Model {
    name?: string;
    option?: AddFolderRequestOption;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponseBody extends $tea.Model {
    dentry?: AddFolderResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddFolderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceRequest extends $tea.Model {
    option?: AddSpaceRequestOption;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBody extends $tea.Model {
    space?: AddSpaceResponseBodySpace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ClearRecycleBinResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequest extends $tea.Model {
    name?: string;
    option?: CommitFileRequestOption;
    parentId?: string;
    size?: number;
    uploadKey?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBody extends $tea.Model {
    dentry?: CommitFileResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CommitFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryRequest extends $tea.Model {
    option?: CopyDentryRequestOption;
    targetFolderId?: string;
    targetSpaceId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponseBody extends $tea.Model {
    async?: boolean;
    dentry?: CopyDentryResponseBodyDentry;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CopyDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryRequest extends $tea.Model {
    toRecycleBin?: boolean;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryResponseBody extends $tea.Model {
    async?: boolean;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesRequest extends $tea.Model {
    propertyNames?: string[];
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDentryAppPropertiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteRecycleItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsRequest extends $tea.Model {
    recycleItemIds?: string[];
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteRecycleItemsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBody extends $tea.Model {
    app?: GetCurrentAppResponseBodyApp;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetCurrentAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryRequest extends $tea.Model {
    option?: GetDentryRequestOption;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBody extends $tea.Model {
    dentry?: GetDentryResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoRequest extends $tea.Model {
    option?: GetFileDownloadInfoRequestOption;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponseBody extends $tea.Model {
    headerSignatureInfo?: GetFileDownloadInfoResponseBodyHeaderSignatureInfo;
    protocol?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetFileDownloadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequest extends $tea.Model {
    multipart?: boolean;
    option?: GetFileUploadInfoRequestOption;
    protocol?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponseBody extends $tea.Model {
    headerSignatureInfo?: GetFileUploadInfoResponseBodyHeaderSignatureInfo;
    protocol?: string;
    storageDriver?: string;
    uploadKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetFileUploadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinRequest extends $tea.Model {
    recycleBinScope?: string;
    scopeId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinResponseBody extends $tea.Model {
    recycleBin?: GetRecycleBinResponseBodyRecycleBin;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetRecycleBinResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemResponseBody extends $tea.Model {
    item?: GetRecycleItemResponseBodyItem;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetRecycleItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBody extends $tea.Model {
    space?: GetSpaceResponseBodySpace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    order?: string;
    orderBy?: string;
    parentId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBody extends $tea.Model {
    dentries?: ListDentriesResponseBodyDentries[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponseBody extends $tea.Model {
    dentries?: ListDentryVersionsResponseBodyDentries[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListDentryVersionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsResponseBody extends $tea.Model {
    nextToken?: string;
    recycleItems?: ListRecycleItemsResponseBodyRecycleItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListRecycleItemsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryRequest extends $tea.Model {
    option?: MoveDentryRequestOption;
    targetFolderId?: string;
    targetSpaceId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponseBody extends $tea.Model {
    async?: boolean;
    dentry?: MoveDentryResponseBodyDentry;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: MoveDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryRequest extends $tea.Model {
    newName?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponseBody extends $tea.Model {
    dentry?: RenameDentryResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RenameDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemRequest extends $tea.Model {
    option?: RestoreRecycleItemRequestOption;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RestoreRecycleItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RevertDentryVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesRequest extends $tea.Model {
    appProperties?: UpdateDentryAppPropertiesRequestAppProperties[];
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDentryAppPropertiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryAppPropertiesValue extends $tea.Model {
    name?: string;
    value?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentriesAppPropertiesValue extends $tea.Model {
    name?: string;
    value?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderRequestOptionAppProperties extends $tea.Model {
    name?: string;
    value?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderRequestOption extends $tea.Model {
    appProperties?: AddFolderRequestOptionAppProperties[];
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponseBodyDentryProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: AddFolderResponseBodyDentryProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceRequestOptionCapabilities extends $tea.Model {
    canRecordRecentFile?: boolean;
    canRename?: boolean;
    canSearch?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceRequestOption extends $tea.Model {
    capabilities?: AddSpaceRequestOptionCapabilities;
    name?: string;
    ownerType?: string;
    quota?: number;
    scene?: string;
    sceneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBodySpaceCapabilities extends $tea.Model {
    canRecordRecentFile?: boolean;
    canRename?: boolean;
    canSearch?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBodySpace extends $tea.Model {
    appId?: string;
    capabilities?: AddSpaceResponseBodySpaceCapabilities;
    corpId?: string;
    createTime?: string;
    creatorId?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    ownerId?: string;
    ownerType?: string;
    quota?: number;
    scene?: string;
    sceneId?: string;
    status?: string;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequestOptionAppProperties extends $tea.Model {
    name?: string;
    value?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequestOption extends $tea.Model {
    appProperties?: CommitFileRequestOptionAppProperties[];
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentryProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: CommitFileResponseBodyDentryProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryRequestOption extends $tea.Model {
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponseBodyDentryProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: CopyDentryResponseBodyDentryProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBodyAppPartitionsQuota extends $tea.Model {
    max?: number;
    type?: string;
    used?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBodyAppPartitions extends $tea.Model {
    partitionType?: string;
    quota?: GetCurrentAppResponseBodyAppPartitionsQuota;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBodyApp extends $tea.Model {
    appId?: string;
    corpId?: string;
    createTime?: string;
    modifiedTime?: string;
    name?: string;
    partitions?: GetCurrentAppResponseBodyAppPartitions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryRequestOption extends $tea.Model {
    appIdsForAppProperties?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentryProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: GetDentryResponseBodyDentryProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoRequestOption extends $tea.Model {
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    expirationSeconds?: number;
    headers?: {
        [key: string]: string;
    };
    internalResourceUrls?: string[];
    region?: string;
    resourceUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequestOptionPreCheckParam extends $tea.Model {
    md5?: string;
    name?: string;
    parentId?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequestOption extends $tea.Model {
    preCheckParam?: GetFileUploadInfoRequestOptionPreCheckParam;
    preferRegion?: string;
    storageDriver?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    expirationSeconds?: number;
    headers?: {
        [key: string]: string;
    };
    internalResourceUrls?: string[];
    region?: string;
    resourceUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinResponseBodyRecycleBin extends $tea.Model {
    id?: string;
    scope?: string;
    scopeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemResponseBodyItem extends $tea.Model {
    appId?: string;
    dentryId?: string;
    id?: string;
    operatorId?: string;
    operatorTime?: string;
    originalName?: string;
    originalPath?: string;
    size?: number;
    spaceId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBodySpaceCapabilities extends $tea.Model {
    canRecordRecentFile?: boolean;
    canRename?: boolean;
    canSearch?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBodySpace extends $tea.Model {
    appId?: string;
    capabilities?: GetSpaceResponseBodySpaceCapabilities;
    corpId?: string;
    createTime?: string;
    creatorId?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    ownerId?: string;
    ownerType?: string;
    quota?: number;
    scene?: string;
    sceneId?: string;
    status?: string;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentriesProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentries extends $tea.Model {
    appProperties?: {
        [key: string]: DentriesAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: ListDentriesResponseBodyDentriesProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponseBodyDentriesProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponseBodyDentries extends $tea.Model {
    appProperties?: {
        [key: string]: DentriesAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: ListDentryVersionsResponseBodyDentriesProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsResponseBodyRecycleItems extends $tea.Model {
    appId?: string;
    dentryId?: string;
    id?: string;
    operatorId?: string;
    operatorTime?: string;
    originalName?: string;
    originalPath?: string;
    size?: number;
    spaceId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryRequestOption extends $tea.Model {
    conflictStrategy?: string;
    presevePermissions?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponseBodyDentryProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: MoveDentryResponseBodyDentryProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponseBodyDentryProperties extends $tea.Model {
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    createTime?: string;
    creatorId?: string;
    extension?: string;
    id?: string;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    parentId?: string;
    partitionType?: string;
    path?: string;
    properties?: RenameDentryResponseBodyDentryProperties;
    size?: number;
    spaceId?: string;
    status?: string;
    storageDriver?: string;
    type?: string;
    uuid?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemRequestOption extends $tea.Model {
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesRequestAppProperties extends $tea.Model {
    name?: string;
    value?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    addFolder(spaceId: string, parentId: string, request: AddFolderRequest): Promise<AddFolderResponse>;
    addFolderWithOptions(spaceId: string, parentId: string, request: AddFolderRequest, headers: AddFolderHeaders, runtime: $Util.RuntimeOptions): Promise<AddFolderResponse>;
    addSpace(request: AddSpaceRequest): Promise<AddSpaceResponse>;
    addSpaceWithOptions(request: AddSpaceRequest, headers: AddSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<AddSpaceResponse>;
    clearRecycleBin(recycleBinId: string, request: ClearRecycleBinRequest): Promise<ClearRecycleBinResponse>;
    clearRecycleBinWithOptions(recycleBinId: string, request: ClearRecycleBinRequest, headers: ClearRecycleBinHeaders, runtime: $Util.RuntimeOptions): Promise<ClearRecycleBinResponse>;
    commitFile(spaceId: string, request: CommitFileRequest): Promise<CommitFileResponse>;
    commitFileWithOptions(spaceId: string, request: CommitFileRequest, headers: CommitFileHeaders, runtime: $Util.RuntimeOptions): Promise<CommitFileResponse>;
    copyDentry(spaceId: string, dentryId: string, request: CopyDentryRequest): Promise<CopyDentryResponse>;
    copyDentryWithOptions(spaceId: string, dentryId: string, request: CopyDentryRequest, headers: CopyDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CopyDentryResponse>;
    deleteDentry(spaceId: string, dentryId: string, request: DeleteDentryRequest): Promise<DeleteDentryResponse>;
    deleteDentryWithOptions(spaceId: string, dentryId: string, request: DeleteDentryRequest, headers: DeleteDentryHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDentryResponse>;
    deleteDentryAppProperties(spaceId: string, dentryId: string, request: DeleteDentryAppPropertiesRequest): Promise<DeleteDentryAppPropertiesResponse>;
    deleteDentryAppPropertiesWithOptions(spaceId: string, dentryId: string, request: DeleteDentryAppPropertiesRequest, headers: DeleteDentryAppPropertiesHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDentryAppPropertiesResponse>;
    deleteRecycleItem(recycleBinId: string, recycleItemId: string, request: DeleteRecycleItemRequest): Promise<DeleteRecycleItemResponse>;
    deleteRecycleItemWithOptions(recycleBinId: string, recycleItemId: string, request: DeleteRecycleItemRequest, headers: DeleteRecycleItemHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRecycleItemResponse>;
    deleteRecycleItems(recycleBinId: string, request: DeleteRecycleItemsRequest): Promise<DeleteRecycleItemsResponse>;
    deleteRecycleItemsWithOptions(recycleBinId: string, request: DeleteRecycleItemsRequest, headers: DeleteRecycleItemsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRecycleItemsResponse>;
    getCurrentApp(request: GetCurrentAppRequest): Promise<GetCurrentAppResponse>;
    getCurrentAppWithOptions(request: GetCurrentAppRequest, headers: GetCurrentAppHeaders, runtime: $Util.RuntimeOptions): Promise<GetCurrentAppResponse>;
    getDentry(spaceId: string, dentryId: string, request: GetDentryRequest): Promise<GetDentryResponse>;
    getDentryWithOptions(spaceId: string, dentryId: string, request: GetDentryRequest, headers: GetDentryHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentryResponse>;
    getFileDownloadInfo(spaceId: string, dentryId: string, request: GetFileDownloadInfoRequest): Promise<GetFileDownloadInfoResponse>;
    getFileDownloadInfoWithOptions(spaceId: string, dentryId: string, request: GetFileDownloadInfoRequest, headers: GetFileDownloadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileDownloadInfoResponse>;
    getFileUploadInfo(spaceId: string, request: GetFileUploadInfoRequest): Promise<GetFileUploadInfoResponse>;
    getFileUploadInfoWithOptions(spaceId: string, request: GetFileUploadInfoRequest, headers: GetFileUploadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileUploadInfoResponse>;
    getRecycleBin(request: GetRecycleBinRequest): Promise<GetRecycleBinResponse>;
    getRecycleBinWithOptions(request: GetRecycleBinRequest, headers: GetRecycleBinHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecycleBinResponse>;
    getRecycleItem(recycleBinId: string, recycleItemId: string, request: GetRecycleItemRequest): Promise<GetRecycleItemResponse>;
    getRecycleItemWithOptions(recycleBinId: string, recycleItemId: string, request: GetRecycleItemRequest, headers: GetRecycleItemHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecycleItemResponse>;
    getSpace(spaceId: string, request: GetSpaceRequest): Promise<GetSpaceResponse>;
    getSpaceWithOptions(spaceId: string, request: GetSpaceRequest, headers: GetSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceResponse>;
    listDentries(spaceId: string, request: ListDentriesRequest): Promise<ListDentriesResponse>;
    listDentriesWithOptions(spaceId: string, request: ListDentriesRequest, headers: ListDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<ListDentriesResponse>;
    listDentryVersions(spaceId: string, dentryId: string, request: ListDentryVersionsRequest): Promise<ListDentryVersionsResponse>;
    listDentryVersionsWithOptions(spaceId: string, dentryId: string, request: ListDentryVersionsRequest, headers: ListDentryVersionsHeaders, runtime: $Util.RuntimeOptions): Promise<ListDentryVersionsResponse>;
    listRecycleItems(recycleBinId: string, request: ListRecycleItemsRequest): Promise<ListRecycleItemsResponse>;
    listRecycleItemsWithOptions(recycleBinId: string, request: ListRecycleItemsRequest, headers: ListRecycleItemsHeaders, runtime: $Util.RuntimeOptions): Promise<ListRecycleItemsResponse>;
    moveDentry(spaceId: string, dentryId: string, request: MoveDentryRequest): Promise<MoveDentryResponse>;
    moveDentryWithOptions(spaceId: string, dentryId: string, request: MoveDentryRequest, headers: MoveDentryHeaders, runtime: $Util.RuntimeOptions): Promise<MoveDentryResponse>;
    renameDentry(spaceId: string, dentryId: string, request: RenameDentryRequest): Promise<RenameDentryResponse>;
    renameDentryWithOptions(spaceId: string, dentryId: string, request: RenameDentryRequest, headers: RenameDentryHeaders, runtime: $Util.RuntimeOptions): Promise<RenameDentryResponse>;
    restoreRecycleItem(recycleBinId: string, recycleItemId: string, request: RestoreRecycleItemRequest): Promise<RestoreRecycleItemResponse>;
    restoreRecycleItemWithOptions(recycleBinId: string, recycleItemId: string, request: RestoreRecycleItemRequest, headers: RestoreRecycleItemHeaders, runtime: $Util.RuntimeOptions): Promise<RestoreRecycleItemResponse>;
    revertDentryVersion(spaceId: string, dentryId: string, version: string, request: RevertDentryVersionRequest): Promise<RevertDentryVersionResponse>;
    revertDentryVersionWithOptions(spaceId: string, dentryId: string, version: string, request: RevertDentryVersionRequest, headers: RevertDentryVersionHeaders, runtime: $Util.RuntimeOptions): Promise<RevertDentryVersionResponse>;
    updateDentryAppProperties(spaceId: string, dentryId: string, request: UpdateDentryAppPropertiesRequest): Promise<UpdateDentryAppPropertiesResponse>;
    updateDentryAppPropertiesWithOptions(spaceId: string, dentryId: string, request: UpdateDentryAppPropertiesRequest, headers: UpdateDentryAppPropertiesHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateDentryAppPropertiesResponse>;
}
