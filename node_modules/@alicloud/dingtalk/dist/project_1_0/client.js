"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateOrganizationTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateOrganizationTaskHeaders = CreateOrganizationTaskHeaders;
class CreateOrganizationTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            createTime: 'createTime',
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
            dueDate: 'dueDate',
            executorId: 'executorId',
            involveMembers: 'involveMembers',
            note: 'note',
            priority: 'priority',
            visible: 'visible',
        };
    }
    static types() {
        return {
            content: 'string',
            createTime: 'string',
            disableActivity: 'boolean',
            disableNotification: 'boolean',
            dueDate: 'string',
            executorId: 'string',
            involveMembers: { 'type': 'array', 'itemType': 'string' },
            note: 'string',
            priority: 'number',
            visible: 'string',
        };
    }
}
exports.CreateOrganizationTaskRequest = CreateOrganizationTaskRequest;
class CreateOrganizationTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: CreateOrganizationTaskResponseBodyResult,
        };
    }
}
exports.CreateOrganizationTaskResponseBody = CreateOrganizationTaskResponseBody;
class CreateOrganizationTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOrganizationTaskResponseBody,
        };
    }
}
exports.CreateOrganizationTaskResponse = CreateOrganizationTaskResponse;
class CreateTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTaskHeaders = CreateTaskHeaders;
class CreateTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            dueDate: 'dueDate',
            executorId: 'executorId',
            note: 'note',
            priority: 'priority',
            projectId: 'projectId',
        };
    }
    static types() {
        return {
            content: 'string',
            dueDate: 'string',
            executorId: 'string',
            note: 'string',
            priority: 'number',
            projectId: 'string',
        };
    }
}
exports.CreateTaskRequest = CreateTaskRequest;
class CreateTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: CreateTaskResponseBodyResult,
        };
    }
}
exports.CreateTaskResponseBody = CreateTaskResponseBody;
class CreateTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateTaskResponseBody,
        };
    }
}
exports.CreateTaskResponse = CreateTaskResponse;
class CreateTaskObjectLinkHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTaskObjectLinkHeaders = CreateTaskObjectLinkHeaders;
class CreateTaskObjectLinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            linkedData: 'linkedData',
        };
    }
    static types() {
        return {
            linkedData: CreateTaskObjectLinkRequestLinkedData,
        };
    }
}
exports.CreateTaskObjectLinkRequest = CreateTaskObjectLinkRequest;
class CreateTaskObjectLinkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: CreateTaskObjectLinkResponseBodyResult,
        };
    }
}
exports.CreateTaskObjectLinkResponseBody = CreateTaskObjectLinkResponseBody;
class CreateTaskObjectLinkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateTaskObjectLinkResponseBody,
        };
    }
}
exports.CreateTaskObjectLinkResponse = CreateTaskObjectLinkResponse;
class GetDeptsByOrgIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            dingAccessTokenType: 'dingAccessTokenType',
            dingOrgId: 'dingOrgId',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dingAccessTokenType: 'string',
            dingOrgId: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDeptsByOrgIdHeaders = GetDeptsByOrgIdHeaders;
class GetDeptsByOrgIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetDeptsByOrgIdRequest = GetDeptsByOrgIdRequest;
class GetDeptsByOrgIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptList: 'deptList',
            hasMore: 'hasMore',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            deptList: { 'type': 'array', 'itemType': GetDeptsByOrgIdResponseBodyDeptList },
            hasMore: 'boolean',
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetDeptsByOrgIdResponseBody = GetDeptsByOrgIdResponseBody;
class GetDeptsByOrgIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDeptsByOrgIdResponseBody,
        };
    }
}
exports.GetDeptsByOrgIdResponse = GetDeptsByOrgIdResponse;
class GetEmpsByOrgIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            dingAccessTokenType: 'dingAccessTokenType',
            dingOrgId: 'dingOrgId',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dingAccessTokenType: 'string',
            dingOrgId: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetEmpsByOrgIdHeaders = GetEmpsByOrgIdHeaders;
class GetEmpsByOrgIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            needDept: 'needDept',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            needDept: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.GetEmpsByOrgIdRequest = GetEmpsByOrgIdRequest;
class GetEmpsByOrgIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            empList: 'empList',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            empList: { 'type': 'array', 'itemType': GetEmpsByOrgIdResponseBodyEmpList },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.GetEmpsByOrgIdResponseBody = GetEmpsByOrgIdResponseBody;
class GetEmpsByOrgIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetEmpsByOrgIdResponseBody,
        };
    }
}
exports.GetEmpsByOrgIdResponse = GetEmpsByOrgIdResponse;
class GetOrganizatioTaskByIdsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOrganizatioTaskByIdsHeaders = GetOrganizatioTaskByIdsHeaders;
class GetOrganizatioTaskByIdsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            taskIds: 'taskIds',
        };
    }
    static types() {
        return {
            taskIds: 'string',
        };
    }
}
exports.GetOrganizatioTaskByIdsRequest = GetOrganizatioTaskByIdsRequest;
class GetOrganizatioTaskByIdsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetOrganizatioTaskByIdsResponseBodyResult },
        };
    }
}
exports.GetOrganizatioTaskByIdsResponseBody = GetOrganizatioTaskByIdsResponseBody;
class GetOrganizatioTaskByIdsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetOrganizatioTaskByIdsResponseBody,
        };
    }
}
exports.GetOrganizatioTaskByIdsResponse = GetOrganizatioTaskByIdsResponse;
class GetOrganizationPriorityListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOrganizationPriorityListHeaders = GetOrganizationPriorityListHeaders;
class GetOrganizationPriorityListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetOrganizationPriorityListResponseBodyResult },
        };
    }
}
exports.GetOrganizationPriorityListResponseBody = GetOrganizationPriorityListResponseBody;
class GetOrganizationPriorityListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetOrganizationPriorityListResponseBody,
        };
    }
}
exports.GetOrganizationPriorityListResponse = GetOrganizationPriorityListResponse;
class GetOrganizationTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOrganizationTaskHeaders = GetOrganizationTaskHeaders;
class GetOrganizationTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetOrganizationTaskResponseBodyResult,
        };
    }
}
exports.GetOrganizationTaskResponseBody = GetOrganizationTaskResponseBody;
class GetOrganizationTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetOrganizationTaskResponseBody,
        };
    }
}
exports.GetOrganizationTaskResponse = GetOrganizationTaskResponse;
class GetTbProjectGrayHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            dingAccessTokenType: 'dingAccessTokenType',
            dingCorpId: 'dingCorpId',
            dingIsvOrgId: 'dingIsvOrgId',
            dingOrgId: 'dingOrgId',
            dingSuiteKey: 'dingSuiteKey',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dingAccessTokenType: 'string',
            dingCorpId: 'string',
            dingIsvOrgId: 'string',
            dingOrgId: 'string',
            dingSuiteKey: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTbProjectGrayHeaders = GetTbProjectGrayHeaders;
class GetTbProjectGrayRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'label',
        };
    }
    static types() {
        return {
            label: 'string',
        };
    }
}
exports.GetTbProjectGrayRequest = GetTbProjectGrayRequest;
class GetTbProjectGrayResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
        };
    }
}
exports.GetTbProjectGrayResponseBody = GetTbProjectGrayResponseBody;
class GetTbProjectGrayResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetTbProjectGrayResponseBody,
        };
    }
}
exports.GetTbProjectGrayResponse = GetTbProjectGrayResponse;
class GetTbProjectSourceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            dingAccessTokenType: 'dingAccessTokenType',
            dingCorpId: 'dingCorpId',
            dingIsvOrgId: 'dingIsvOrgId',
            dingOrgId: 'dingOrgId',
            dingSuiteKey: 'dingSuiteKey',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dingAccessTokenType: 'string',
            dingCorpId: 'string',
            dingIsvOrgId: 'string',
            dingOrgId: 'string',
            dingSuiteKey: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTbProjectSourceHeaders = GetTbProjectSourceHeaders;
class GetTbProjectSourceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            installSource: 'installSource',
        };
    }
    static types() {
        return {
            installSource: 'string',
        };
    }
}
exports.GetTbProjectSourceResponseBody = GetTbProjectSourceResponseBody;
class GetTbProjectSourceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetTbProjectSourceResponseBody,
        };
    }
}
exports.GetTbProjectSourceResponse = GetTbProjectSourceResponse;
class UpdateOrganizationTaskContentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateOrganizationTaskContentHeaders = UpdateOrganizationTaskContentHeaders;
class UpdateOrganizationTaskContentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
        };
    }
    static types() {
        return {
            content: 'string',
            disableActivity: 'boolean',
            disableNotification: 'boolean',
        };
    }
}
exports.UpdateOrganizationTaskContentRequest = UpdateOrganizationTaskContentRequest;
class UpdateOrganizationTaskContentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateOrganizationTaskContentResponseBodyResult,
        };
    }
}
exports.UpdateOrganizationTaskContentResponseBody = UpdateOrganizationTaskContentResponseBody;
class UpdateOrganizationTaskContentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOrganizationTaskContentResponseBody,
        };
    }
}
exports.UpdateOrganizationTaskContentResponse = UpdateOrganizationTaskContentResponse;
class UpdateOrganizationTaskDueDateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateOrganizationTaskDueDateHeaders = UpdateOrganizationTaskDueDateHeaders;
class UpdateOrganizationTaskDueDateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
            dueDate: 'dueDate',
        };
    }
    static types() {
        return {
            disableActivity: 'boolean',
            disableNotification: 'boolean',
            dueDate: 'string',
        };
    }
}
exports.UpdateOrganizationTaskDueDateRequest = UpdateOrganizationTaskDueDateRequest;
class UpdateOrganizationTaskDueDateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateOrganizationTaskDueDateResponseBodyResult,
        };
    }
}
exports.UpdateOrganizationTaskDueDateResponseBody = UpdateOrganizationTaskDueDateResponseBody;
class UpdateOrganizationTaskDueDateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOrganizationTaskDueDateResponseBody,
        };
    }
}
exports.UpdateOrganizationTaskDueDateResponse = UpdateOrganizationTaskDueDateResponse;
class UpdateOrganizationTaskExecutorHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateOrganizationTaskExecutorHeaders = UpdateOrganizationTaskExecutorHeaders;
class UpdateOrganizationTaskExecutorRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
            executorId: 'executorId',
        };
    }
    static types() {
        return {
            disableActivity: 'boolean',
            disableNotification: 'boolean',
            executorId: 'string',
        };
    }
}
exports.UpdateOrganizationTaskExecutorRequest = UpdateOrganizationTaskExecutorRequest;
class UpdateOrganizationTaskExecutorResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateOrganizationTaskExecutorResponseBodyResult,
        };
    }
}
exports.UpdateOrganizationTaskExecutorResponseBody = UpdateOrganizationTaskExecutorResponseBody;
class UpdateOrganizationTaskExecutorResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOrganizationTaskExecutorResponseBody,
        };
    }
}
exports.UpdateOrganizationTaskExecutorResponse = UpdateOrganizationTaskExecutorResponse;
class UpdateOrganizationTaskInvolveMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateOrganizationTaskInvolveMembersHeaders = UpdateOrganizationTaskInvolveMembersHeaders;
class UpdateOrganizationTaskInvolveMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addInvolvers: 'addInvolvers',
            delInvolvers: 'delInvolvers',
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
            involveMembers: 'involveMembers',
        };
    }
    static types() {
        return {
            addInvolvers: { 'type': 'array', 'itemType': 'string' },
            delInvolvers: { 'type': 'array', 'itemType': 'string' },
            disableActivity: 'boolean',
            disableNotification: 'boolean',
            involveMembers: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdateOrganizationTaskInvolveMembersRequest = UpdateOrganizationTaskInvolveMembersRequest;
class UpdateOrganizationTaskInvolveMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateOrganizationTaskInvolveMembersResponseBodyResult,
        };
    }
}
exports.UpdateOrganizationTaskInvolveMembersResponseBody = UpdateOrganizationTaskInvolveMembersResponseBody;
class UpdateOrganizationTaskInvolveMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOrganizationTaskInvolveMembersResponseBody,
        };
    }
}
exports.UpdateOrganizationTaskInvolveMembersResponse = UpdateOrganizationTaskInvolveMembersResponse;
class UpdateOrganizationTaskNoteHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateOrganizationTaskNoteHeaders = UpdateOrganizationTaskNoteHeaders;
class UpdateOrganizationTaskNoteRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
            note: 'note',
        };
    }
    static types() {
        return {
            disableActivity: 'boolean',
            disableNotification: 'boolean',
            note: 'string',
        };
    }
}
exports.UpdateOrganizationTaskNoteRequest = UpdateOrganizationTaskNoteRequest;
class UpdateOrganizationTaskNoteResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateOrganizationTaskNoteResponseBodyResult,
        };
    }
}
exports.UpdateOrganizationTaskNoteResponseBody = UpdateOrganizationTaskNoteResponseBody;
class UpdateOrganizationTaskNoteResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOrganizationTaskNoteResponseBody,
        };
    }
}
exports.UpdateOrganizationTaskNoteResponse = UpdateOrganizationTaskNoteResponse;
class UpdateOrganizationTaskPriorityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateOrganizationTaskPriorityHeaders = UpdateOrganizationTaskPriorityHeaders;
class UpdateOrganizationTaskPriorityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
            priority: 'priority',
        };
    }
    static types() {
        return {
            disableActivity: 'boolean',
            disableNotification: 'boolean',
            priority: 'number',
        };
    }
}
exports.UpdateOrganizationTaskPriorityRequest = UpdateOrganizationTaskPriorityRequest;
class UpdateOrganizationTaskPriorityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateOrganizationTaskPriorityResponseBodyResult,
        };
    }
}
exports.UpdateOrganizationTaskPriorityResponseBody = UpdateOrganizationTaskPriorityResponseBody;
class UpdateOrganizationTaskPriorityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOrganizationTaskPriorityResponseBody,
        };
    }
}
exports.UpdateOrganizationTaskPriorityResponse = UpdateOrganizationTaskPriorityResponse;
class UpdateOrganizationTaskStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateOrganizationTaskStatusHeaders = UpdateOrganizationTaskStatusHeaders;
class UpdateOrganizationTaskStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            disableActivity: 'disableActivity',
            disableNotification: 'disableNotification',
            isDone: 'isDone',
        };
    }
    static types() {
        return {
            disableActivity: 'boolean',
            disableNotification: 'boolean',
            isDone: 'boolean',
        };
    }
}
exports.UpdateOrganizationTaskStatusRequest = UpdateOrganizationTaskStatusRequest;
class UpdateOrganizationTaskStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateOrganizationTaskStatusResponseBodyResult,
        };
    }
}
exports.UpdateOrganizationTaskStatusResponseBody = UpdateOrganizationTaskStatusResponseBody;
class UpdateOrganizationTaskStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOrganizationTaskStatusResponseBody,
        };
    }
}
exports.UpdateOrganizationTaskStatusResponse = UpdateOrganizationTaskStatusResponse;
class CreateOrganizationTaskResponseBodyResultCreator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.CreateOrganizationTaskResponseBodyResultCreator = CreateOrganizationTaskResponseBodyResultCreator;
class CreateOrganizationTaskResponseBodyResultExecutor extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.CreateOrganizationTaskResponseBodyResultExecutor = CreateOrganizationTaskResponseBodyResultExecutor;
class CreateOrganizationTaskResponseBodyResultInvolvers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            id: 'string',
            name: 'string',
        };
    }
}
exports.CreateOrganizationTaskResponseBodyResultInvolvers = CreateOrganizationTaskResponseBodyResultInvolvers;
class CreateOrganizationTaskResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ancestorIds: 'ancestorIds',
            attachmentsCount: 'attachmentsCount',
            content: 'content',
            created: 'created',
            creator: 'creator',
            creatorId: 'creatorId',
            dueDate: 'dueDate',
            executor: 'executor',
            executorId: 'executorId',
            hasReminder: 'hasReminder',
            id: 'id',
            involveMembers: 'involveMembers',
            involvers: 'involvers',
            isDeleted: 'isDeleted',
            isDone: 'isDone',
            note: 'note',
            priority: 'priority',
            updated: 'updated',
            visible: 'visible',
        };
    }
    static types() {
        return {
            ancestorIds: { 'type': 'array', 'itemType': 'string' },
            attachmentsCount: 'number',
            content: 'string',
            created: 'string',
            creator: CreateOrganizationTaskResponseBodyResultCreator,
            creatorId: 'string',
            dueDate: 'string',
            executor: CreateOrganizationTaskResponseBodyResultExecutor,
            executorId: 'string',
            hasReminder: 'boolean',
            id: 'string',
            involveMembers: { 'type': 'array', 'itemType': 'string' },
            involvers: { 'type': 'array', 'itemType': CreateOrganizationTaskResponseBodyResultInvolvers },
            isDeleted: 'boolean',
            isDone: 'string',
            note: 'string',
            priority: 'number',
            updated: 'string',
            visible: 'string',
        };
    }
}
exports.CreateOrganizationTaskResponseBodyResult = CreateOrganizationTaskResponseBodyResult;
class CreateTaskResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            created: 'created',
            creatorId: 'creatorId',
            dueDate: 'dueDate',
            executorId: 'executorId',
            involveMembers: 'involveMembers',
            note: 'note',
            priority: 'priority',
            projectId: 'projectId',
            taskId: 'taskId',
            updated: 'updated',
        };
    }
    static types() {
        return {
            content: 'string',
            created: 'string',
            creatorId: 'string',
            dueDate: 'string',
            executorId: 'string',
            involveMembers: { 'type': 'array', 'itemType': 'string' },
            note: 'string',
            priority: 'number',
            projectId: 'string',
            taskId: 'string',
            updated: 'string',
        };
    }
}
exports.CreateTaskResponseBodyResult = CreateTaskResponseBodyResult;
class CreateTaskObjectLinkRequestLinkedData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            thumbnailUrl: 'thumbnailUrl',
            title: 'title',
            url: 'url',
        };
    }
    static types() {
        return {
            content: 'string',
            thumbnailUrl: 'string',
            title: 'string',
            url: 'string',
        };
    }
}
exports.CreateTaskObjectLinkRequestLinkedData = CreateTaskObjectLinkRequestLinkedData;
class CreateTaskObjectLinkResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            created: 'created',
            objectLinkId: 'objectLinkId',
        };
    }
    static types() {
        return {
            created: 'string',
            objectLinkId: 'string',
        };
    }
}
exports.CreateTaskObjectLinkResponseBodyResult = CreateTaskObjectLinkResponseBodyResult;
class GetDeptsByOrgIdResponseBodyDeptList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'dept_id',
            name: 'name',
            parentId: 'parent_id',
        };
    }
    static types() {
        return {
            deptId: 'number',
            name: 'string',
            parentId: 'number',
        };
    }
}
exports.GetDeptsByOrgIdResponseBodyDeptList = GetDeptsByOrgIdResponseBodyDeptList;
class GetEmpsByOrgIdResponseBodyEmpList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatar: 'avatar',
            deptIdList: 'dept_id_list',
            dingId: 'dingId',
            name: 'name',
            nick: 'nick',
            orgId: 'orgId',
            position: 'position',
            unionid: 'unionid',
            userid: 'userid',
        };
    }
    static types() {
        return {
            avatar: 'string',
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            dingId: 'string',
            name: 'string',
            nick: 'string',
            orgId: 'number',
            position: 'string',
            unionid: 'string',
            userid: 'string',
        };
    }
}
exports.GetEmpsByOrgIdResponseBodyEmpList = GetEmpsByOrgIdResponseBodyEmpList;
class GetOrganizatioTaskByIdsResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ancestorIds: 'ancestorIds',
            content: 'content',
            created: 'created',
            creatorId: 'creatorId',
            dueDate: 'dueDate',
            executorId: 'executorId',
            involveMembers: 'involveMembers',
            isDeleted: 'isDeleted',
            isDone: 'isDone',
            labels: 'labels',
            note: 'note',
            priority: 'priority',
            startDate: 'startDate',
            taskId: 'taskId',
            updated: 'updated',
            visible: 'visible',
        };
    }
    static types() {
        return {
            ancestorIds: { 'type': 'array', 'itemType': 'string' },
            content: 'string',
            created: 'string',
            creatorId: 'string',
            dueDate: 'string',
            executorId: 'string',
            involveMembers: { 'type': 'array', 'itemType': 'string' },
            isDeleted: 'boolean',
            isDone: 'boolean',
            labels: { 'type': 'array', 'itemType': 'string' },
            note: 'string',
            priority: 'number',
            startDate: 'string',
            taskId: 'string',
            updated: 'string',
            visible: 'string',
        };
    }
}
exports.GetOrganizatioTaskByIdsResponseBodyResult = GetOrganizatioTaskByIdsResponseBodyResult;
class GetOrganizationPriorityListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            color: 'color',
            name: 'name',
            priority: 'priority',
            priorityId: 'priorityId',
        };
    }
    static types() {
        return {
            color: 'string',
            name: 'string',
            priority: 'string',
            priorityId: 'string',
        };
    }
}
exports.GetOrganizationPriorityListResponseBodyResult = GetOrganizationPriorityListResponseBodyResult;
class GetOrganizationTaskResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ancestorIds: 'ancestorIds',
            content: 'content',
            created: 'created',
            creatorId: 'creatorId',
            dueDate: 'dueDate',
            executorId: 'executorId',
            involveMembers: 'involveMembers',
            isDeleted: 'isDeleted',
            isDone: 'isDone',
            labels: 'labels',
            note: 'note',
            priority: 'priority',
            startDate: 'startDate',
            taskId: 'taskId',
            updated: 'updated',
            visible: 'visible',
        };
    }
    static types() {
        return {
            ancestorIds: { 'type': 'array', 'itemType': 'string' },
            content: 'string',
            created: 'string',
            creatorId: 'string',
            dueDate: 'string',
            executorId: 'string',
            involveMembers: { 'type': 'array', 'itemType': 'string' },
            isDeleted: 'boolean',
            isDone: 'boolean',
            labels: { 'type': 'array', 'itemType': 'string' },
            note: 'string',
            priority: 'number',
            startDate: 'string',
            taskId: 'string',
            updated: 'string',
            visible: 'string',
        };
    }
}
exports.GetOrganizationTaskResponseBodyResult = GetOrganizationTaskResponseBodyResult;
class UpdateOrganizationTaskContentResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            updated: 'updated',
        };
    }
    static types() {
        return {
            content: 'string',
            updated: 'string',
        };
    }
}
exports.UpdateOrganizationTaskContentResponseBodyResult = UpdateOrganizationTaskContentResponseBodyResult;
class UpdateOrganizationTaskDueDateResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dueDate: 'dueDate',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            dueDate: 'string',
            updateTime: 'string',
        };
    }
}
exports.UpdateOrganizationTaskDueDateResponseBodyResult = UpdateOrganizationTaskDueDateResponseBodyResult;
class UpdateOrganizationTaskExecutorResponseBodyResultExecutor extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateOrganizationTaskExecutorResponseBodyResultExecutor = UpdateOrganizationTaskExecutorResponseBodyResultExecutor;
class UpdateOrganizationTaskExecutorResponseBodyResultInvolvers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateOrganizationTaskExecutorResponseBodyResultInvolvers = UpdateOrganizationTaskExecutorResponseBodyResultInvolvers;
class UpdateOrganizationTaskExecutorResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            executor: 'executor',
            executorId: 'executorId',
            involvers: 'involvers',
            updated: 'updated',
        };
    }
    static types() {
        return {
            executor: UpdateOrganizationTaskExecutorResponseBodyResultExecutor,
            executorId: 'string',
            involvers: { 'type': 'array', 'itemType': UpdateOrganizationTaskExecutorResponseBodyResultInvolvers },
            updated: 'string',
        };
    }
}
exports.UpdateOrganizationTaskExecutorResponseBodyResult = UpdateOrganizationTaskExecutorResponseBodyResult;
class UpdateOrganizationTaskInvolveMembersResponseBodyResultInvolvers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateOrganizationTaskInvolveMembersResponseBodyResultInvolvers = UpdateOrganizationTaskInvolveMembersResponseBodyResultInvolvers;
class UpdateOrganizationTaskInvolveMembersResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            involvers: 'involvers',
            updated: 'updated',
        };
    }
    static types() {
        return {
            involvers: { 'type': 'array', 'itemType': UpdateOrganizationTaskInvolveMembersResponseBodyResultInvolvers },
            updated: 'string',
        };
    }
}
exports.UpdateOrganizationTaskInvolveMembersResponseBodyResult = UpdateOrganizationTaskInvolveMembersResponseBodyResult;
class UpdateOrganizationTaskNoteResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            note: 'note',
            updated: 'updated',
        };
    }
    static types() {
        return {
            note: 'string',
            updated: 'string',
        };
    }
}
exports.UpdateOrganizationTaskNoteResponseBodyResult = UpdateOrganizationTaskNoteResponseBodyResult;
class UpdateOrganizationTaskPriorityResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            priority: 'priority',
            updated: 'updated',
        };
    }
    static types() {
        return {
            priority: 'number',
            updated: 'string',
        };
    }
}
exports.UpdateOrganizationTaskPriorityResponseBodyResult = UpdateOrganizationTaskPriorityResponseBodyResult;
class UpdateOrganizationTaskStatusResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isDone: 'isDone',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            isDone: 'boolean',
            updateTime: 'string',
        };
    }
}
exports.UpdateOrganizationTaskStatusResponseBodyResult = UpdateOrganizationTaskStatusResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async createOrganizationTask(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOrganizationTaskHeaders({});
        return await this.createOrganizationTaskWithOptions(userId, request, headers, runtime);
    }
    async createOrganizationTaskWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.createTime)) {
            body["createTime"] = request.createTime;
        }
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        if (!tea_util_1.default.isUnset(request.dueDate)) {
            body["dueDate"] = request.dueDate;
        }
        if (!tea_util_1.default.isUnset(request.executorId)) {
            body["executorId"] = request.executorId;
        }
        if (!tea_util_1.default.isUnset(request.involveMembers)) {
            body["involveMembers"] = request.involveMembers;
        }
        if (!tea_util_1.default.isUnset(request.note)) {
            body["note"] = request.note;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.visible)) {
            body["visible"] = request.visible;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateOrganizationTask", "project_1.0", "HTTP", "POST", "AK", `/v1.0/project/organizations/users/${userId}/tasks`, "json", req, runtime), new CreateOrganizationTaskResponse({}));
    }
    async createTask(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTaskHeaders({});
        return await this.createTaskWithOptions(userId, request, headers, runtime);
    }
    async createTaskWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.dueDate)) {
            body["dueDate"] = request.dueDate;
        }
        if (!tea_util_1.default.isUnset(request.executorId)) {
            body["executorId"] = request.executorId;
        }
        if (!tea_util_1.default.isUnset(request.note)) {
            body["note"] = request.note;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateTask", "project_1.0", "HTTP", "POST", "AK", `/v1.0/project/users/${userId}/tasks`, "json", req, runtime), new CreateTaskResponse({}));
    }
    async createTaskObjectLink(userId, taskId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTaskObjectLinkHeaders({});
        return await this.createTaskObjectLinkWithOptions(userId, taskId, request, headers, runtime);
    }
    async createTaskObjectLinkWithOptions(userId, taskId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        userId = openapi_util_1.default.getEncodeParam(userId);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        let body = {};
        if (!tea_util_1.default.isUnset($tea.toMap(request.linkedData))) {
            body["linkedData"] = request.linkedData;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateTaskObjectLink", "project_1.0", "HTTP", "POST", "AK", `/v1.0/project/users/${userId}/tasks/${taskId}/objectLinks`, "json", req, runtime), new CreateTaskObjectLinkResponse({}));
    }
    async getDeptsByOrgId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDeptsByOrgIdHeaders({});
        return await this.getDeptsByOrgIdWithOptions(request, headers, runtime);
    }
    async getDeptsByOrgIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.dingAccessTokenType)) {
            realHeaders["dingAccessTokenType"] = tea_util_1.default.toJSONString(headers.dingAccessTokenType);
        }
        if (!tea_util_1.default.isUnset(headers.dingOrgId)) {
            realHeaders["dingOrgId"] = tea_util_1.default.toJSONString(headers.dingOrgId);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetDeptsByOrgId", "project_1.0", "HTTP", "GET", "AK", `/v1.0/project/orgs/depts`, "json", req, runtime), new GetDeptsByOrgIdResponse({}));
    }
    async getEmpsByOrgId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetEmpsByOrgIdHeaders({});
        return await this.getEmpsByOrgIdWithOptions(request, headers, runtime);
    }
    async getEmpsByOrgIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.needDept)) {
            query["needDept"] = request.needDept;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.dingAccessTokenType)) {
            realHeaders["dingAccessTokenType"] = tea_util_1.default.toJSONString(headers.dingAccessTokenType);
        }
        if (!tea_util_1.default.isUnset(headers.dingOrgId)) {
            realHeaders["dingOrgId"] = tea_util_1.default.toJSONString(headers.dingOrgId);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetEmpsByOrgId", "project_1.0", "HTTP", "GET", "AK", `/v1.0/project/orgs/employees`, "json", req, runtime), new GetEmpsByOrgIdResponse({}));
    }
    async getOrganizatioTaskByIds(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOrganizatioTaskByIdsHeaders({});
        return await this.getOrganizatioTaskByIdsWithOptions(userId, request, headers, runtime);
    }
    async getOrganizatioTaskByIdsWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.taskIds)) {
            query["taskIds"] = request.taskIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetOrganizatioTaskByIds", "project_1.0", "HTTP", "GET", "AK", `/v1.0/project/organizations/users/${userId}/tasks`, "json", req, runtime), new GetOrganizatioTaskByIdsResponse({}));
    }
    async getOrganizationPriorityList(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOrganizationPriorityListHeaders({});
        return await this.getOrganizationPriorityListWithOptions(userId, headers, runtime);
    }
    async getOrganizationPriorityListWithOptions(userId, headers, runtime) {
        userId = openapi_util_1.default.getEncodeParam(userId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetOrganizationPriorityList", "project_1.0", "HTTP", "GET", "AK", `/v1.0/project/organizations/users/${userId}/priorities`, "json", req, runtime), new GetOrganizationPriorityListResponse({}));
    }
    async getOrganizationTask(taskId, userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOrganizationTaskHeaders({});
        return await this.getOrganizationTaskWithOptions(taskId, userId, headers, runtime);
    }
    async getOrganizationTaskWithOptions(taskId, userId, headers, runtime) {
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetOrganizationTask", "project_1.0", "HTTP", "GET", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}`, "json", req, runtime), new GetOrganizationTaskResponse({}));
    }
    async getTbProjectGray(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTbProjectGrayHeaders({});
        return await this.getTbProjectGrayWithOptions(request, headers, runtime);
    }
    async getTbProjectGrayWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.label)) {
            body["label"] = request.label;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.dingAccessTokenType)) {
            realHeaders["dingAccessTokenType"] = tea_util_1.default.toJSONString(headers.dingAccessTokenType);
        }
        if (!tea_util_1.default.isUnset(headers.dingCorpId)) {
            realHeaders["dingCorpId"] = tea_util_1.default.toJSONString(headers.dingCorpId);
        }
        if (!tea_util_1.default.isUnset(headers.dingIsvOrgId)) {
            realHeaders["dingIsvOrgId"] = tea_util_1.default.toJSONString(headers.dingIsvOrgId);
        }
        if (!tea_util_1.default.isUnset(headers.dingOrgId)) {
            realHeaders["dingOrgId"] = tea_util_1.default.toJSONString(headers.dingOrgId);
        }
        if (!tea_util_1.default.isUnset(headers.dingSuiteKey)) {
            realHeaders["dingSuiteKey"] = tea_util_1.default.toJSONString(headers.dingSuiteKey);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("GetTbProjectGray", "project_1.0", "HTTP", "POST", "AK", `/v1.0/project/projects/gray`, "json", req, runtime), new GetTbProjectGrayResponse({}));
    }
    async getTbProjectSource() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTbProjectSourceHeaders({});
        return await this.getTbProjectSourceWithOptions(headers, runtime);
    }
    async getTbProjectSourceWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.dingAccessTokenType)) {
            realHeaders["dingAccessTokenType"] = tea_util_1.default.toJSONString(headers.dingAccessTokenType);
        }
        if (!tea_util_1.default.isUnset(headers.dingCorpId)) {
            realHeaders["dingCorpId"] = tea_util_1.default.toJSONString(headers.dingCorpId);
        }
        if (!tea_util_1.default.isUnset(headers.dingIsvOrgId)) {
            realHeaders["dingIsvOrgId"] = tea_util_1.default.toJSONString(headers.dingIsvOrgId);
        }
        if (!tea_util_1.default.isUnset(headers.dingOrgId)) {
            realHeaders["dingOrgId"] = tea_util_1.default.toJSONString(headers.dingOrgId);
        }
        if (!tea_util_1.default.isUnset(headers.dingSuiteKey)) {
            realHeaders["dingSuiteKey"] = tea_util_1.default.toJSONString(headers.dingSuiteKey);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetTbProjectSource", "project_1.0", "HTTP", "POST", "AK", `/v1.0/project/projects/source`, "json", req, runtime), new GetTbProjectSourceResponse({}));
    }
    async updateOrganizationTaskContent(taskId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateOrganizationTaskContentHeaders({});
        return await this.updateOrganizationTaskContentWithOptions(taskId, userId, request, headers, runtime);
    }
    async updateOrganizationTaskContentWithOptions(taskId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateOrganizationTaskContent", "project_1.0", "HTTP", "PUT", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}/contents`, "json", req, runtime), new UpdateOrganizationTaskContentResponse({}));
    }
    async updateOrganizationTaskDueDate(taskId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateOrganizationTaskDueDateHeaders({});
        return await this.updateOrganizationTaskDueDateWithOptions(taskId, userId, request, headers, runtime);
    }
    async updateOrganizationTaskDueDateWithOptions(taskId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        if (!tea_util_1.default.isUnset(request.dueDate)) {
            body["dueDate"] = request.dueDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateOrganizationTaskDueDate", "project_1.0", "HTTP", "PUT", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}/dueDates`, "json", req, runtime), new UpdateOrganizationTaskDueDateResponse({}));
    }
    async updateOrganizationTaskExecutor(taskId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateOrganizationTaskExecutorHeaders({});
        return await this.updateOrganizationTaskExecutorWithOptions(taskId, userId, request, headers, runtime);
    }
    async updateOrganizationTaskExecutorWithOptions(taskId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        if (!tea_util_1.default.isUnset(request.executorId)) {
            body["executorId"] = request.executorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateOrganizationTaskExecutor", "project_1.0", "HTTP", "PUT", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}/executors`, "json", req, runtime), new UpdateOrganizationTaskExecutorResponse({}));
    }
    async updateOrganizationTaskInvolveMembers(taskId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateOrganizationTaskInvolveMembersHeaders({});
        return await this.updateOrganizationTaskInvolveMembersWithOptions(taskId, userId, request, headers, runtime);
    }
    async updateOrganizationTaskInvolveMembersWithOptions(taskId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.addInvolvers)) {
            body["addInvolvers"] = request.addInvolvers;
        }
        if (!tea_util_1.default.isUnset(request.delInvolvers)) {
            body["delInvolvers"] = request.delInvolvers;
        }
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        if (!tea_util_1.default.isUnset(request.involveMembers)) {
            body["involveMembers"] = request.involveMembers;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateOrganizationTaskInvolveMembers", "project_1.0", "HTTP", "PUT", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}/involveMembers`, "json", req, runtime), new UpdateOrganizationTaskInvolveMembersResponse({}));
    }
    async updateOrganizationTaskNote(taskId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateOrganizationTaskNoteHeaders({});
        return await this.updateOrganizationTaskNoteWithOptions(taskId, userId, request, headers, runtime);
    }
    async updateOrganizationTaskNoteWithOptions(taskId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        if (!tea_util_1.default.isUnset(request.note)) {
            body["note"] = request.note;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateOrganizationTaskNote", "project_1.0", "HTTP", "PUT", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}/notes`, "json", req, runtime), new UpdateOrganizationTaskNoteResponse({}));
    }
    async updateOrganizationTaskPriority(taskId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateOrganizationTaskPriorityHeaders({});
        return await this.updateOrganizationTaskPriorityWithOptions(taskId, userId, request, headers, runtime);
    }
    async updateOrganizationTaskPriorityWithOptions(taskId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateOrganizationTaskPriority", "project_1.0", "HTTP", "PUT", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}/priorities`, "json", req, runtime), new UpdateOrganizationTaskPriorityResponse({}));
    }
    async updateOrganizationTaskStatus(taskId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateOrganizationTaskStatusHeaders({});
        return await this.updateOrganizationTaskStatusWithOptions(taskId, userId, request, headers, runtime);
    }
    async updateOrganizationTaskStatusWithOptions(taskId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        taskId = openapi_util_1.default.getEncodeParam(taskId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.disableActivity)) {
            body["disableActivity"] = request.disableActivity;
        }
        if (!tea_util_1.default.isUnset(request.disableNotification)) {
            body["disableNotification"] = request.disableNotification;
        }
        if (!tea_util_1.default.isUnset(request.isDone)) {
            body["isDone"] = request.isDone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateOrganizationTaskStatus", "project_1.0", "HTTP", "PUT", "AK", `/v1.0/project/organizations/users/${userId}/tasks/${taskId}/states`, "json", req, runtime), new UpdateOrganizationTaskStatusResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map