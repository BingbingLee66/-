"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CampusAddRenterMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusAddRenterMemberHeaders = CampusAddRenterMemberHeaders;
class CampusAddRenterMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extend: 'extend',
            mobile: 'mobile',
            name: 'name',
            renterId: 'renterId',
            type: 'type',
        };
    }
    static types() {
        return {
            extend: 'string',
            mobile: 'string',
            name: 'string',
            renterId: 'number',
            type: 'string',
        };
    }
}
exports.CampusAddRenterMemberRequest = CampusAddRenterMemberRequest;
class CampusAddRenterMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
            userId: 'userId',
            userState: 'userState',
        };
    }
    static types() {
        return {
            unionId: 'string',
            userId: 'string',
            userState: 'string',
        };
    }
}
exports.CampusAddRenterMemberResponseBody = CampusAddRenterMemberResponseBody;
class CampusAddRenterMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusAddRenterMemberResponseBody,
        };
    }
}
exports.CampusAddRenterMemberResponse = CampusAddRenterMemberResponse;
class CampusCreateCampusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusCreateCampusHeaders = CampusCreateCampusHeaders;
class CampusCreateCampusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusName: 'campusName',
            capacity: 'capacity',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            creatorUnionId: 'creatorUnionId',
            description: 'description',
            extend: 'extend',
            location: 'location',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'number',
            campusName: 'string',
            capacity: 'number',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            creatorUnionId: 'string',
            description: 'string',
            extend: 'string',
            location: 'string',
            orderEndTime: 'number',
            orderInfo: 'string',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
}
exports.CampusCreateCampusRequest = CampusCreateCampusRequest;
class CampusCreateCampusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            campusCorpId: 'campusCorpId',
            campusDeptId: 'campusDeptId',
        };
    }
    static types() {
        return {
            campusCorpId: 'string',
            campusDeptId: 'string',
        };
    }
}
exports.CampusCreateCampusResponseBody = CampusCreateCampusResponseBody;
class CampusCreateCampusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusCreateCampusResponseBody,
        };
    }
}
exports.CampusCreateCampusResponse = CampusCreateCampusResponse;
class CampusCreateCampusGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusCreateCampusGroupHeaders = CampusCreateCampusGroupHeaders;
class CampusCreateCampusGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extend: 'extend',
            name: 'name',
        };
    }
    static types() {
        return {
            extend: 'string',
            name: 'string',
        };
    }
}
exports.CampusCreateCampusGroupRequest = CampusCreateCampusGroupRequest;
class CampusCreateCampusGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'number',
        };
    }
}
exports.CampusCreateCampusGroupResponseBody = CampusCreateCampusGroupResponseBody;
class CampusCreateCampusGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusCreateCampusGroupResponseBody,
        };
    }
}
exports.CampusCreateCampusGroupResponse = CampusCreateCampusGroupResponse;
class CampusCreateRenterHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusCreateRenterHeaders = CampusCreateRenterHeaders;
class CampusCreateRenterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            startTime: 'number',
            state: 'number',
        };
    }
}
exports.CampusCreateRenterRequest = CampusCreateRenterRequest;
class CampusCreateRenterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'string',
        };
    }
}
exports.CampusCreateRenterResponseBody = CampusCreateRenterResponseBody;
class CampusCreateRenterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusCreateRenterResponseBody,
        };
    }
}
exports.CampusCreateRenterResponse = CampusCreateRenterResponse;
class CampusDelRenterMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusDelRenterMemberHeaders = CampusDelRenterMemberHeaders;
class CampusDelRenterMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            renterId: 'renterId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            renterId: 'number',
            unionId: 'string',
        };
    }
}
exports.CampusDelRenterMemberRequest = CampusDelRenterMemberRequest;
class CampusDelRenterMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.CampusDelRenterMemberResponseBody = CampusDelRenterMemberResponseBody;
class CampusDelRenterMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusDelRenterMemberResponseBody,
        };
    }
}
exports.CampusDelRenterMemberResponse = CampusDelRenterMemberResponse;
class CampusDeleteCampusGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusDeleteCampusGroupHeaders = CampusDeleteCampusGroupHeaders;
class CampusDeleteCampusGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            campusProjectGroupId: 'campusProjectGroupId',
        };
    }
    static types() {
        return {
            campusProjectGroupId: 'number',
        };
    }
}
exports.CampusDeleteCampusGroupRequest = CampusDeleteCampusGroupRequest;
class CampusDeleteCampusGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.CampusDeleteCampusGroupResponseBody = CampusDeleteCampusGroupResponseBody;
class CampusDeleteCampusGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusDeleteCampusGroupResponseBody,
        };
    }
}
exports.CampusDeleteCampusGroupResponse = CampusDeleteCampusGroupResponse;
class CampusDeleteRenterHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusDeleteRenterHeaders = CampusDeleteRenterHeaders;
class CampusDeleteRenterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'number',
        };
    }
}
exports.CampusDeleteRenterRequest = CampusDeleteRenterRequest;
class CampusDeleteRenterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.CampusDeleteRenterResponse = CampusDeleteRenterResponse;
class CampusGetCampusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusGetCampusHeaders = CampusGetCampusHeaders;
class CampusGetCampusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            campusDeptId: 'campusDeptId',
        };
    }
    static types() {
        return {
            campusDeptId: 'number',
        };
    }
}
exports.CampusGetCampusRequest = CampusGetCampusRequest;
class CampusGetCampusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusCorpId: 'campusCorpId',
            campusDeptId: 'campusDeptId',
            campusName: 'campusName',
            capacity: 'capacity',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            description: 'description',
            extend: 'extend',
            location: 'location',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'string',
            campusCorpId: 'string',
            campusDeptId: 'number',
            campusName: 'string',
            capacity: 'string',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            description: 'string',
            extend: 'string',
            location: 'string',
            orderEndTime: 'number',
            orderInfo: 'string',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
}
exports.CampusGetCampusResponseBody = CampusGetCampusResponseBody;
class CampusGetCampusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusGetCampusResponseBody,
        };
    }
}
exports.CampusGetCampusResponse = CampusGetCampusResponse;
class CampusGetCampusGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusGetCampusGroupHeaders = CampusGetCampusGroupHeaders;
class CampusGetCampusGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'number',
        };
    }
}
exports.CampusGetCampusGroupRequest = CampusGetCampusGroupRequest;
class CampusGetCampusGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extend: 'extend',
            projectGroupName: 'projectGroupName',
        };
    }
    static types() {
        return {
            extend: 'string',
            projectGroupName: 'string',
        };
    }
}
exports.CampusGetCampusGroupResponseBody = CampusGetCampusGroupResponseBody;
class CampusGetCampusGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusGetCampusGroupResponseBody,
        };
    }
}
exports.CampusGetCampusGroupResponse = CampusGetCampusGroupResponse;
class CampusGetRenterHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusGetRenterHeaders = CampusGetRenterHeaders;
class CampusGetRenterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'number',
        };
    }
}
exports.CampusGetRenterRequest = CampusGetRenterRequest;
class CampusGetRenterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bindRenterCorpId: 'bindRenterCorpId',
            bindTime: 'bindTime',
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            renterDeptId: 'renterDeptId',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            bindRenterCorpId: 'string',
            bindTime: 'number',
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            renterDeptId: 'number',
            startTime: 'number',
            state: 'number',
        };
    }
}
exports.CampusGetRenterResponseBody = CampusGetRenterResponseBody;
class CampusGetRenterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusGetRenterResponseBody,
        };
    }
}
exports.CampusGetRenterResponse = CampusGetRenterResponse;
class CampusGetRenterMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusGetRenterMemberHeaders = CampusGetRenterMemberHeaders;
class CampusGetRenterMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            renterId: 'renterId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            renterId: 'number',
            unionId: 'string',
        };
    }
}
exports.CampusGetRenterMemberRequest = CampusGetRenterMemberRequest;
class CampusGetRenterMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extend: 'extend',
            inviteState: 'inviteState',
            name: 'name',
            state: 'state',
            type: 'type',
            userId: 'userId',
        };
    }
    static types() {
        return {
            extend: 'string',
            inviteState: 'number',
            name: 'string',
            state: 'string',
            type: 'string',
            userId: 'string',
        };
    }
}
exports.CampusGetRenterMemberResponseBody = CampusGetRenterMemberResponseBody;
class CampusGetRenterMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusGetRenterMemberResponseBody,
        };
    }
}
exports.CampusGetRenterMemberResponse = CampusGetRenterMemberResponse;
class CampusListCampusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusListCampusHeaders = CampusListCampusHeaders;
class CampusListCampusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupDeptId: 'groupDeptId',
        };
    }
    static types() {
        return {
            groupDeptId: 'number',
        };
    }
}
exports.CampusListCampusRequest = CampusListCampusRequest;
class CampusListCampusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListCampusResponseBodyResult },
        };
    }
}
exports.CampusListCampusResponseBody = CampusListCampusResponseBody;
class CampusListCampusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusListCampusResponseBody,
        };
    }
}
exports.CampusListCampusResponse = CampusListCampusResponse;
class CampusListCampusGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusListCampusGroupHeaders = CampusListCampusGroupHeaders;
class CampusListCampusGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListCampusGroupResponseBodyResult },
        };
    }
}
exports.CampusListCampusGroupResponseBody = CampusListCampusGroupResponseBody;
class CampusListCampusGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusListCampusGroupResponseBody,
        };
    }
}
exports.CampusListCampusGroupResponse = CampusListCampusGroupResponse;
class CampusListRenterHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusListRenterHeaders = CampusListRenterHeaders;
class CampusListRenterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListRenterResponseBodyResult },
        };
    }
}
exports.CampusListRenterResponseBody = CampusListRenterResponseBody;
class CampusListRenterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusListRenterResponseBody,
        };
    }
}
exports.CampusListRenterResponse = CampusListRenterResponse;
class CampusListRenterMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusListRenterMembersHeaders = CampusListRenterMembersHeaders;
class CampusListRenterMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'number',
        };
    }
}
exports.CampusListRenterMembersRequest = CampusListRenterMembersRequest;
class CampusListRenterMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListRenterMembersResponseBodyResult },
        };
    }
}
exports.CampusListRenterMembersResponseBody = CampusListRenterMembersResponseBody;
class CampusListRenterMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusListRenterMembersResponseBody,
        };
    }
}
exports.CampusListRenterMembersResponse = CampusListRenterMembersResponse;
class CampusUpdateCampusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusUpdateCampusHeaders = CampusUpdateCampusHeaders;
class CampusUpdateCampusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusDeptId: 'campusDeptId',
            campusName: 'campusName',
            capacity: 'capacity',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            description: 'description',
            extend: 'extend',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'number',
            campusDeptId: 'number',
            campusName: 'string',
            capacity: 'number',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            description: 'string',
            extend: 'string',
            orderEndTime: 'number',
            orderInfo: 'number',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
}
exports.CampusUpdateCampusRequest = CampusUpdateCampusRequest;
class CampusUpdateCampusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.CampusUpdateCampusResponseBody = CampusUpdateCampusResponseBody;
class CampusUpdateCampusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusUpdateCampusResponseBody,
        };
    }
}
exports.CampusUpdateCampusResponse = CampusUpdateCampusResponse;
class CampusUpdateCampusGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusUpdateCampusGroupHeaders = CampusUpdateCampusGroupHeaders;
class CampusUpdateCampusGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            campusProjectGroupId: 'campusProjectGroupId',
            extend: 'extend',
            name: 'name',
        };
    }
    static types() {
        return {
            campusProjectGroupId: 'number',
            extend: 'string',
            name: 'string',
        };
    }
}
exports.CampusUpdateCampusGroupRequest = CampusUpdateCampusGroupRequest;
class CampusUpdateCampusGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.CampusUpdateCampusGroupResponseBody = CampusUpdateCampusGroupResponseBody;
class CampusUpdateCampusGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusUpdateCampusGroupResponseBody,
        };
    }
}
exports.CampusUpdateCampusGroupResponse = CampusUpdateCampusGroupResponse;
class CampusUpdateRenterHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusUpdateRenterHeaders = CampusUpdateRenterHeaders;
class CampusUpdateRenterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            renterId: 'renterId',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            renterId: 'number',
            startTime: 'number',
            state: 'number',
        };
    }
}
exports.CampusUpdateRenterRequest = CampusUpdateRenterRequest;
class CampusUpdateRenterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'string',
        };
    }
}
exports.CampusUpdateRenterResponseBody = CampusUpdateRenterResponseBody;
class CampusUpdateRenterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusUpdateRenterResponseBody,
        };
    }
}
exports.CampusUpdateRenterResponse = CampusUpdateRenterResponse;
class CampusUpdateRenterMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CampusUpdateRenterMemberHeaders = CampusUpdateRenterMemberHeaders;
class CampusUpdateRenterMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extend: 'extend',
            name: 'name',
            renterId: 'renterId',
            type: 'type',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            extend: 'string',
            name: 'string',
            renterId: 'number',
            type: 'string',
            unionId: 'string',
        };
    }
}
exports.CampusUpdateRenterMemberRequest = CampusUpdateRenterMemberRequest;
class CampusUpdateRenterMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.CampusUpdateRenterMemberResponseBody = CampusUpdateRenterMemberResponseBody;
class CampusUpdateRenterMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CampusUpdateRenterMemberResponseBody,
        };
    }
}
exports.CampusUpdateRenterMemberResponse = CampusUpdateRenterMemberResponse;
class CustomizeContactCreateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactCreateHeaders = CustomizeContactCreateHeaders;
class CustomizeContactCreateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
        };
    }
    static types() {
        return {
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
        };
    }
}
exports.CustomizeContactCreateRequest = CustomizeContactCreateRequest;
class CustomizeContactCreateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: CustomizeContactCreateResponseBodyContent,
        };
    }
}
exports.CustomizeContactCreateResponseBody = CustomizeContactCreateResponseBody;
class CustomizeContactCreateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactCreateResponseBody,
        };
    }
}
exports.CustomizeContactCreateResponse = CustomizeContactCreateResponse;
class CustomizeContactDeleteHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactDeleteHeaders = CustomizeContactDeleteHeaders;
class CustomizeContactDeleteRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.CustomizeContactDeleteRequest = CustomizeContactDeleteRequest;
class CustomizeContactDeleteResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
}
exports.CustomizeContactDeleteResponseBody = CustomizeContactDeleteResponseBody;
class CustomizeContactDeleteResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactDeleteResponseBody,
        };
    }
}
exports.CustomizeContactDeleteResponse = CustomizeContactDeleteResponse;
class CustomizeContactDeptCreateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactDeptCreateHeaders = CustomizeContactDeptCreateHeaders;
class CustomizeContactDeptCreateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
            refId: 'refId',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
            refId: 'number',
            type: 'number',
        };
    }
}
exports.CustomizeContactDeptCreateRequest = CustomizeContactDeptCreateRequest;
class CustomizeContactDeptCreateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'number',
        };
    }
}
exports.CustomizeContactDeptCreateResponseBody = CustomizeContactDeptCreateResponseBody;
class CustomizeContactDeptCreateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactDeptCreateResponseBody,
        };
    }
}
exports.CustomizeContactDeptCreateResponse = CustomizeContactDeptCreateResponse;
class CustomizeContactDeptDeleteHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactDeptDeleteHeaders = CustomizeContactDeptDeleteHeaders;
class CustomizeContactDeptDeleteRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
        };
    }
}
exports.CustomizeContactDeptDeleteRequest = CustomizeContactDeptDeleteRequest;
class CustomizeContactDeptDeleteResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
}
exports.CustomizeContactDeptDeleteResponseBody = CustomizeContactDeptDeleteResponseBody;
class CustomizeContactDeptDeleteResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactDeptDeleteResponseBody,
        };
    }
}
exports.CustomizeContactDeptDeleteResponse = CustomizeContactDeptDeleteResponse;
class CustomizeContactDeptInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactDeptInfoHeaders = CustomizeContactDeptInfoHeaders;
class CustomizeContactDeptInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
        };
    }
}
exports.CustomizeContactDeptInfoRequest = CustomizeContactDeptInfoRequest;
class CustomizeContactDeptInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: CustomizeContactDeptInfoResponseBodyContent,
        };
    }
}
exports.CustomizeContactDeptInfoResponseBody = CustomizeContactDeptInfoResponseBody;
class CustomizeContactDeptInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactDeptInfoResponseBody,
        };
    }
}
exports.CustomizeContactDeptInfoResponse = CustomizeContactDeptInfoResponse;
class CustomizeContactDeptListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactDeptListHeaders = CustomizeContactDeptListHeaders;
class CustomizeContactDeptListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
        };
    }
}
exports.CustomizeContactDeptListRequest = CustomizeContactDeptListRequest;
class CustomizeContactDeptListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CustomizeContactDeptListResponseBodyContent },
        };
    }
}
exports.CustomizeContactDeptListResponseBody = CustomizeContactDeptListResponseBody;
class CustomizeContactDeptListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactDeptListResponseBody,
        };
    }
}
exports.CustomizeContactDeptListResponse = CustomizeContactDeptListResponse;
class CustomizeContactDeptUpdateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactDeptUpdateHeaders = CustomizeContactDeptUpdateHeaders;
class CustomizeContactDeptUpdateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
        };
    }
}
exports.CustomizeContactDeptUpdateRequest = CustomizeContactDeptUpdateRequest;
class CustomizeContactDeptUpdateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'number',
        };
    }
}
exports.CustomizeContactDeptUpdateResponseBody = CustomizeContactDeptUpdateResponseBody;
class CustomizeContactDeptUpdateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactDeptUpdateResponseBody,
        };
    }
}
exports.CustomizeContactDeptUpdateResponse = CustomizeContactDeptUpdateResponse;
class CustomizeContactEmpAddHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactEmpAddHeaders = CustomizeContactEmpAddHeaders;
class CustomizeContactEmpAddRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CustomizeContactEmpAddRequest = CustomizeContactEmpAddRequest;
class CustomizeContactEmpAddResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
}
exports.CustomizeContactEmpAddResponseBody = CustomizeContactEmpAddResponseBody;
class CustomizeContactEmpAddResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactEmpAddResponseBody,
        };
    }
}
exports.CustomizeContactEmpAddResponse = CustomizeContactEmpAddResponse;
class CustomizeContactEmpDeleteHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactEmpDeleteHeaders = CustomizeContactEmpDeleteHeaders;
class CustomizeContactEmpDeleteRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CustomizeContactEmpDeleteRequest = CustomizeContactEmpDeleteRequest;
class CustomizeContactEmpDeleteResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
}
exports.CustomizeContactEmpDeleteResponseBody = CustomizeContactEmpDeleteResponseBody;
class CustomizeContactEmpDeleteResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactEmpDeleteResponseBody,
        };
    }
}
exports.CustomizeContactEmpDeleteResponse = CustomizeContactEmpDeleteResponse;
class CustomizeContactEmpListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactEmpListHeaders = CustomizeContactEmpListHeaders;
class CustomizeContactEmpListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
}
exports.CustomizeContactEmpListRequest = CustomizeContactEmpListRequest;
class CustomizeContactEmpListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CustomizeContactEmpListResponseBodyContent },
        };
    }
}
exports.CustomizeContactEmpListResponseBody = CustomizeContactEmpListResponseBody;
class CustomizeContactEmpListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactEmpListResponseBody,
        };
    }
}
exports.CustomizeContactEmpListResponse = CustomizeContactEmpListResponse;
class CustomizeContactListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactListHeaders = CustomizeContactListHeaders;
class CustomizeContactListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CustomizeContactListResponseBodyContent },
        };
    }
}
exports.CustomizeContactListResponseBody = CustomizeContactListResponseBody;
class CustomizeContactListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactListResponseBody,
        };
    }
}
exports.CustomizeContactListResponse = CustomizeContactListResponse;
class CustomizeContactUpdateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CustomizeContactUpdateHeaders = CustomizeContactUpdateHeaders;
class CustomizeContactUpdateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
        };
    }
    static types() {
        return {
            code: 'string',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
        };
    }
}
exports.CustomizeContactUpdateRequest = CustomizeContactUpdateRequest;
class CustomizeContactUpdateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
}
exports.CustomizeContactUpdateResponseBody = CustomizeContactUpdateResponseBody;
class CustomizeContactUpdateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CustomizeContactUpdateResponseBody,
        };
    }
}
exports.CustomizeContactUpdateResponse = CustomizeContactUpdateResponse;
class DigitalStoreContactInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreContactInfoHeaders = DigitalStoreContactInfoHeaders;
class DigitalStoreContactInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            rootDeptId: 'rootDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            rootDeptId: 'number',
        };
    }
}
exports.DigitalStoreContactInfoResponseBody = DigitalStoreContactInfoResponseBody;
class DigitalStoreContactInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreContactInfoResponseBody,
        };
    }
}
exports.DigitalStoreContactInfoResponse = DigitalStoreContactInfoResponse;
class DigitalStoreGroupInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreGroupInfoHeaders = DigitalStoreGroupInfoHeaders;
class DigitalStoreGroupInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'number',
        };
    }
}
exports.DigitalStoreGroupInfoRequest = DigitalStoreGroupInfoRequest;
class DigitalStoreGroupInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            storeIdList: 'storeIdList',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
            storeIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.DigitalStoreGroupInfoResponseBody = DigitalStoreGroupInfoResponseBody;
class DigitalStoreGroupInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreGroupInfoResponseBody,
        };
    }
}
exports.DigitalStoreGroupInfoResponse = DigitalStoreGroupInfoResponse;
class DigitalStoreGroupsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreGroupsHeaders = DigitalStoreGroupsHeaders;
class DigitalStoreGroupsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreGroupsResponseBodyContent },
        };
    }
}
exports.DigitalStoreGroupsResponseBody = DigitalStoreGroupsResponseBody;
class DigitalStoreGroupsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreGroupsResponseBody,
        };
    }
}
exports.DigitalStoreGroupsResponse = DigitalStoreGroupsResponse;
class DigitalStoreNodeInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreNodeInfoHeaders = DigitalStoreNodeInfoHeaders;
class DigitalStoreNodeInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            nodeId: 'nodeId',
        };
    }
    static types() {
        return {
            code: 'string',
            nodeId: 'number',
        };
    }
}
exports.DigitalStoreNodeInfoRequest = DigitalStoreNodeInfoRequest;
class DigitalStoreNodeInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            parentId: 'parentId',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
            parentId: 'number',
            type: 'number',
        };
    }
}
exports.DigitalStoreNodeInfoResponseBody = DigitalStoreNodeInfoResponseBody;
class DigitalStoreNodeInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreNodeInfoResponseBody,
        };
    }
}
exports.DigitalStoreNodeInfoResponse = DigitalStoreNodeInfoResponse;
class DigitalStoreRightsInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreRightsInfoHeaders = DigitalStoreRightsInfoHeaders;
class DigitalStoreRightsInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            quantity: 'quantity',
            rightsCode: 'rightsCode',
            rightsName: 'rightsName',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            quantity: 'number',
            rightsCode: 'string',
            rightsName: 'string',
            startTime: 'number',
        };
    }
}
exports.DigitalStoreRightsInfoResponseBody = DigitalStoreRightsInfoResponseBody;
class DigitalStoreRightsInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreRightsInfoResponseBody,
        };
    }
}
exports.DigitalStoreRightsInfoResponse = DigitalStoreRightsInfoResponse;
class DigitalStoreRolesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreRolesHeaders = DigitalStoreRolesHeaders;
class DigitalStoreRolesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreRolesResponseBodyContent },
        };
    }
}
exports.DigitalStoreRolesResponseBody = DigitalStoreRolesResponseBody;
class DigitalStoreRolesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreRolesResponseBody,
        };
    }
}
exports.DigitalStoreRolesResponse = DigitalStoreRolesResponse;
class DigitalStoreStoreInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreStoreInfoHeaders = DigitalStoreStoreInfoHeaders;
class DigitalStoreStoreInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            storeId: 'storeId',
        };
    }
    static types() {
        return {
            code: 'string',
            storeId: 'number',
        };
    }
}
exports.DigitalStoreStoreInfoRequest = DigitalStoreStoreInfoRequest;
class DigitalStoreStoreInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            businessHours: 'businessHours',
            latitude: 'latitude',
            locationAddress: 'locationAddress',
            longitude: 'longitude',
            name: 'name',
            parentId: 'parentId',
            status: 'status',
            storeAcreage: 'storeAcreage',
            storeBandwidth: 'storeBandwidth',
            storeCode: 'storeCode',
            storeId: 'storeId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            businessHours: 'string',
            latitude: 'string',
            locationAddress: 'string',
            longitude: 'string',
            name: 'string',
            parentId: 'number',
            status: 'string',
            storeAcreage: 'string',
            storeBandwidth: 'string',
            storeCode: 'string',
            storeId: 'number',
            telephone: 'string',
        };
    }
}
exports.DigitalStoreStoreInfoResponseBody = DigitalStoreStoreInfoResponseBody;
class DigitalStoreStoreInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreStoreInfoResponseBody,
        };
    }
}
exports.DigitalStoreStoreInfoResponse = DigitalStoreStoreInfoResponse;
class DigitalStoreSubNodesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreSubNodesHeaders = DigitalStoreSubNodesHeaders;
class DigitalStoreSubNodesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            nodeId: 'nodeId',
        };
    }
    static types() {
        return {
            code: 'string',
            nodeId: 'number',
        };
    }
}
exports.DigitalStoreSubNodesRequest = DigitalStoreSubNodesRequest;
class DigitalStoreSubNodesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreSubNodesResponseBodyContent },
        };
    }
}
exports.DigitalStoreSubNodesResponseBody = DigitalStoreSubNodesResponseBody;
class DigitalStoreSubNodesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreSubNodesResponseBody,
        };
    }
}
exports.DigitalStoreSubNodesResponse = DigitalStoreSubNodesResponse;
class DigitalStoreUserInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreUserInfoHeaders = DigitalStoreUserInfoHeaders;
class DigitalStoreUserInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            userId: 'userId',
        };
    }
    static types() {
        return {
            code: 'string',
            userId: 'string',
        };
    }
}
exports.DigitalStoreUserInfoRequest = DigitalStoreUserInfoRequest;
class DigitalStoreUserInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            scopeList: 'scopeList',
            storeList: 'storeList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            scopeList: { 'type': 'array', 'itemType': 'number' },
            storeList: { 'type': 'array', 'itemType': 'number' },
            userId: 'string',
        };
    }
}
exports.DigitalStoreUserInfoResponseBody = DigitalStoreUserInfoResponseBody;
class DigitalStoreUserInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreUserInfoResponseBody,
        };
    }
}
exports.DigitalStoreUserInfoResponse = DigitalStoreUserInfoResponse;
class DigitalStoreUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DigitalStoreUsersHeaders = DigitalStoreUsersHeaders;
class DigitalStoreUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            nodeId: 'nodeId',
        };
    }
    static types() {
        return {
            code: 'string',
            nodeId: 'number',
        };
    }
}
exports.DigitalStoreUsersRequest = DigitalStoreUsersRequest;
class DigitalStoreUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreUsersResponseBodyContent },
        };
    }
}
exports.DigitalStoreUsersResponseBody = DigitalStoreUsersResponseBody;
class DigitalStoreUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DigitalStoreUsersResponseBody,
        };
    }
}
exports.DigitalStoreUsersResponse = DigitalStoreUsersResponse;
class ExternalQueryExternalAppOrgsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExternalQueryExternalAppOrgsHeaders = ExternalQueryExternalAppOrgsHeaders;
class ExternalQueryExternalAppOrgsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            externalType: 'externalType',
        };
    }
    static types() {
        return {
            externalType: 'string',
        };
    }
}
exports.ExternalQueryExternalAppOrgsRequest = ExternalQueryExternalAppOrgsRequest;
class ExternalQueryExternalAppOrgsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ExternalQueryExternalAppOrgsResponseBodyResult },
        };
    }
}
exports.ExternalQueryExternalAppOrgsResponseBody = ExternalQueryExternalAppOrgsResponseBody;
class ExternalQueryExternalAppOrgsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ExternalQueryExternalAppOrgsResponseBody,
        };
    }
}
exports.ExternalQueryExternalAppOrgsResponse = ExternalQueryExternalAppOrgsResponse;
class ExternalQueryExternalBelongMainOrgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExternalQueryExternalBelongMainOrgHeaders = ExternalQueryExternalBelongMainOrgHeaders;
class ExternalQueryExternalBelongMainOrgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            externalType: 'externalType',
        };
    }
    static types() {
        return {
            externalType: 'string',
        };
    }
}
exports.ExternalQueryExternalBelongMainOrgRequest = ExternalQueryExternalBelongMainOrgRequest;
class ExternalQueryExternalBelongMainOrgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
        };
    }
}
exports.ExternalQueryExternalBelongMainOrgResponseBody = ExternalQueryExternalBelongMainOrgResponseBody;
class ExternalQueryExternalBelongMainOrgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ExternalQueryExternalBelongMainOrgResponseBody,
        };
    }
}
exports.ExternalQueryExternalBelongMainOrgResponse = ExternalQueryExternalBelongMainOrgResponse;
class ExternalQueryExternalOrgsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExternalQueryExternalOrgsHeaders = ExternalQueryExternalOrgsHeaders;
class ExternalQueryExternalOrgsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            externalType: 'externalType',
        };
    }
    static types() {
        return {
            externalType: 'string',
        };
    }
}
exports.ExternalQueryExternalOrgsRequest = ExternalQueryExternalOrgsRequest;
class ExternalQueryExternalOrgsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ExternalQueryExternalOrgsResponseBodyResult },
        };
    }
}
exports.ExternalQueryExternalOrgsResponseBody = ExternalQueryExternalOrgsResponseBody;
class ExternalQueryExternalOrgsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ExternalQueryExternalOrgsResponseBody,
        };
    }
}
exports.ExternalQueryExternalOrgsResponse = ExternalQueryExternalOrgsResponse;
class IndustryManufactureCommonEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureCommonEventHeaders = IndustryManufactureCommonEventHeaders;
class IndustryManufactureCommonEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            bizData: 'bizData',
            eventType: 'eventType',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            bizData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            eventType: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.IndustryManufactureCommonEventRequest = IndustryManufactureCommonEventRequest;
class IndustryManufactureCommonEventResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorMsg: 'errorMsg',
            requestId: 'requestId',
            result: 'result',
        };
    }
    static types() {
        return {
            errorMsg: 'string',
            requestId: 'string',
            result: IndustryManufactureCommonEventResponseBodyResult,
        };
    }
}
exports.IndustryManufactureCommonEventResponseBody = IndustryManufactureCommonEventResponseBody;
class IndustryManufactureCommonEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureCommonEventResponseBody,
        };
    }
}
exports.IndustryManufactureCommonEventResponse = IndustryManufactureCommonEventResponse;
class IndustryManufactureCostRecordListGetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureCostRecordListGetHeaders = IndustryManufactureCostRecordListGetHeaders;
class IndustryManufactureCostRecordListGetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            instanceId: 'instanceId',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orderNo: 'orderNo',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            productionTaskNo: 'productionTaskNo',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            instanceId: 'string',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orderNo: 'string',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            productionTaskNo: 'string',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
}
exports.IndustryManufactureCostRecordListGetRequest = IndustryManufactureCostRecordListGetRequest;
class IndustryManufactureCostRecordListGetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureCostRecordListGetResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
}
exports.IndustryManufactureCostRecordListGetResponseBody = IndustryManufactureCostRecordListGetResponseBody;
class IndustryManufactureCostRecordListGetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureCostRecordListGetResponseBody,
        };
    }
}
exports.IndustryManufactureCostRecordListGetResponse = IndustryManufactureCostRecordListGetResponse;
class IndustryManufactureFeeListGetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureFeeListGetHeaders = IndustryManufactureFeeListGetHeaders;
class IndustryManufactureFeeListGetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            productionTaskNo: 'productionTaskNo',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
            type: 'type',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            productionTaskNo: 'string',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
            type: 'string',
        };
    }
}
exports.IndustryManufactureFeeListGetRequest = IndustryManufactureFeeListGetRequest;
class IndustryManufactureFeeListGetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureFeeListGetResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
}
exports.IndustryManufactureFeeListGetResponseBody = IndustryManufactureFeeListGetResponseBody;
class IndustryManufactureFeeListGetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureFeeListGetResponseBody,
        };
    }
}
exports.IndustryManufactureFeeListGetResponse = IndustryManufactureFeeListGetResponse;
class IndustryManufactureLabourCostHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureLabourCostHeaders = IndustryManufactureLabourCostHeaders;
class IndustryManufactureLabourCostRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            processNo: 'processNo',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            isvOrgId: 'string',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            processNo: 'string',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
}
exports.IndustryManufactureLabourCostRequest = IndustryManufactureLabourCostRequest;
class IndustryManufactureLabourCostResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureLabourCostResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
}
exports.IndustryManufactureLabourCostResponseBody = IndustryManufactureLabourCostResponseBody;
class IndustryManufactureLabourCostResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureLabourCostResponseBody,
        };
    }
}
exports.IndustryManufactureLabourCostResponse = IndustryManufactureLabourCostResponse;
class IndustryManufactureMaterialListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMaterialListHeaders = IndustryManufactureMaterialListHeaders;
class IndustryManufactureMaterialListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            currentPage: 'currentPage',
            cursor: 'cursor',
            endTime: 'endTime',
            instanceId: 'instanceId',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageSize: 'pageSize',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            currentPage: 'number',
            cursor: 'number',
            endTime: 'number',
            instanceId: 'string',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageSize: 'number',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
}
exports.IndustryManufactureMaterialListRequest = IndustryManufactureMaterialListRequest;
class IndustryManufactureMaterialListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureMaterialListResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
}
exports.IndustryManufactureMaterialListResponseBody = IndustryManufactureMaterialListResponseBody;
class IndustryManufactureMaterialListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMaterialListResponseBody,
        };
    }
}
exports.IndustryManufactureMaterialListResponse = IndustryManufactureMaterialListResponse;
class IndustryManufactureMesDispatchTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesDispatchTaskHeaders = IndustryManufactureMesDispatchTaskHeaders;
class IndustryManufactureMesDispatchTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            defectsAmount: 'defectsAmount',
            dispatchStaffName: 'dispatchStaffName',
            dispatchStaffNo: 'dispatchStaffNo',
            fineAmount: 'fineAmount',
            overdue: 'overdue',
            planQuantity: 'planQuantity',
            priority: 'priority',
            processName: 'processName',
            processUuid: 'processUuid',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            projectCode: 'projectCode',
            projectId: 'projectId',
            projectStatus: 'projectStatus',
            taskOperators: 'taskOperators',
            taskPlanEndTime: 'taskPlanEndTime',
            taskPlanStartTime: 'taskPlanStartTime',
            taskStatus: 'taskStatus',
            taskType: 'taskType',
            teamId: 'teamId',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            defectsAmount: 'string',
            dispatchStaffName: 'string',
            dispatchStaffNo: 'string',
            fineAmount: 'string',
            overdue: 'number',
            planQuantity: 'number',
            priority: 'number',
            processName: 'string',
            processUuid: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            projectCode: 'string',
            projectId: 'string',
            projectStatus: 'string',
            taskOperators: 'string',
            taskPlanEndTime: 'string',
            taskPlanStartTime: 'string',
            taskStatus: 'string',
            taskType: 'string',
            teamId: 'string',
            uuid: 'string',
        };
    }
}
exports.IndustryManufactureMesDispatchTaskRequest = IndustryManufactureMesDispatchTaskRequest;
class IndustryManufactureMesDispatchTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesDispatchTaskResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesDispatchTaskResponseBody = IndustryManufactureMesDispatchTaskResponseBody;
class IndustryManufactureMesDispatchTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesDispatchTaskResponseBody,
        };
    }
}
exports.IndustryManufactureMesDispatchTaskResponse = IndustryManufactureMesDispatchTaskResponse;
class IndustryManufactureMesMaterialHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesMaterialHeaders = IndustryManufactureMesMaterialHeaders;
class IndustryManufactureMesMaterialRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            category: 'category',
            extendData: 'extendData',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            prop: 'prop',
            unit: 'unit',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            category: 'string',
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesMaterialRequestExtendData },
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            prop: 'string',
            unit: 'string',
            uuid: 'string',
        };
    }
}
exports.IndustryManufactureMesMaterialRequest = IndustryManufactureMesMaterialRequest;
class IndustryManufactureMesMaterialResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesMaterialResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesMaterialResponseBody = IndustryManufactureMesMaterialResponseBody;
class IndustryManufactureMesMaterialResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesMaterialResponseBody,
        };
    }
}
exports.IndustryManufactureMesMaterialResponse = IndustryManufactureMesMaterialResponse;
class IndustryManufactureMesOutPlanHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesOutPlanHeaders = IndustryManufactureMesOutPlanHeaders;
class IndustryManufactureMesOutPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            approvalStatus: 'approvalStatus',
            approver: 'approver',
            baseDataName: 'baseDataName',
            outSourceProjectCode: 'outSourceProjectCode',
            outSourceTeamId: 'outSourceTeamId',
            price: 'price',
            processIdentificationCode: 'processIdentificationCode',
            processUuids: 'processUuids',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            projectCode: 'projectCode',
            projectId: 'projectId',
            sendPlanQuantity: 'sendPlanQuantity',
            supplierCode: 'supplierCode',
            supplierName: 'supplierName',
            totalWage: 'totalWage',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            approvalStatus: 'string',
            approver: 'string',
            baseDataName: 'string',
            outSourceProjectCode: 'string',
            outSourceTeamId: 'string',
            price: 'string',
            processIdentificationCode: 'string',
            processUuids: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            projectCode: 'string',
            projectId: 'string',
            sendPlanQuantity: 'string',
            supplierCode: 'string',
            supplierName: 'string',
            totalWage: 'string',
            uuid: 'string',
        };
    }
}
exports.IndustryManufactureMesOutPlanRequest = IndustryManufactureMesOutPlanRequest;
class IndustryManufactureMesOutPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesOutPlanResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesOutPlanResponseBody = IndustryManufactureMesOutPlanResponseBody;
class IndustryManufactureMesOutPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesOutPlanResponseBody,
        };
    }
}
exports.IndustryManufactureMesOutPlanResponse = IndustryManufactureMesOutPlanResponse;
class IndustryManufactureMesOutputHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesOutputHeaders = IndustryManufactureMesOutputHeaders;
class IndustryManufactureMesOutputRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            approveStatus: 'approveStatus',
            baseDataName: 'baseDataName',
            defectsAmount: 'defectsAmount',
            defectsReason: 'defectsReason',
            fineAmount: 'fineAmount',
            hasQualityTest: 'hasQualityTest',
            overdue: 'overdue',
            planQuantity: 'planQuantity',
            priority: 'priority',
            processName: 'processName',
            processUuid: 'processUuid',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            projectCode: 'projectCode',
            projectId: 'projectId',
            projectStatus: 'projectStatus',
            qualityTestStatus: 'qualityTestStatus',
            taskPlanEndTime: 'taskPlanEndTime',
            taskPlanStartTime: 'taskPlanStartTime',
            taskStatus: 'taskStatus',
            taskType: 'taskType',
            taskUuid: 'taskUuid',
            teamId: 'teamId',
            userId: 'userId',
            userName: 'userName',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            approveStatus: 'string',
            baseDataName: 'string',
            defectsAmount: 'string',
            defectsReason: 'string',
            fineAmount: 'string',
            hasQualityTest: 'string',
            overdue: 'number',
            planQuantity: 'number',
            priority: 'number',
            processName: 'string',
            processUuid: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            projectCode: 'string',
            projectId: 'string',
            projectStatus: 'string',
            qualityTestStatus: 'string',
            taskPlanEndTime: 'string',
            taskPlanStartTime: 'string',
            taskStatus: 'string',
            taskType: 'string',
            taskUuid: 'string',
            teamId: 'string',
            userId: 'string',
            userName: 'string',
            uuid: 'string',
        };
    }
}
exports.IndustryManufactureMesOutputRequest = IndustryManufactureMesOutputRequest;
class IndustryManufactureMesOutputResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesOutputResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesOutputResponseBody = IndustryManufactureMesOutputResponseBody;
class IndustryManufactureMesOutputResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesOutputResponseBody,
        };
    }
}
exports.IndustryManufactureMesOutputResponse = IndustryManufactureMesOutputResponse;
class IndustryManufactureMesProcessHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesProcessHeaders = IndustryManufactureMesProcessHeaders;
class IndustryManufactureMesProcessRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            extendData: 'extendData',
            name: 'name',
            needDispatch: 'needDispatch',
            needQualityTest: 'needQualityTest',
            no: 'no',
            price: 'price',
            prop: 'prop',
            remark: 'remark',
            sop: 'sop',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesProcessRequestExtendData },
            name: 'string',
            needDispatch: 'string',
            needQualityTest: 'string',
            no: 'string',
            price: 'string',
            prop: 'string',
            remark: 'string',
            sop: 'string',
            uuid: 'string',
        };
    }
}
exports.IndustryManufactureMesProcessRequest = IndustryManufactureMesProcessRequest;
class IndustryManufactureMesProcessResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesProcessResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesProcessResponseBody = IndustryManufactureMesProcessResponseBody;
class IndustryManufactureMesProcessResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesProcessResponseBody,
        };
    }
}
exports.IndustryManufactureMesProcessResponse = IndustryManufactureMesProcessResponse;
class IndustryManufactureMesProductionPlanHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesProductionPlanHeaders = IndustryManufactureMesProductionPlanHeaders;
class IndustryManufactureMesProductionPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            actualEndTime: 'actualEndTime',
            actualStartTime: 'actualStartTime',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            bomUuid: 'bomUuid',
            events: 'events',
            extendData: 'extendData',
            no: 'no',
            overdue: 'overdue',
            planEndTime: 'planEndTime',
            planQuantity: 'planQuantity',
            planStartTime: 'planStartTime',
            processUuids: 'processUuids',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            qualifiedQuantity: 'qualifiedQuantity',
            sellOrderNo: 'sellOrderNo',
            status: 'status',
            teamList: 'teamList',
            title: 'title',
            type: 'type',
            unit: 'unit',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            actualEndTime: 'string',
            actualStartTime: 'string',
            appKey: 'string',
            baseDataName: 'string',
            bomUuid: 'string',
            events: { 'type': 'array', 'itemType': 'string' },
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesProductionPlanRequestExtendData },
            no: 'string',
            overdue: 'string',
            planEndTime: 'string',
            planQuantity: 'string',
            planStartTime: 'string',
            processUuids: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            qualifiedQuantity: 'string',
            sellOrderNo: 'string',
            status: 'string',
            teamList: 'string',
            title: 'string',
            type: 'string',
            unit: 'string',
            uuid: 'string',
        };
    }
}
exports.IndustryManufactureMesProductionPlanRequest = IndustryManufactureMesProductionPlanRequest;
class IndustryManufactureMesProductionPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesProductionPlanResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesProductionPlanResponseBody = IndustryManufactureMesProductionPlanResponseBody;
class IndustryManufactureMesProductionPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesProductionPlanResponseBody,
        };
    }
}
exports.IndustryManufactureMesProductionPlanResponse = IndustryManufactureMesProductionPlanResponse;
class IndustryManufactureMesSubCooperationTeamHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamHeaders = IndustryManufactureMesSubCooperationTeamHeaders;
class IndustryManufactureMesSubCooperationTeamRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            events: 'events',
            extendData: 'extendData',
            groupPlugins: 'groupPlugins',
            groupType: 'groupType',
            leaders: 'leaders',
            members: 'members',
            name: 'name',
            outCorpId: 'outCorpId',
            processIds: 'processIds',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            events: { 'type': 'array', 'itemType': 'string' },
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestExtendData },
            groupPlugins: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestGroupPlugins },
            groupType: 'string',
            leaders: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestLeaders },
            members: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestMembers },
            name: 'string',
            outCorpId: 'string',
            processIds: { 'type': 'array', 'itemType': 'string' },
            uuid: 'string',
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequest = IndustryManufactureMesSubCooperationTeamRequest;
class IndustryManufactureMesSubCooperationTeamResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesSubCooperationTeamResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamResponseBody = IndustryManufactureMesSubCooperationTeamResponseBody;
class IndustryManufactureMesSubCooperationTeamResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesSubCooperationTeamResponseBody,
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamResponse = IndustryManufactureMesSubCooperationTeamResponse;
class IndustryManufactureMesTeamMgmtHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryManufactureMesTeamMgmtHeaders = IndustryManufactureMesTeamMgmtHeaders;
class IndustryManufactureMesTeamMgmtRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            events: 'events',
            extendData: 'extendData',
            groupConfig: 'groupConfig',
            groupPlugins: 'groupPlugins',
            groupType: 'groupType',
            id: 'id',
            leaders: 'leaders',
            members: 'members',
            name: 'name',
            processIds: 'processIds',
            tagKey: 'tagKey',
            tagValues: 'tagValues',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            events: { 'type': 'array', 'itemType': 'string' },
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestExtendData },
            groupConfig: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            groupPlugins: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestGroupPlugins },
            groupType: 'string',
            id: 'string',
            leaders: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestLeaders },
            members: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestMembers },
            name: 'string',
            processIds: { 'type': 'array', 'itemType': 'string' },
            tagKey: 'string',
            tagValues: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.IndustryManufactureMesTeamMgmtRequest = IndustryManufactureMesTeamMgmtRequest;
class IndustryManufactureMesTeamMgmtResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingOpenErrcode: 'dingOpenErrcode',
            errorMsg: 'errorMsg',
            result: 'result',
        };
    }
    static types() {
        return {
            dingOpenErrcode: 'number',
            errorMsg: 'string',
            result: IndustryManufactureMesTeamMgmtResponseBodyResult,
        };
    }
}
exports.IndustryManufactureMesTeamMgmtResponseBody = IndustryManufactureMesTeamMgmtResponseBody;
class IndustryManufactureMesTeamMgmtResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryManufactureMesTeamMgmtResponseBody,
        };
    }
}
exports.IndustryManufactureMesTeamMgmtResponse = IndustryManufactureMesTeamMgmtResponse;
class IndustryMmanufactureMaterialCostGetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IndustryMmanufactureMaterialCostGetHeaders = IndustryMmanufactureMaterialCostGetHeaders;
class IndustryMmanufactureMaterialCostGetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            instanceId: 'instanceId',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            instanceId: 'string',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
}
exports.IndustryMmanufactureMaterialCostGetRequest = IndustryMmanufactureMaterialCostGetRequest;
class IndustryMmanufactureMaterialCostGetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryMmanufactureMaterialCostGetResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
}
exports.IndustryMmanufactureMaterialCostGetResponseBody = IndustryMmanufactureMaterialCostGetResponseBody;
class IndustryMmanufactureMaterialCostGetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: IndustryMmanufactureMaterialCostGetResponseBody,
        };
    }
}
exports.IndustryMmanufactureMaterialCostGetResponse = IndustryMmanufactureMaterialCostGetResponse;
class PushDingMessageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PushDingMessageHeaders = PushDingMessageHeaders;
class PushDingMessageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            content: 'content',
            messageType: 'messageType',
            messageUrl: 'messageUrl',
            pictureUrl: 'pictureUrl',
            singleTitle: 'singleTitle',
            singleUrl: 'singleUrl',
            title: 'title',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            appId: 'number',
            content: 'string',
            messageType: 'string',
            messageUrl: 'string',
            pictureUrl: 'string',
            singleTitle: 'string',
            singleUrl: 'string',
            title: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.PushDingMessageRequest = PushDingMessageRequest;
class PushDingMessageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            success: 'success',
        };
    }
    static types() {
        return {
            content: 'number',
            success: 'boolean',
        };
    }
}
exports.PushDingMessageResponseBody = PushDingMessageResponseBody;
class PushDingMessageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PushDingMessageResponseBody,
        };
    }
}
exports.PushDingMessageResponse = PushDingMessageResponse;
class QueryAllDepartmentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllDepartmentHeaders = QueryAllDepartmentHeaders;
class QueryAllDepartmentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryAllDepartmentRequest = QueryAllDepartmentRequest;
class QueryAllDepartmentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryAllDepartmentResponseBody = QueryAllDepartmentResponseBody;
class QueryAllDepartmentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllDepartmentResponseBody,
        };
    }
}
exports.QueryAllDepartmentResponse = QueryAllDepartmentResponse;
class QueryAllDoctorsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllDoctorsHeaders = QueryAllDoctorsHeaders;
class QueryAllDoctorsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            monthMark: 'monthMark',
            pageNum: 'pageNum',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            monthMark: 'string',
            pageNum: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryAllDoctorsRequest = QueryAllDoctorsRequest;
class QueryAllDoctorsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllDoctorsResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryAllDoctorsResponseBody = QueryAllDoctorsResponseBody;
class QueryAllDoctorsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllDoctorsResponseBody,
        };
    }
}
exports.QueryAllDoctorsResponse = QueryAllDoctorsResponse;
class QueryAllGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllGroupHeaders = QueryAllGroupHeaders;
class QueryAllGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryAllGroupRequest = QueryAllGroupRequest;
class QueryAllGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllGroupResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryAllGroupResponseBody = QueryAllGroupResponseBody;
class QueryAllGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllGroupResponseBody,
        };
    }
}
exports.QueryAllGroupResponse = QueryAllGroupResponse;
class QueryAllGroupsInDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllGroupsInDeptHeaders = QueryAllGroupsInDeptHeaders;
class QueryAllGroupsInDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryAllGroupsInDeptRequest = QueryAllGroupsInDeptRequest;
class QueryAllGroupsInDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllGroupsInDeptResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryAllGroupsInDeptResponseBody = QueryAllGroupsInDeptResponseBody;
class QueryAllGroupsInDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllGroupsInDeptResponseBody,
        };
    }
}
exports.QueryAllGroupsInDeptResponse = QueryAllGroupsInDeptResponse;
class QueryAllMemberByDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllMemberByDeptHeaders = QueryAllMemberByDeptHeaders;
class QueryAllMemberByDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            monthMark: 'monthMark',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            monthMark: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryAllMemberByDeptRequest = QueryAllMemberByDeptRequest;
class QueryAllMemberByDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllMemberByDeptResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryAllMemberByDeptResponseBody = QueryAllMemberByDeptResponseBody;
class QueryAllMemberByDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllMemberByDeptResponseBody,
        };
    }
}
exports.QueryAllMemberByDeptResponse = QueryAllMemberByDeptResponse;
class QueryAllMemberByGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllMemberByGroupHeaders = QueryAllMemberByGroupHeaders;
class QueryAllMemberByGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            monthMark: 'monthMark',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            monthMark: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryAllMemberByGroupRequest = QueryAllMemberByGroupRequest;
class QueryAllMemberByGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllMemberByGroupResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryAllMemberByGroupResponseBody = QueryAllMemberByGroupResponseBody;
class QueryAllMemberByGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllMemberByGroupResponseBody,
        };
    }
}
exports.QueryAllMemberByGroupResponse = QueryAllMemberByGroupResponse;
class QueryBizOptLogHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryBizOptLogHeaders = QueryBizOptLogHeaders;
class QueryBizOptLogRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.QueryBizOptLogRequest = QueryBizOptLogRequest;
class QueryBizOptLogResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryBizOptLogResponseBodyContent },
            nextToken: 'number',
        };
    }
}
exports.QueryBizOptLogResponseBody = QueryBizOptLogResponseBody;
class QueryBizOptLogResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryBizOptLogResponseBody,
        };
    }
}
exports.QueryBizOptLogResponse = QueryBizOptLogResponse;
class QueryDepartmentExtendInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDepartmentExtendInfoHeaders = QueryDepartmentExtendInfoHeaders;
class QueryDepartmentExtendInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            propCode: 'propCode',
        };
    }
    static types() {
        return {
            deptCode: 'number',
            propCode: 'string',
        };
    }
}
exports.QueryDepartmentExtendInfoRequest = QueryDepartmentExtendInfoRequest;
class QueryDepartmentExtendInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryDepartmentExtendInfoResponseBodyContent },
        };
    }
}
exports.QueryDepartmentExtendInfoResponseBody = QueryDepartmentExtendInfoResponseBody;
class QueryDepartmentExtendInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDepartmentExtendInfoResponseBody,
        };
    }
}
exports.QueryDepartmentExtendInfoResponse = QueryDepartmentExtendInfoResponse;
class QueryDepartmentInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDepartmentInfoHeaders = QueryDepartmentInfoHeaders;
class QueryDepartmentInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: QueryDepartmentInfoResponseBodyContent,
        };
    }
}
exports.QueryDepartmentInfoResponseBody = QueryDepartmentInfoResponseBody;
class QueryDepartmentInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDepartmentInfoResponseBody,
        };
    }
}
exports.QueryDepartmentInfoResponse = QueryDepartmentInfoResponse;
class QueryGroupInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupInfoHeaders = QueryGroupInfoHeaders;
class QueryGroupInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: QueryGroupInfoResponseBodyContent,
        };
    }
}
exports.QueryGroupInfoResponseBody = QueryGroupInfoResponseBody;
class QueryGroupInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryGroupInfoResponseBody,
        };
    }
}
exports.QueryGroupInfoResponse = QueryGroupInfoResponse;
class QueryHospitalDistrictInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryHospitalDistrictInfoHeaders = QueryHospitalDistrictInfoHeaders;
class QueryHospitalDistrictInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryHospitalDistrictInfoRequest = QueryHospitalDistrictInfoRequest;
class QueryHospitalDistrictInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryHospitalDistrictInfoResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryHospitalDistrictInfoResponseBody = QueryHospitalDistrictInfoResponseBody;
class QueryHospitalDistrictInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryHospitalDistrictInfoResponseBody,
        };
    }
}
exports.QueryHospitalDistrictInfoResponse = QueryHospitalDistrictInfoResponse;
class QueryHospitalRoleUserInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryHospitalRoleUserInfoHeaders = QueryHospitalRoleUserInfoHeaders;
class QueryHospitalRoleUserInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryHospitalRoleUserInfoRequest = QueryHospitalRoleUserInfoRequest;
class QueryHospitalRoleUserInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryHospitalRoleUserInfoResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
}
exports.QueryHospitalRoleUserInfoResponseBody = QueryHospitalRoleUserInfoResponseBody;
class QueryHospitalRoleUserInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryHospitalRoleUserInfoResponseBody,
        };
    }
}
exports.QueryHospitalRoleUserInfoResponse = QueryHospitalRoleUserInfoResponse;
class QueryHospitalRolesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryHospitalRolesHeaders = QueryHospitalRolesHeaders;
class QueryHospitalRolesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryHospitalRolesResponseBodyContent },
        };
    }
}
exports.QueryHospitalRolesResponseBody = QueryHospitalRolesResponseBody;
class QueryHospitalRolesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryHospitalRolesResponseBody,
        };
    }
}
exports.QueryHospitalRolesResponse = QueryHospitalRolesResponse;
class QueryJobCodeDictionaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryJobCodeDictionaryHeaders = QueryJobCodeDictionaryHeaders;
class QueryJobCodeDictionaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryJobCodeDictionaryResponseBodyContent },
        };
    }
}
exports.QueryJobCodeDictionaryResponseBody = QueryJobCodeDictionaryResponseBody;
class QueryJobCodeDictionaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryJobCodeDictionaryResponseBody,
        };
    }
}
exports.QueryJobCodeDictionaryResponse = QueryJobCodeDictionaryResponse;
class QueryJobStatusCodeDictionaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryJobStatusCodeDictionaryHeaders = QueryJobStatusCodeDictionaryHeaders;
class QueryJobStatusCodeDictionaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryJobStatusCodeDictionaryResponseBodyContent },
        };
    }
}
exports.QueryJobStatusCodeDictionaryResponseBody = QueryJobStatusCodeDictionaryResponseBody;
class QueryJobStatusCodeDictionaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryJobStatusCodeDictionaryResponseBody,
        };
    }
}
exports.QueryJobStatusCodeDictionaryResponse = QueryJobStatusCodeDictionaryResponse;
class QueryMedicalEventsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMedicalEventsHeaders = QueryMedicalEventsHeaders;
class QueryMedicalEventsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            success: 'success',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryMedicalEventsResponseBodyContent },
            success: 'boolean',
            totalCount: 'number',
        };
    }
}
exports.QueryMedicalEventsResponseBody = QueryMedicalEventsResponseBody;
class QueryMedicalEventsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryMedicalEventsResponseBody,
        };
    }
}
exports.QueryMedicalEventsResponse = QueryMedicalEventsResponse;
class QueryUserCredentialsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserCredentialsHeaders = QueryUserCredentialsHeaders;
class QueryUserCredentialsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryUserCredentialsRequest = QueryUserCredentialsRequest;
class QueryUserCredentialsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserCredentialsResponseBodyContent },
        };
    }
}
exports.QueryUserCredentialsResponseBody = QueryUserCredentialsResponseBody;
class QueryUserCredentialsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserCredentialsResponseBody,
        };
    }
}
exports.QueryUserCredentialsResponse = QueryUserCredentialsResponse;
class QueryUserExtInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserExtInfoHeaders = QueryUserExtInfoHeaders;
class QueryUserExtInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserExtInfoResponseBodyContent },
        };
    }
}
exports.QueryUserExtInfoResponseBody = QueryUserExtInfoResponseBody;
class QueryUserExtInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserExtInfoResponseBody,
        };
    }
}
exports.QueryUserExtInfoResponse = QueryUserExtInfoResponse;
class QueryUserExtendValuesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserExtendValuesHeaders = QueryUserExtendValuesHeaders;
class QueryUserExtendValuesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userExtendKey: 'userExtendKey',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userExtendKey: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryUserExtendValuesRequest = QueryUserExtendValuesRequest;
class QueryUserExtendValuesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            success: 'success',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserExtendValuesResponseBodyContent },
            success: 'boolean',
            totalCount: 'number',
        };
    }
}
exports.QueryUserExtendValuesResponseBody = QueryUserExtendValuesResponseBody;
class QueryUserExtendValuesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserExtendValuesResponseBody,
        };
    }
}
exports.QueryUserExtendValuesResponse = QueryUserExtendValuesResponse;
class QueryUserInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserInfoHeaders = QueryUserInfoHeaders;
class QueryUserInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: QueryUserInfoResponseBodyContent,
        };
    }
}
exports.QueryUserInfoResponseBody = QueryUserInfoResponseBody;
class QueryUserInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserInfoResponseBody,
        };
    }
}
exports.QueryUserInfoResponse = QueryUserInfoResponse;
class QueryUserProbCodeDictionaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserProbCodeDictionaryHeaders = QueryUserProbCodeDictionaryHeaders;
class QueryUserProbCodeDictionaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserProbCodeDictionaryResponseBodyContent },
        };
    }
}
exports.QueryUserProbCodeDictionaryResponseBody = QueryUserProbCodeDictionaryResponseBody;
class QueryUserProbCodeDictionaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserProbCodeDictionaryResponseBody,
        };
    }
}
exports.QueryUserProbCodeDictionaryResponse = QueryUserProbCodeDictionaryResponse;
class QueryUserRolesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserRolesHeaders = QueryUserRolesHeaders;
class QueryUserRolesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserRolesResponseBodyContent },
        };
    }
}
exports.QueryUserRolesResponseBody = QueryUserRolesResponseBody;
class QueryUserRolesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserRolesResponseBody,
        };
    }
}
exports.QueryUserRolesResponse = QueryUserRolesResponse;
class SaveUserExtendValuesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveUserExtendValuesHeaders = SaveUserExtendValuesHeaders;
class SaveUserExtendValuesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userDisplayName: 'userDisplayName',
            userExtendKey: 'userExtendKey',
            userExtendValue: 'userExtendValue',
        };
    }
    static types() {
        return {
            userDisplayName: 'string',
            userExtendKey: 'string',
            userExtendValue: 'string',
        };
    }
}
exports.SaveUserExtendValuesRequest = SaveUserExtendValuesRequest;
class SaveUserExtendValuesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SaveUserExtendValuesResponseBody = SaveUserExtendValuesResponseBody;
class SaveUserExtendValuesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SaveUserExtendValuesResponseBody,
        };
    }
}
exports.SaveUserExtendValuesResponse = SaveUserExtendValuesResponse;
class UpdateUserExtendInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateUserExtendInfoHeaders = UpdateUserExtendInfoHeaders;
class UpdateUserExtendInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            comments: 'comments',
            jobCode: 'jobCode',
            jobStatusCode: 'jobStatusCode',
            userProbCode: 'userProbCode',
        };
    }
    static types() {
        return {
            comments: 'string',
            jobCode: 'string',
            jobStatusCode: { 'type': 'array', 'itemType': 'string' },
            userProbCode: 'string',
        };
    }
}
exports.UpdateUserExtendInfoRequest = UpdateUserExtendInfoRequest;
class UpdateUserExtendInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateUserExtendInfoResponse = UpdateUserExtendInfoResponse;
class CampusListCampusResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusCorpId: 'campusCorpId',
            campusDeptId: 'campusDeptId',
            campusName: 'campusName',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            description: 'description',
            extend: 'extend',
            location: 'location',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'number',
            campusCorpId: 'string',
            campusDeptId: 'number',
            campusName: 'string',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            description: 'string',
            extend: 'string',
            location: 'string',
            orderEndTime: 'number',
            orderInfo: 'string',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
}
exports.CampusListCampusResponseBodyResult = CampusListCampusResponseBodyResult;
class CampusListCampusGroupResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extend: 'extend',
            groupDeptId: 'groupDeptId',
            groupName: 'groupName',
        };
    }
    static types() {
        return {
            extend: 'string',
            groupDeptId: 'number',
            groupName: 'string',
        };
    }
}
exports.CampusListCampusGroupResponseBodyResult = CampusListCampusGroupResponseBodyResult;
class CampusListRenterResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bindRenterCorpId: 'bindRenterCorpId',
            bindTime: 'bindTime',
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            renterDeptId: 'renterDeptId',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            bindRenterCorpId: 'string',
            bindTime: 'number',
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            renterDeptId: 'number',
            startTime: 'number',
            state: 'number',
        };
    }
}
exports.CampusListRenterResponseBodyResult = CampusListRenterResponseBodyResult;
class CampusListRenterMembersResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extend: 'extend',
            inviteState: 'inviteState',
            name: 'name',
            state: 'state',
            type: 'type',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            extend: 'string',
            inviteState: 'string',
            name: 'string',
            state: 'string',
            type: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.CampusListRenterMembersResponseBodyResult = CampusListRenterMembersResponseBodyResult;
class CustomizeContactCreateResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            order: 'order',
            rootDeptId: 'rootDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            order: 'number',
            rootDeptId: 'number',
        };
    }
}
exports.CustomizeContactCreateResponseBodyContent = CustomizeContactCreateResponseBodyContent;
class CustomizeContactDeptInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            id: 'id',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
            refId: 'refId',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            id: 'number',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
            refId: 'number',
            type: 'number',
        };
    }
}
exports.CustomizeContactDeptInfoResponseBodyContent = CustomizeContactDeptInfoResponseBodyContent;
class CustomizeContactDeptListResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            id: 'id',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
            refId: 'refId',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            id: 'number',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
            refId: 'number',
            type: 'number',
        };
    }
}
exports.CustomizeContactDeptListResponseBodyContent = CustomizeContactDeptListResponseBodyContent;
class CustomizeContactEmpListResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.CustomizeContactEmpListResponseBodyContent = CustomizeContactEmpListResponseBodyContent;
class CustomizeContactListResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            order: 'order',
            rootDeptId: 'rootDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            order: 'number',
            rootDeptId: 'number',
        };
    }
}
exports.CustomizeContactListResponseBodyContent = CustomizeContactListResponseBodyContent;
class DigitalStoreGroupsResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
        };
    }
}
exports.DigitalStoreGroupsResponseBodyContent = DigitalStoreGroupsResponseBodyContent;
class DigitalStoreRolesResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            level: 'level',
            roleCode: 'roleCode',
            roleId: 'roleId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            level: 'number',
            roleCode: 'string',
            roleId: 'number',
            roleName: 'string',
        };
    }
}
exports.DigitalStoreRolesResponseBodyContent = DigitalStoreRolesResponseBodyContent;
class DigitalStoreSubNodesResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            parentId: 'parentId',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
            parentId: 'number',
            type: 'number',
        };
    }
}
exports.DigitalStoreSubNodesResponseBodyContent = DigitalStoreSubNodesResponseBodyContent;
class DigitalStoreUsersResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.DigitalStoreUsersResponseBodyContent = DigitalStoreUsersResponseBodyContent;
class ExternalQueryExternalAppOrgsResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
        };
    }
}
exports.ExternalQueryExternalAppOrgsResponseBodyResult = ExternalQueryExternalAppOrgsResponseBodyResult;
class ExternalQueryExternalOrgsResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
        };
    }
}
exports.ExternalQueryExternalOrgsResponseBodyResult = ExternalQueryExternalOrgsResponseBodyResult;
class IndustryManufactureCommonEventResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            httpCode: 'httpCode',
        };
    }
    static types() {
        return {
            content: 'string',
            httpCode: 'string',
        };
    }
}
exports.IndustryManufactureCommonEventResponseBodyResult = IndustryManufactureCommonEventResponseBodyResult;
class IndustryManufactureCostRecordListGetResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            count: 'count',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            instanceId: 'instanceId',
            isDeleted: 'isDeleted',
            materialCostRecordNo: 'materialCostRecordNo',
            materialName: 'materialName',
            materialNo: 'materialNo',
            memo: 'memo',
            orderNo: 'orderNo',
            price: 'price',
            processCode: 'processCode',
            productionTaskNo: 'productionTaskNo',
            realCount: 'realCount',
            realPrice: 'realPrice',
            type: 'type',
            unit: 'unit',
        };
    }
    static types() {
        return {
            corpId: 'string',
            count: 'number',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            instanceId: 'string',
            isDeleted: 'string',
            materialCostRecordNo: 'string',
            materialName: 'string',
            materialNo: 'string',
            memo: 'string',
            orderNo: 'string',
            price: 'number',
            processCode: 'string',
            productionTaskNo: 'string',
            realCount: 'number',
            realPrice: 'number',
            type: 'string',
            unit: 'string',
        };
    }
}
exports.IndustryManufactureCostRecordListGetResponseBodyList = IndustryManufactureCostRecordListGetResponseBodyList;
class IndustryManufactureFeeListGetResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            corpId: 'corpId',
            count: 'count',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            instanceId: 'instanceId',
            isDeleted: 'isDeleted',
            materialName: 'materialName',
            materialNo: 'materialNo',
            perAmount: 'perAmount',
            processCode: 'processCode',
            productionTaskNo: 'productionTaskNo',
            title: 'title',
            type: 'type',
            unit: 'unit',
        };
    }
    static types() {
        return {
            amount: 'string',
            corpId: 'string',
            count: 'number',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            id: 'number',
            instanceId: 'string',
            isDeleted: 'string',
            materialName: 'string',
            materialNo: 'string',
            perAmount: 'number',
            processCode: 'string',
            productionTaskNo: 'string',
            title: 'string',
            type: 'string',
            unit: 'string',
        };
    }
}
exports.IndustryManufactureFeeListGetResponseBodyList = IndustryManufactureFeeListGetResponseBodyList;
class IndustryManufactureLabourCostResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            instanceId: 'instanceId',
            labourCostName: 'labourCostName',
            labourCostNo: 'labourCostNo',
            materialName: 'materialName',
            materialNo: 'materialNo',
            processCode: 'processCode',
            processName: 'processName',
            processNo: 'processNo',
            qualifiedPrice: 'qualifiedPrice',
            unQualifiedInfo: 'unQualifiedInfo',
            unQualifiedPrice1: 'unQualifiedPrice1',
            unQualifiedPrice2: 'unQualifiedPrice2',
            unQualifiedReason1: 'unQualifiedReason1',
            unQualifiedReason2: 'unQualifiedReason2',
        };
    }
    static types() {
        return {
            corpId: 'string',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            instanceId: 'string',
            labourCostName: 'string',
            labourCostNo: 'string',
            materialName: 'string',
            materialNo: 'string',
            processCode: 'string',
            processName: 'string',
            processNo: 'string',
            qualifiedPrice: 'number',
            unQualifiedInfo: 'string',
            unQualifiedPrice1: 'number',
            unQualifiedPrice2: 'number',
            unQualifiedReason1: 'string',
            unQualifiedReason2: 'string',
        };
    }
}
exports.IndustryManufactureLabourCostResponseBodyList = IndustryManufactureLabourCostResponseBodyList;
class IndustryManufactureMaterialListResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category: 'category',
            corpId: 'corpId',
            ext: 'ext',
            instanceId: 'instanceId',
            materialName: 'materialName',
            materialNo: 'materialNo',
            processCode: 'processCode',
            specification: 'specification',
            stockMaxWarn: 'stockMaxWarn',
            stockMinWarn: 'stockMinWarn',
            type: 'type',
            unit: 'unit',
        };
    }
    static types() {
        return {
            category: 'string',
            corpId: 'string',
            ext: 'string',
            instanceId: 'string',
            materialName: 'string',
            materialNo: 'string',
            processCode: 'string',
            specification: 'string',
            stockMaxWarn: 'number',
            stockMinWarn: 'number',
            type: 'string',
            unit: 'string',
        };
    }
}
exports.IndustryManufactureMaterialListResponseBodyList = IndustryManufactureMaterialListResponseBodyList;
class IndustryManufactureMesDispatchTaskResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesDispatchTaskResponseBodyResult = IndustryManufactureMesDispatchTaskResponseBodyResult;
class IndustryManufactureMesMaterialRequestExtendData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
}
exports.IndustryManufactureMesMaterialRequestExtendData = IndustryManufactureMesMaterialRequestExtendData;
class IndustryManufactureMesMaterialResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesMaterialResponseBodyResult = IndustryManufactureMesMaterialResponseBodyResult;
class IndustryManufactureMesOutPlanResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesOutPlanResponseBodyResult = IndustryManufactureMesOutPlanResponseBodyResult;
class IndustryManufactureMesOutputResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesOutputResponseBodyResult = IndustryManufactureMesOutputResponseBodyResult;
class IndustryManufactureMesProcessRequestExtendData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
}
exports.IndustryManufactureMesProcessRequestExtendData = IndustryManufactureMesProcessRequestExtendData;
class IndustryManufactureMesProcessResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesProcessResponseBodyResult = IndustryManufactureMesProcessResponseBodyResult;
class IndustryManufactureMesProductionPlanRequestExtendData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
}
exports.IndustryManufactureMesProductionPlanRequestExtendData = IndustryManufactureMesProductionPlanRequestExtendData;
class IndustryManufactureMesProductionPlanResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesProductionPlanResponseBodyResult = IndustryManufactureMesProductionPlanResponseBodyResult;
class IndustryManufactureMesSubCooperationTeamRequestExtendData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestExtendData = IndustryManufactureMesSubCooperationTeamRequestExtendData;
class IndustryManufactureMesSubCooperationTeamRequestGroupPlugins extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestGroupPlugins = IndustryManufactureMesSubCooperationTeamRequestGroupPlugins;
class IndustryManufactureMesSubCooperationTeamRequestLeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestLeaders = IndustryManufactureMesSubCooperationTeamRequestLeaders;
class IndustryManufactureMesSubCooperationTeamRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestMembers = IndustryManufactureMesSubCooperationTeamRequestMembers;
class IndustryManufactureMesSubCooperationTeamResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesSubCooperationTeamResponseBodyResult = IndustryManufactureMesSubCooperationTeamResponseBodyResult;
class IndustryManufactureMesTeamMgmtRequestExtendData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
}
exports.IndustryManufactureMesTeamMgmtRequestExtendData = IndustryManufactureMesTeamMgmtRequestExtendData;
class IndustryManufactureMesTeamMgmtRequestGroupPlugins extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
}
exports.IndustryManufactureMesTeamMgmtRequestGroupPlugins = IndustryManufactureMesTeamMgmtRequestGroupPlugins;
class IndustryManufactureMesTeamMgmtRequestLeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.IndustryManufactureMesTeamMgmtRequestLeaders = IndustryManufactureMesTeamMgmtRequestLeaders;
class IndustryManufactureMesTeamMgmtRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.IndustryManufactureMesTeamMgmtRequestMembers = IndustryManufactureMesTeamMgmtRequestMembers;
class IndustryManufactureMesTeamMgmtResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
}
exports.IndustryManufactureMesTeamMgmtResponseBodyResult = IndustryManufactureMesTeamMgmtResponseBodyResult;
class IndustryMmanufactureMaterialCostGetResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actPrice: 'actPrice',
            corpId: 'corpId',
            count: 'count',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            instanceId: 'instanceId',
            materialCostNo: 'materialCostNo',
            materialName: 'materialName',
            materialNo: 'materialNo',
            memo: 'memo',
            price: 'price',
            processCode: 'processCode',
            unit: 'unit',
        };
    }
    static types() {
        return {
            actPrice: 'number',
            corpId: 'string',
            count: 'number',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            instanceId: 'string',
            materialCostNo: 'string',
            materialName: 'string',
            materialNo: 'string',
            memo: 'string',
            price: 'number',
            processCode: 'string',
            unit: 'string',
        };
    }
}
exports.IndustryMmanufactureMaterialCostGetResponseBodyList = IndustryMmanufactureMaterialCostGetResponseBodyList;
class QueryAllDepartmentResponseBodyContentDeptAndExtDepartment extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            deptOrder: 'deptOrder',
            deptStatus: 'deptStatus',
            deptType: 'deptType',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
            wardIdList: 'wardIdList',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            deptOrder: 'number',
            deptStatus: 'number',
            deptType: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
            wardIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.QueryAllDepartmentResponseBodyContentDeptAndExtDepartment = QueryAllDepartmentResponseBodyContentDeptAndExtDepartment;
class QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
}
exports.QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos = QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos;
class QueryAllDepartmentResponseBodyContentDeptAndExt extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            department: 'department',
            extendInfos: 'extendInfos',
        };
    }
    static types() {
        return {
            department: QueryAllDepartmentResponseBodyContentDeptAndExtDepartment,
            extendInfos: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos },
        };
    }
}
exports.QueryAllDepartmentResponseBodyContentDeptAndExt = QueryAllDepartmentResponseBodyContentDeptAndExt;
class QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos = QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos;
class QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobNumber: 'jobNumber',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            jobNumber: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader = QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader;
class QueryAllDepartmentResponseBodyContentGroupAndExtListGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            deptStatus: 'deptStatus',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            leader: 'leader',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptStatus: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            leader: QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader,
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
        };
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtListGroup = QueryAllDepartmentResponseBodyContentGroupAndExtListGroup;
class QueryAllDepartmentResponseBodyContentGroupAndExtList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extendInfos: 'extendInfos',
            group: 'group',
        };
    }
    static types() {
        return {
            extendInfos: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos },
            group: QueryAllDepartmentResponseBodyContentGroupAndExtListGroup,
        };
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtList = QueryAllDepartmentResponseBodyContentGroupAndExtList;
class QueryAllDepartmentResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptAndExt: 'deptAndExt',
            groupAndExtList: 'groupAndExtList',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            deptAndExt: QueryAllDepartmentResponseBodyContentDeptAndExt,
            groupAndExtList: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContentGroupAndExtList },
            id: 'number',
            name: 'string',
        };
    }
}
exports.QueryAllDepartmentResponseBodyContent = QueryAllDepartmentResponseBodyContent;
class QueryAllDoctorsResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            assessGroupId: 'assessGroupId',
            assessGroupName: 'assessGroupName',
            deptCode: 'deptCode',
            deptType: 'deptType',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            jobNum: 'jobNum',
            status: 'status',
            uid: 'uid',
            userCode: 'userCode',
            userName: 'userName',
        };
    }
    static types() {
        return {
            assessGroupId: 'string',
            assessGroupName: 'string',
            deptCode: 'string',
            deptType: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            jobNum: 'string',
            status: 'number',
            uid: 'string',
            userCode: 'string',
            userName: 'string',
        };
    }
}
exports.QueryAllDoctorsResponseBodyContent = QueryAllDoctorsResponseBodyContent;
class QueryAllGroupResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            id: 'number',
            name: 'string',
        };
    }
}
exports.QueryAllGroupResponseBodyContent = QueryAllGroupResponseBodyContent;
class QueryAllGroupsInDeptResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            id: 'number',
            name: 'string',
        };
    }
}
exports.QueryAllGroupsInDeptResponseBodyContent = QueryAllGroupsInDeptResponseBodyContent;
class QueryAllMemberByDeptResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobNum: 'jobNum',
            uid: 'uid',
            userName: 'userName',
        };
    }
    static types() {
        return {
            jobNum: 'string',
            uid: 'string',
            userName: 'string',
        };
    }
}
exports.QueryAllMemberByDeptResponseBodyContent = QueryAllMemberByDeptResponseBodyContent;
class QueryAllMemberByGroupResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobNum: 'jobNum',
            uid: 'uid',
            userName: 'userName',
        };
    }
    static types() {
        return {
            jobNum: 'string',
            uid: 'string',
            userName: 'string',
        };
    }
}
exports.QueryAllMemberByGroupResponseBodyContent = QueryAllMemberByGroupResponseBodyContent;
class QueryBizOptLogResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
            dataType: 'dataType',
            id: 'id',
            optAfterData: 'optAfterData',
            optBeforeData: 'optBeforeData',
            optBizType: 'optBizType',
            optExtend: 'optExtend',
            optJobNumber: 'optJobNumber',
            optObjectCode: 'optObjectCode',
            optObjectName: 'optObjectName',
            optObjectUserJobNo: 'optObjectUserJobNo',
            optSuccess: 'optSuccess',
            optTime: 'optTime',
            optType: 'optType',
            optUserCode: 'optUserCode',
            optUserName: 'optUserName',
            remark: 'remark',
        };
    }
    static types() {
        return {
            bizType: 'number',
            dataType: 'number',
            id: 'number',
            optAfterData: 'string',
            optBeforeData: 'string',
            optBizType: 'number',
            optExtend: 'string',
            optJobNumber: 'string',
            optObjectCode: 'string',
            optObjectName: 'string',
            optObjectUserJobNo: 'string',
            optSuccess: 'number',
            optTime: 'number',
            optType: 'number',
            optUserCode: 'string',
            optUserName: 'string',
            remark: 'string',
        };
    }
}
exports.QueryBizOptLogResponseBodyContent = QueryBizOptLogResponseBodyContent;
class QueryDepartmentExtendInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
}
exports.QueryDepartmentExtendInfoResponseBodyContent = QueryDepartmentExtendInfoResponseBodyContent;
class QueryDepartmentInfoResponseBodyContentDepartment extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            deptOrder: 'deptOrder',
            deptStatus: 'deptStatus',
            deptType: 'deptType',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
            wardIdList: 'wardIdList',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            deptOrder: 'number',
            deptStatus: 'number',
            deptType: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
            wardIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.QueryDepartmentInfoResponseBodyContentDepartment = QueryDepartmentInfoResponseBodyContentDepartment;
class QueryDepartmentInfoResponseBodyContentExtendInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
}
exports.QueryDepartmentInfoResponseBodyContentExtendInfos = QueryDepartmentInfoResponseBodyContentExtendInfos;
class QueryDepartmentInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            department: 'department',
            extendInfos: 'extendInfos',
        };
    }
    static types() {
        return {
            department: QueryDepartmentInfoResponseBodyContentDepartment,
            extendInfos: { 'type': 'array', 'itemType': QueryDepartmentInfoResponseBodyContentExtendInfos },
        };
    }
}
exports.QueryDepartmentInfoResponseBodyContent = QueryDepartmentInfoResponseBodyContent;
class QueryGroupInfoResponseBodyContentExtendInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
}
exports.QueryGroupInfoResponseBodyContentExtendInfos = QueryGroupInfoResponseBodyContentExtendInfos;
class QueryGroupInfoResponseBodyContentGroupLeader extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobNumber: 'jobNumber',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            jobNumber: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.QueryGroupInfoResponseBodyContentGroupLeader = QueryGroupInfoResponseBodyContentGroupLeader;
class QueryGroupInfoResponseBodyContentGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            deptStatus: 'deptStatus',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            leader: 'leader',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptStatus: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            leader: QueryGroupInfoResponseBodyContentGroupLeader,
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
        };
    }
}
exports.QueryGroupInfoResponseBodyContentGroup = QueryGroupInfoResponseBodyContentGroup;
class QueryGroupInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extendInfos: 'extendInfos',
            group: 'group',
        };
    }
    static types() {
        return {
            extendInfos: { 'type': 'array', 'itemType': QueryGroupInfoResponseBodyContentExtendInfos },
            group: QueryGroupInfoResponseBodyContentGroup,
        };
    }
}
exports.QueryGroupInfoResponseBodyContent = QueryGroupInfoResponseBodyContent;
class QueryHospitalDistrictInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            deleted: 'deleted',
            districtName: 'districtName',
            districtType: 'districtType',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            parentDistrictId: 'parentDistrictId',
        };
    }
    static types() {
        return {
            address: 'string',
            deleted: 'number',
            districtName: 'string',
            districtType: 'number',
            gmtCreate: 'string',
            gmtModified: 'string',
            id: 'number',
            parentDistrictId: 'number',
        };
    }
}
exports.QueryHospitalDistrictInfoResponseBodyContent = QueryHospitalDistrictInfoResponseBodyContent;
class QueryHospitalRoleUserInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            jobNumber: 'jobNumber',
            roleCode: 'roleCode',
            roleName: 'roleName',
            status: 'status',
            userCode: 'userCode',
            userName: 'userName',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtModified: 'string',
            jobNumber: 'string',
            roleCode: 'string',
            roleName: 'string',
            status: 'number',
            userCode: 'string',
            userName: 'string',
        };
    }
}
exports.QueryHospitalRoleUserInfoResponseBodyContent = QueryHospitalRoleUserInfoResponseBodyContent;
class QueryHospitalRolesResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            id: 'id',
            isDeleted: 'isDeleted',
            readOnly: 'readOnly',
            remark: 'remark',
            roleCode: 'roleCode',
            roleName: 'roleName',
            sort: 'sort',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            id: 'number',
            isDeleted: 'number',
            readOnly: 'number',
            remark: 'string',
            roleCode: 'string',
            roleName: 'string',
            sort: 'number',
        };
    }
}
exports.QueryHospitalRolesResponseBodyContent = QueryHospitalRolesResponseBodyContent;
class QueryJobCodeDictionaryResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category: 'category',
            code: 'code',
            displayName: 'displayName',
            doctorType: 'doctorType',
        };
    }
    static types() {
        return {
            category: 'string',
            code: 'string',
            displayName: 'string',
            doctorType: 'string',
        };
    }
}
exports.QueryJobCodeDictionaryResponseBodyContent = QueryJobCodeDictionaryResponseBodyContent;
class QueryJobStatusCodeDictionaryResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
}
exports.QueryJobStatusCodeDictionaryResponseBodyContent = QueryJobStatusCodeDictionaryResponseBodyContent;
class QueryMedicalEventsResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            content: 'content',
            eventId: 'eventId',
        };
    }
    static types() {
        return {
            code: 'string',
            content: 'string',
            eventId: 'number',
        };
    }
}
exports.QueryMedicalEventsResponseBodyContent = QueryMedicalEventsResponseBodyContent;
class QueryUserCredentialsResponseBodyContentCredentialList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            credentialName: 'credentialName',
            credentialType: 'credentialType',
            termOfValidity: 'termOfValidity',
        };
    }
    static types() {
        return {
            credentialName: 'string',
            credentialType: 'number',
            termOfValidity: 'string',
        };
    }
}
exports.QueryUserCredentialsResponseBodyContentCredentialList = QueryUserCredentialsResponseBodyContentCredentialList;
class QueryUserCredentialsResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            credentialList: 'credentialList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            credentialList: { 'type': 'array', 'itemType': QueryUserCredentialsResponseBodyContentCredentialList },
            userId: 'string',
        };
    }
}
exports.QueryUserCredentialsResponseBodyContent = QueryUserCredentialsResponseBodyContent;
class QueryUserExtInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            status: 'status',
            userCode: 'userCode',
            userExtendDisplayName: 'userExtendDisplayName',
            userExtendKey: 'userExtendKey',
            userExtendValue: 'userExtendValue',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtModified: 'string',
            status: 'number',
            userCode: 'string',
            userExtendDisplayName: 'string',
            userExtendKey: 'string',
            userExtendValue: 'string',
        };
    }
}
exports.QueryUserExtInfoResponseBodyContent = QueryUserExtInfoResponseBodyContent;
class QueryUserExtendValuesResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userCode: 'userCode',
            userExtendDisplayName: 'userExtendDisplayName',
            userExtendKey: 'userExtendKey',
            userExtendValue: 'userExtendValue',
        };
    }
    static types() {
        return {
            userCode: 'string',
            userExtendDisplayName: 'string',
            userExtendKey: 'string',
            userExtendValue: 'string',
        };
    }
}
exports.QueryUserExtendValuesResponseBodyContent = QueryUserExtendValuesResponseBodyContent;
class QueryUserInfoResponseBodyContentDept extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            relId: 'relId',
        };
    }
    static types() {
        return {
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            relId: 'number',
        };
    }
}
exports.QueryUserInfoResponseBodyContentDept = QueryUserInfoResponseBodyContentDept;
class QueryUserInfoResponseBodyContentGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            relId: 'relId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptName: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            relId: 'number',
        };
    }
}
exports.QueryUserInfoResponseBodyContentGroup = QueryUserInfoResponseBodyContentGroup;
class QueryUserInfoResponseBodyContentJob extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
}
exports.QueryUserInfoResponseBodyContentJob = QueryUserInfoResponseBodyContentJob;
class QueryUserInfoResponseBodyContentJobStatus extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
}
exports.QueryUserInfoResponseBodyContentJobStatus = QueryUserInfoResponseBodyContentJobStatus;
class QueryUserInfoResponseBodyContentJobStatusList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
}
exports.QueryUserInfoResponseBodyContentJobStatusList = QueryUserInfoResponseBodyContentJobStatusList;
class QueryUserInfoResponseBodyContentUserProb extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
}
exports.QueryUserInfoResponseBodyContentUserProb = QueryUserInfoResponseBodyContentUserProb;
class QueryUserInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            comments: 'comments',
            dept: 'dept',
            group: 'group',
            job: 'job',
            jobNum: 'jobNum',
            jobStatus: 'jobStatus',
            jobStatusList: 'jobStatusList',
            uid: 'uid',
            userName: 'userName',
            userProb: 'userProb',
        };
    }
    static types() {
        return {
            comments: 'string',
            dept: { 'type': 'array', 'itemType': QueryUserInfoResponseBodyContentDept },
            group: { 'type': 'array', 'itemType': QueryUserInfoResponseBodyContentGroup },
            job: QueryUserInfoResponseBodyContentJob,
            jobNum: 'string',
            jobStatus: QueryUserInfoResponseBodyContentJobStatus,
            jobStatusList: { 'type': 'array', 'itemType': QueryUserInfoResponseBodyContentJobStatusList },
            uid: 'string',
            userName: 'string',
            userProb: QueryUserInfoResponseBodyContentUserProb,
        };
    }
}
exports.QueryUserInfoResponseBodyContent = QueryUserInfoResponseBodyContent;
class QueryUserProbCodeDictionaryResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
}
exports.QueryUserProbCodeDictionaryResponseBodyContent = QueryUserProbCodeDictionaryResponseBodyContent;
class QueryUserRolesResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleCode: 'roleCode',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            roleCode: 'string',
            roleName: 'string',
        };
    }
}
exports.QueryUserRolesResponseBodyContent = QueryUserRolesResponseBodyContent;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async campusAddRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusAddRenterMemberHeaders({});
        return await this.campusAddRenterMemberWithOptions(request, headers, runtime);
    }
    async campusAddRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.renterId)) {
            body["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusAddRenterMember", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/campuses/renters/members`, "json", req, runtime), new CampusAddRenterMemberResponse({}));
    }
    async campusCreateCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusCreateCampusHeaders({});
        return await this.campusCreateCampusWithOptions(request, headers, runtime);
    }
    async campusCreateCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            body["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.area)) {
            body["area"] = request.area;
        }
        if (!tea_util_1.default.isUnset(request.belongProjectGroupId)) {
            body["belongProjectGroupId"] = request.belongProjectGroupId;
        }
        if (!tea_util_1.default.isUnset(request.campusName)) {
            body["campusName"] = request.campusName;
        }
        if (!tea_util_1.default.isUnset(request.capacity)) {
            body["capacity"] = request.capacity;
        }
        if (!tea_util_1.default.isUnset(request.cityId)) {
            body["cityId"] = request.cityId;
        }
        if (!tea_util_1.default.isUnset(request.country)) {
            body["country"] = request.country;
        }
        if (!tea_util_1.default.isUnset(request.countyId)) {
            body["countyId"] = request.countyId;
        }
        if (!tea_util_1.default.isUnset(request.creatorUnionId)) {
            body["creatorUnionId"] = request.creatorUnionId;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.orderEndTime)) {
            body["orderEndTime"] = request.orderEndTime;
        }
        if (!tea_util_1.default.isUnset(request.orderInfo)) {
            body["orderInfo"] = request.orderInfo;
        }
        if (!tea_util_1.default.isUnset(request.orderStartTime)) {
            body["orderStartTime"] = request.orderStartTime;
        }
        if (!tea_util_1.default.isUnset(request.provId)) {
            body["provId"] = request.provId;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusCreateCampus", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/campuses/projects`, "json", req, runtime), new CampusCreateCampusResponse({}));
    }
    async campusCreateCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusCreateCampusGroupHeaders({});
        return await this.campusCreateCampusGroupWithOptions(request, headers, runtime);
    }
    async campusCreateCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusCreateCampusGroup", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/campuses/projects/groups`, "json", req, runtime), new CampusCreateCampusGroupResponse({}));
    }
    async campusCreateRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusCreateRenterHeaders({});
        return await this.campusCreateRenterWithOptions(request, headers, runtime);
    }
    async campusCreateRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.creditCode)) {
            body["creditCode"] = request.creditCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            body["state"] = request.state;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusCreateRenter", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/campuses/renters`, "json", req, runtime), new CampusCreateRenterResponse({}));
    }
    async campusDelRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusDelRenterMemberHeaders({});
        return await this.campusDelRenterMemberWithOptions(request, headers, runtime);
    }
    async campusDelRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusDelRenterMember", "industry_1.0", "HTTP", "DELETE", "AK", `/v1.0/industry/campuses/renters/members`, "json", req, runtime), new CampusDelRenterMemberResponse({}));
    }
    async campusDeleteCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusDeleteCampusGroupHeaders({});
        return await this.campusDeleteCampusGroupWithOptions(request, headers, runtime);
    }
    async campusDeleteCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.campusProjectGroupId)) {
            query["campusProjectGroupId"] = request.campusProjectGroupId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusDeleteCampusGroup", "industry_1.0", "HTTP", "DELETE", "AK", `/v1.0/industry/campuses/projects/groups`, "json", req, runtime), new CampusDeleteCampusGroupResponse({}));
    }
    async campusDeleteRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusDeleteRenterHeaders({});
        return await this.campusDeleteRenterWithOptions(request, headers, runtime);
    }
    async campusDeleteRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusDeleteRenter", "industry_1.0", "HTTP", "DELETE", "AK", `/v1.0/industry/campuses/renters`, "none", req, runtime), new CampusDeleteRenterResponse({}));
    }
    async campusGetCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetCampusHeaders({});
        return await this.campusGetCampusWithOptions(request, headers, runtime);
    }
    async campusGetCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.campusDeptId)) {
            query["campusDeptId"] = request.campusDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusGetCampus", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/projectInfos`, "json", req, runtime), new CampusGetCampusResponse({}));
    }
    async campusGetCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetCampusGroupHeaders({});
        return await this.campusGetCampusGroupWithOptions(request, headers, runtime);
    }
    async campusGetCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["groupId"] = request.groupId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusGetCampusGroup", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/projects/groupInfos`, "json", req, runtime), new CampusGetCampusGroupResponse({}));
    }
    async campusGetRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetRenterHeaders({});
        return await this.campusGetRenterWithOptions(request, headers, runtime);
    }
    async campusGetRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusGetRenter", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/renterInfos`, "json", req, runtime), new CampusGetRenterResponse({}));
    }
    async campusGetRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetRenterMemberHeaders({});
        return await this.campusGetRenterMemberWithOptions(request, headers, runtime);
    }
    async campusGetRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusGetRenterMember", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/renters/memberInfos`, "json", req, runtime), new CampusGetRenterMemberResponse({}));
    }
    async campusListCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListCampusHeaders({});
        return await this.campusListCampusWithOptions(request, headers, runtime);
    }
    async campusListCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupDeptId)) {
            query["groupDeptId"] = request.groupDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusListCampus", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/projects`, "json", req, runtime), new CampusListCampusResponse({}));
    }
    async campusListCampusGroup() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListCampusGroupHeaders({});
        return await this.campusListCampusGroupWithOptions(headers, runtime);
    }
    async campusListCampusGroupWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("CampusListCampusGroup", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/projects/groups`, "json", req, runtime), new CampusListCampusGroupResponse({}));
    }
    async campusListRenter() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListRenterHeaders({});
        return await this.campusListRenterWithOptions(headers, runtime);
    }
    async campusListRenterWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("CampusListRenter", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/renters`, "json", req, runtime), new CampusListRenterResponse({}));
    }
    async campusListRenterMembers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListRenterMembersHeaders({});
        return await this.campusListRenterMembersWithOptions(request, headers, runtime);
    }
    async campusListRenterMembersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CampusListRenterMembers", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/campuses/renters/members`, "json", req, runtime), new CampusListRenterMembersResponse({}));
    }
    async campusUpdateCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateCampusHeaders({});
        return await this.campusUpdateCampusWithOptions(request, headers, runtime);
    }
    async campusUpdateCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            body["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.area)) {
            body["area"] = request.area;
        }
        if (!tea_util_1.default.isUnset(request.belongProjectGroupId)) {
            body["belongProjectGroupId"] = request.belongProjectGroupId;
        }
        if (!tea_util_1.default.isUnset(request.campusDeptId)) {
            body["campusDeptId"] = request.campusDeptId;
        }
        if (!tea_util_1.default.isUnset(request.campusName)) {
            body["campusName"] = request.campusName;
        }
        if (!tea_util_1.default.isUnset(request.capacity)) {
            body["capacity"] = request.capacity;
        }
        if (!tea_util_1.default.isUnset(request.cityId)) {
            body["cityId"] = request.cityId;
        }
        if (!tea_util_1.default.isUnset(request.country)) {
            body["country"] = request.country;
        }
        if (!tea_util_1.default.isUnset(request.countyId)) {
            body["countyId"] = request.countyId;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.orderEndTime)) {
            body["orderEndTime"] = request.orderEndTime;
        }
        if (!tea_util_1.default.isUnset(request.orderInfo)) {
            body["orderInfo"] = request.orderInfo;
        }
        if (!tea_util_1.default.isUnset(request.orderStartTime)) {
            body["orderStartTime"] = request.orderStartTime;
        }
        if (!tea_util_1.default.isUnset(request.provId)) {
            body["provId"] = request.provId;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusUpdateCampus", "industry_1.0", "HTTP", "PUT", "AK", `/v1.0/industry/campuses/projects`, "json", req, runtime), new CampusUpdateCampusResponse({}));
    }
    async campusUpdateCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateCampusGroupHeaders({});
        return await this.campusUpdateCampusGroupWithOptions(request, headers, runtime);
    }
    async campusUpdateCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.campusProjectGroupId)) {
            body["campusProjectGroupId"] = request.campusProjectGroupId;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusUpdateCampusGroup", "industry_1.0", "HTTP", "PUT", "AK", `/v1.0/industry/campuses/projects/groups`, "json", req, runtime), new CampusUpdateCampusGroupResponse({}));
    }
    async campusUpdateRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateRenterHeaders({});
        return await this.campusUpdateRenterWithOptions(request, headers, runtime);
    }
    async campusUpdateRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.creditCode)) {
            body["creditCode"] = request.creditCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.renterId)) {
            body["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            body["state"] = request.state;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusUpdateRenter", "industry_1.0", "HTTP", "PUT", "AK", `/v1.0/industry/campuses/renters`, "json", req, runtime), new CampusUpdateRenterResponse({}));
    }
    async campusUpdateRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateRenterMemberHeaders({});
        return await this.campusUpdateRenterMemberWithOptions(request, headers, runtime);
    }
    async campusUpdateRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.renterId)) {
            body["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CampusUpdateRenterMember", "industry_1.0", "HTTP", "PUT", "AK", `/v1.0/industry/campuses/renters/members`, "json", req, runtime), new CampusUpdateRenterMemberResponse({}));
    }
    async customizeContactCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactCreateHeaders({});
        return await this.customizeContactCreateWithOptions(request, headers, runtime);
    }
    async customizeContactCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactCreate", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/customizations/contacts`, "json", req, runtime), new CustomizeContactCreateResponse({}));
    }
    async customizeContactDelete(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeleteHeaders({});
        return await this.customizeContactDeleteWithOptions(request, headers, runtime);
    }
    async customizeContactDeleteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactDelete", "industry_1.0", "HTTP", "DELETE", "AK", `/v1.0/industry/customizations/contacts`, "json", req, runtime), new CustomizeContactDeleteResponse({}));
    }
    async customizeContactDeptCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptCreateHeaders({});
        return await this.customizeContactDeptCreateWithOptions(request, headers, runtime);
    }
    async customizeContactDeptCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.parentDeptId)) {
            body["parentDeptId"] = request.parentDeptId;
        }
        if (!tea_util_1.default.isUnset(request.refId)) {
            body["refId"] = request.refId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactDeptCreate", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/customizations/departments`, "json", req, runtime), new CustomizeContactDeptCreateResponse({}));
    }
    async customizeContactDeptDelete(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptDeleteHeaders({});
        return await this.customizeContactDeptDeleteWithOptions(request, headers, runtime);
    }
    async customizeContactDeptDeleteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactDeptDelete", "industry_1.0", "HTTP", "DELETE", "AK", `/v1.0/industry/customizations/departments`, "json", req, runtime), new CustomizeContactDeptDeleteResponse({}));
    }
    async customizeContactDeptInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptInfoHeaders({});
        return await this.customizeContactDeptInfoWithOptions(request, headers, runtime);
    }
    async customizeContactDeptInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactDeptInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/customizations/departments`, "json", req, runtime), new CustomizeContactDeptInfoResponse({}));
    }
    async customizeContactDeptList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptListHeaders({});
        return await this.customizeContactDeptListWithOptions(request, headers, runtime);
    }
    async customizeContactDeptListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactDeptList", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/customizations/subsidiaryDepartments`, "json", req, runtime), new CustomizeContactDeptListResponse({}));
    }
    async customizeContactDeptUpdate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptUpdateHeaders({});
        return await this.customizeContactDeptUpdateWithOptions(request, headers, runtime);
    }
    async customizeContactDeptUpdateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.parentDeptId)) {
            body["parentDeptId"] = request.parentDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactDeptUpdate", "industry_1.0", "HTTP", "PUT", "AK", `/v1.0/industry/customizations/departments`, "json", req, runtime), new CustomizeContactDeptUpdateResponse({}));
    }
    async customizeContactEmpAdd(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactEmpAddHeaders({});
        return await this.customizeContactEmpAddWithOptions(request, headers, runtime);
    }
    async customizeContactEmpAddWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactEmpAdd", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/customizations/users`, "json", req, runtime), new CustomizeContactEmpAddResponse({}));
    }
    async customizeContactEmpDelete(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactEmpDeleteHeaders({});
        return await this.customizeContactEmpDeleteWithOptions(request, headers, runtime);
    }
    async customizeContactEmpDeleteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactEmpDelete", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/customizations/users/remove`, "json", req, runtime), new CustomizeContactEmpDeleteResponse({}));
    }
    async customizeContactEmpList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactEmpListHeaders({});
        return await this.customizeContactEmpListWithOptions(request, headers, runtime);
    }
    async customizeContactEmpListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactEmpList", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/customizations/users`, "json", req, runtime), new CustomizeContactEmpListResponse({}));
    }
    async customizeContactList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactListHeaders({});
        return await this.customizeContactListWithOptions(headers, runtime);
    }
    async customizeContactListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("CustomizeContactList", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/customizations/contacts`, "json", req, runtime), new CustomizeContactListResponse({}));
    }
    async customizeContactUpdate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactUpdateHeaders({});
        return await this.customizeContactUpdateWithOptions(request, headers, runtime);
    }
    async customizeContactUpdateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CustomizeContactUpdate", "industry_1.0", "HTTP", "PUT", "AK", `/v1.0/industry/customizations/contacts`, "json", req, runtime), new CustomizeContactUpdateResponse({}));
    }
    async digitalStoreContactInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreContactInfoHeaders({});
        return await this.digitalStoreContactInfoWithOptions(headers, runtime);
    }
    async digitalStoreContactInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("DigitalStoreContactInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/contactInfos`, "json", req, runtime), new DigitalStoreContactInfoResponse({}));
    }
    async digitalStoreGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreGroupInfoHeaders({});
        return await this.digitalStoreGroupInfoWithOptions(request, headers, runtime);
    }
    async digitalStoreGroupInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["groupId"] = request.groupId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DigitalStoreGroupInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/groupInfos`, "json", req, runtime), new DigitalStoreGroupInfoResponse({}));
    }
    async digitalStoreGroups() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreGroupsHeaders({});
        return await this.digitalStoreGroupsWithOptions(headers, runtime);
    }
    async digitalStoreGroupsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("DigitalStoreGroups", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/groups`, "json", req, runtime), new DigitalStoreGroupsResponse({}));
    }
    async digitalStoreNodeInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreNodeInfoHeaders({});
        return await this.digitalStoreNodeInfoWithOptions(request, headers, runtime);
    }
    async digitalStoreNodeInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.nodeId)) {
            query["nodeId"] = request.nodeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DigitalStoreNodeInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/nodeInfos`, "json", req, runtime), new DigitalStoreNodeInfoResponse({}));
    }
    async digitalStoreRightsInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreRightsInfoHeaders({});
        return await this.digitalStoreRightsInfoWithOptions(headers, runtime);
    }
    async digitalStoreRightsInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("DigitalStoreRightsInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/rightsInfos`, "json", req, runtime), new DigitalStoreRightsInfoResponse({}));
    }
    async digitalStoreRoles() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreRolesHeaders({});
        return await this.digitalStoreRolesWithOptions(headers, runtime);
    }
    async digitalStoreRolesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("DigitalStoreRoles", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/roles`, "json", req, runtime), new DigitalStoreRolesResponse({}));
    }
    async digitalStoreStoreInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreStoreInfoHeaders({});
        return await this.digitalStoreStoreInfoWithOptions(request, headers, runtime);
    }
    async digitalStoreStoreInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.storeId)) {
            query["storeId"] = request.storeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DigitalStoreStoreInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/storeInfos`, "json", req, runtime), new DigitalStoreStoreInfoResponse({}));
    }
    async digitalStoreSubNodes(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreSubNodesHeaders({});
        return await this.digitalStoreSubNodesWithOptions(request, headers, runtime);
    }
    async digitalStoreSubNodesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.nodeId)) {
            query["nodeId"] = request.nodeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DigitalStoreSubNodes", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/subsidiaryNodes`, "json", req, runtime), new DigitalStoreSubNodesResponse({}));
    }
    async digitalStoreUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreUserInfoHeaders({});
        return await this.digitalStoreUserInfoWithOptions(request, headers, runtime);
    }
    async digitalStoreUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DigitalStoreUserInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/userInfos`, "json", req, runtime), new DigitalStoreUserInfoResponse({}));
    }
    async digitalStoreUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreUsersHeaders({});
        return await this.digitalStoreUsersWithOptions(request, headers, runtime);
    }
    async digitalStoreUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.nodeId)) {
            query["nodeId"] = request.nodeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DigitalStoreUsers", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/digitalStores/nodes/users`, "json", req, runtime), new DigitalStoreUsersResponse({}));
    }
    async externalQueryExternalAppOrgs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExternalQueryExternalAppOrgsHeaders({});
        return await this.externalQueryExternalAppOrgsWithOptions(request, headers, runtime);
    }
    async externalQueryExternalAppOrgsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.externalType)) {
            query["externalType"] = request.externalType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ExternalQueryExternalAppOrgs", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/externals/apps/organizations`, "json", req, runtime), new ExternalQueryExternalAppOrgsResponse({}));
    }
    async externalQueryExternalBelongMainOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExternalQueryExternalBelongMainOrgHeaders({});
        return await this.externalQueryExternalBelongMainOrgWithOptions(request, headers, runtime);
    }
    async externalQueryExternalBelongMainOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.externalType)) {
            query["externalType"] = request.externalType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ExternalQueryExternalBelongMainOrg", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/externals/attributions/masterOrganizations`, "json", req, runtime), new ExternalQueryExternalBelongMainOrgResponse({}));
    }
    async externalQueryExternalOrgs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExternalQueryExternalOrgsHeaders({});
        return await this.externalQueryExternalOrgsWithOptions(request, headers, runtime);
    }
    async externalQueryExternalOrgsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.externalType)) {
            query["externalType"] = request.externalType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ExternalQueryExternalOrgs", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/externals/organizations`, "json", req, runtime), new ExternalQueryExternalOrgsResponse({}));
    }
    async industryManufactureCommonEvent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureCommonEventHeaders({});
        return await this.industryManufactureCommonEventWithOptions(request, headers, runtime);
    }
    async industryManufactureCommonEventWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.bizData)) {
            body["bizData"] = request.bizData;
        }
        if (!tea_util_1.default.isUnset(request.eventType)) {
            body["eventType"] = request.eventType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureCommonEvent", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturing/bases/commons/events`, "json", req, runtime), new IndustryManufactureCommonEventResponse({}));
    }
    async industryManufactureCostRecordListGet(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureCostRecordListGetHeaders({});
        return await this.industryManufactureCostRecordListGetWithOptions(request, headers, runtime);
    }
    async industryManufactureCostRecordListGetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productionTaskNo)) {
            body["productionTaskNo"] = request.productionTaskNo;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureCostRecordListGet", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufactures/materialCostRecords/query`, "json", req, runtime), new IndustryManufactureCostRecordListGetResponse({}));
    }
    async industryManufactureFeeListGet(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureFeeListGetHeaders({});
        return await this.industryManufactureFeeListGetWithOptions(request, headers, runtime);
    }
    async industryManufactureFeeListGetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productionTaskNo)) {
            body["productionTaskNo"] = request.productionTaskNo;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureFeeListGet", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufactures/fees/query`, "json", req, runtime), new IndustryManufactureFeeListGetResponse({}));
    }
    async industryManufactureLabourCost(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureLabourCostHeaders({});
        return await this.industryManufactureLabourCostWithOptions(request, headers, runtime);
    }
    async industryManufactureLabourCostWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.processNo)) {
            body["processNo"] = request.processNo;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureLabourCost", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufactures/labourCosts/query`, "json", req, runtime), new IndustryManufactureLabourCostResponse({}));
    }
    async industryManufactureMaterialList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMaterialListHeaders({});
        return await this.industryManufactureMaterialListWithOptions(request, headers, runtime);
    }
    async industryManufactureMaterialListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            body["currentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMaterialList", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufactures/materials/query`, "json", req, runtime), new IndustryManufactureMaterialListResponse({}));
    }
    async industryManufactureMesDispatchTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesDispatchTaskHeaders({});
        return await this.industryManufactureMesDispatchTaskWithOptions(request, headers, runtime);
    }
    async industryManufactureMesDispatchTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.defectsAmount)) {
            body["defectsAmount"] = request.defectsAmount;
        }
        if (!tea_util_1.default.isUnset(request.dispatchStaffName)) {
            body["dispatchStaffName"] = request.dispatchStaffName;
        }
        if (!tea_util_1.default.isUnset(request.dispatchStaffNo)) {
            body["dispatchStaffNo"] = request.dispatchStaffNo;
        }
        if (!tea_util_1.default.isUnset(request.fineAmount)) {
            body["fineAmount"] = request.fineAmount;
        }
        if (!tea_util_1.default.isUnset(request.overdue)) {
            body["overdue"] = request.overdue;
        }
        if (!tea_util_1.default.isUnset(request.planQuantity)) {
            body["planQuantity"] = request.planQuantity;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.processName)) {
            body["processName"] = request.processName;
        }
        if (!tea_util_1.default.isUnset(request.processUuid)) {
            body["processUuid"] = request.processUuid;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.projectCode)) {
            body["projectCode"] = request.projectCode;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        if (!tea_util_1.default.isUnset(request.projectStatus)) {
            body["projectStatus"] = request.projectStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskOperators)) {
            body["taskOperators"] = request.taskOperators;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanEndTime)) {
            body["taskPlanEndTime"] = request.taskPlanEndTime;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanStartTime)) {
            body["taskPlanStartTime"] = request.taskPlanStartTime;
        }
        if (!tea_util_1.default.isUnset(request.taskStatus)) {
            body["taskStatus"] = request.taskStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskType)) {
            body["taskType"] = request.taskType;
        }
        if (!tea_util_1.default.isUnset(request.teamId)) {
            body["teamId"] = request.teamId;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesDispatchTask", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturings/dispatchTasks/manage`, "json", req, runtime), new IndustryManufactureMesDispatchTaskResponse({}));
    }
    async industryManufactureMesMaterial(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesMaterialHeaders({});
        return await this.industryManufactureMesMaterialWithOptions(request, headers, runtime);
    }
    async industryManufactureMesMaterialWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.category)) {
            body["category"] = request.category;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.prop)) {
            body["prop"] = request.prop;
        }
        if (!tea_util_1.default.isUnset(request.unit)) {
            body["unit"] = request.unit;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesMaterial", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturings/materials/manage`, "json", req, runtime), new IndustryManufactureMesMaterialResponse({}));
    }
    async industryManufactureMesOutPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesOutPlanHeaders({});
        return await this.industryManufactureMesOutPlanWithOptions(request, headers, runtime);
    }
    async industryManufactureMesOutPlanWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.approvalStatus)) {
            body["approvalStatus"] = request.approvalStatus;
        }
        if (!tea_util_1.default.isUnset(request.approver)) {
            body["approver"] = request.approver;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.outSourceProjectCode)) {
            body["outSourceProjectCode"] = request.outSourceProjectCode;
        }
        if (!tea_util_1.default.isUnset(request.outSourceTeamId)) {
            body["outSourceTeamId"] = request.outSourceTeamId;
        }
        if (!tea_util_1.default.isUnset(request.price)) {
            body["price"] = request.price;
        }
        if (!tea_util_1.default.isUnset(request.processIdentificationCode)) {
            body["processIdentificationCode"] = request.processIdentificationCode;
        }
        if (!tea_util_1.default.isUnset(request.processUuids)) {
            body["processUuids"] = request.processUuids;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.projectCode)) {
            body["projectCode"] = request.projectCode;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        if (!tea_util_1.default.isUnset(request.sendPlanQuantity)) {
            body["sendPlanQuantity"] = request.sendPlanQuantity;
        }
        if (!tea_util_1.default.isUnset(request.supplierCode)) {
            body["supplierCode"] = request.supplierCode;
        }
        if (!tea_util_1.default.isUnset(request.supplierName)) {
            body["supplierName"] = request.supplierName;
        }
        if (!tea_util_1.default.isUnset(request.totalWage)) {
            body["totalWage"] = request.totalWage;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesOutPlan", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturings/outPlans/manage`, "json", req, runtime), new IndustryManufactureMesOutPlanResponse({}));
    }
    async industryManufactureMesOutput(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesOutputHeaders({});
        return await this.industryManufactureMesOutputWithOptions(request, headers, runtime);
    }
    async industryManufactureMesOutputWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.approveStatus)) {
            body["approveStatus"] = request.approveStatus;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.defectsAmount)) {
            body["defectsAmount"] = request.defectsAmount;
        }
        if (!tea_util_1.default.isUnset(request.defectsReason)) {
            body["defectsReason"] = request.defectsReason;
        }
        if (!tea_util_1.default.isUnset(request.fineAmount)) {
            body["fineAmount"] = request.fineAmount;
        }
        if (!tea_util_1.default.isUnset(request.hasQualityTest)) {
            body["hasQualityTest"] = request.hasQualityTest;
        }
        if (!tea_util_1.default.isUnset(request.overdue)) {
            body["overdue"] = request.overdue;
        }
        if (!tea_util_1.default.isUnset(request.planQuantity)) {
            body["planQuantity"] = request.planQuantity;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.processName)) {
            body["processName"] = request.processName;
        }
        if (!tea_util_1.default.isUnset(request.processUuid)) {
            body["processUuid"] = request.processUuid;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.projectCode)) {
            body["projectCode"] = request.projectCode;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        if (!tea_util_1.default.isUnset(request.projectStatus)) {
            body["projectStatus"] = request.projectStatus;
        }
        if (!tea_util_1.default.isUnset(request.qualityTestStatus)) {
            body["qualityTestStatus"] = request.qualityTestStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanEndTime)) {
            body["taskPlanEndTime"] = request.taskPlanEndTime;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanStartTime)) {
            body["taskPlanStartTime"] = request.taskPlanStartTime;
        }
        if (!tea_util_1.default.isUnset(request.taskStatus)) {
            body["taskStatus"] = request.taskStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskType)) {
            body["taskType"] = request.taskType;
        }
        if (!tea_util_1.default.isUnset(request.taskUuid)) {
            body["taskUuid"] = request.taskUuid;
        }
        if (!tea_util_1.default.isUnset(request.teamId)) {
            body["teamId"] = request.teamId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userName)) {
            body["userName"] = request.userName;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesOutput", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturings/outputs/manage`, "json", req, runtime), new IndustryManufactureMesOutputResponse({}));
    }
    async industryManufactureMesProcess(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesProcessHeaders({});
        return await this.industryManufactureMesProcessWithOptions(request, headers, runtime);
    }
    async industryManufactureMesProcessWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.needDispatch)) {
            body["needDispatch"] = request.needDispatch;
        }
        if (!tea_util_1.default.isUnset(request.needQualityTest)) {
            body["needQualityTest"] = request.needQualityTest;
        }
        if (!tea_util_1.default.isUnset(request.no)) {
            body["no"] = request.no;
        }
        if (!tea_util_1.default.isUnset(request.price)) {
            body["price"] = request.price;
        }
        if (!tea_util_1.default.isUnset(request.prop)) {
            body["prop"] = request.prop;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.sop)) {
            body["sop"] = request.sop;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesProcess", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturings/processes/manage`, "json", req, runtime), new IndustryManufactureMesProcessResponse({}));
    }
    async industryManufactureMesProductionPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesProductionPlanHeaders({});
        return await this.industryManufactureMesProductionPlanWithOptions(request, headers, runtime);
    }
    async industryManufactureMesProductionPlanWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.actualEndTime)) {
            body["actualEndTime"] = request.actualEndTime;
        }
        if (!tea_util_1.default.isUnset(request.actualStartTime)) {
            body["actualStartTime"] = request.actualStartTime;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.bomUuid)) {
            body["bomUuid"] = request.bomUuid;
        }
        if (!tea_util_1.default.isUnset(request.events)) {
            body["events"] = request.events;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.no)) {
            body["no"] = request.no;
        }
        if (!tea_util_1.default.isUnset(request.overdue)) {
            body["overdue"] = request.overdue;
        }
        if (!tea_util_1.default.isUnset(request.planEndTime)) {
            body["planEndTime"] = request.planEndTime;
        }
        if (!tea_util_1.default.isUnset(request.planQuantity)) {
            body["planQuantity"] = request.planQuantity;
        }
        if (!tea_util_1.default.isUnset(request.planStartTime)) {
            body["planStartTime"] = request.planStartTime;
        }
        if (!tea_util_1.default.isUnset(request.processUuids)) {
            body["processUuids"] = request.processUuids;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.qualifiedQuantity)) {
            body["qualifiedQuantity"] = request.qualifiedQuantity;
        }
        if (!tea_util_1.default.isUnset(request.sellOrderNo)) {
            body["sellOrderNo"] = request.sellOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.teamList)) {
            body["teamList"] = request.teamList;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.unit)) {
            body["unit"] = request.unit;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesProductionPlan", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturings/productionPlans/manage`, "json", req, runtime), new IndustryManufactureMesProductionPlanResponse({}));
    }
    async industryManufactureMesSubCooperationTeam(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesSubCooperationTeamHeaders({});
        return await this.industryManufactureMesSubCooperationTeamWithOptions(request, headers, runtime);
    }
    async industryManufactureMesSubCooperationTeamWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.events)) {
            body["events"] = request.events;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.groupPlugins)) {
            body["groupPlugins"] = request.groupPlugins;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            body["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.leaders)) {
            body["leaders"] = request.leaders;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.outCorpId)) {
            body["outCorpId"] = request.outCorpId;
        }
        if (!tea_util_1.default.isUnset(request.processIds)) {
            body["processIds"] = request.processIds;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesSubCooperationTeam", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturings/outTeams/manage`, "json", req, runtime), new IndustryManufactureMesSubCooperationTeamResponse({}));
    }
    async industryManufactureMesTeamMgmt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesTeamMgmtHeaders({});
        return await this.industryManufactureMesTeamMgmtWithOptions(request, headers, runtime);
    }
    async industryManufactureMesTeamMgmtWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.events)) {
            body["events"] = request.events;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.groupConfig)) {
            body["groupConfig"] = request.groupConfig;
        }
        if (!tea_util_1.default.isUnset(request.groupPlugins)) {
            body["groupPlugins"] = request.groupPlugins;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            body["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.leaders)) {
            body["leaders"] = request.leaders;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.processIds)) {
            body["processIds"] = request.processIds;
        }
        if (!tea_util_1.default.isUnset(request.tagKey)) {
            body["tagKey"] = request.tagKey;
        }
        if (!tea_util_1.default.isUnset(request.tagValues)) {
            body["tagValues"] = request.tagValues;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryManufactureMesTeamMgmt", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufacturing/base/data/team`, "json", req, runtime), new IndustryManufactureMesTeamMgmtResponse({}));
    }
    async industryMmanufactureMaterialCostGet(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryMmanufactureMaterialCostGetHeaders({});
        return await this.industryMmanufactureMaterialCostGetWithOptions(request, headers, runtime);
    }
    async industryMmanufactureMaterialCostGetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("IndustryMmanufactureMaterialCostGet", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/manufactures/base/materialCosts/query`, "json", req, runtime), new IndustryMmanufactureMaterialCostGetResponse({}));
    }
    async pushDingMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PushDingMessageHeaders({});
        return await this.pushDingMessageWithOptions(request, headers, runtime);
    }
    async pushDingMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.messageType)) {
            body["messageType"] = request.messageType;
        }
        if (!tea_util_1.default.isUnset(request.messageUrl)) {
            body["messageUrl"] = request.messageUrl;
        }
        if (!tea_util_1.default.isUnset(request.pictureUrl)) {
            body["pictureUrl"] = request.pictureUrl;
        }
        if (!tea_util_1.default.isUnset(request.singleTitle)) {
            body["singleTitle"] = request.singleTitle;
        }
        if (!tea_util_1.default.isUnset(request.singleUrl)) {
            body["singleUrl"] = request.singleUrl;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("PushDingMessage", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/works/notice`, "json", req, runtime), new PushDingMessageResponse({}));
    }
    async queryAllDepartment(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllDepartmentHeaders({});
        return await this.queryAllDepartmentWithOptions(request, headers, runtime);
    }
    async queryAllDepartmentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllDepartment", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/departments`, "json", req, runtime), new QueryAllDepartmentResponse({}));
    }
    async queryAllDoctors(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllDoctorsHeaders({});
        return await this.queryAllDoctorsWithOptions(request, headers, runtime);
    }
    async queryAllDoctorsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        if (!tea_util_1.default.isUnset(request.pageNum)) {
            query["pageNum"] = request.pageNum;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllDoctors", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/doctors`, "json", req, runtime), new QueryAllDoctorsResponse({}));
    }
    async queryAllGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllGroupHeaders({});
        return await this.queryAllGroupWithOptions(request, headers, runtime);
    }
    async queryAllGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllGroup", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/groups`, "json", req, runtime), new QueryAllGroupResponse({}));
    }
    async queryAllGroupsInDept(deptId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllGroupsInDeptHeaders({});
        return await this.queryAllGroupsInDeptWithOptions(deptId, request, headers, runtime);
    }
    async queryAllGroupsInDeptWithOptions(deptId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        deptId = openapi_util_1.default.getEncodeParam(deptId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllGroupsInDept", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/departments/${deptId}/groups`, "json", req, runtime), new QueryAllGroupsInDeptResponse({}));
    }
    async queryAllMemberByDept(deptId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllMemberByDeptHeaders({});
        return await this.queryAllMemberByDeptWithOptions(deptId, request, headers, runtime);
    }
    async queryAllMemberByDeptWithOptions(deptId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        deptId = openapi_util_1.default.getEncodeParam(deptId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllMemberByDept", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/departments/${deptId}/members`, "json", req, runtime), new QueryAllMemberByDeptResponse({}));
    }
    async queryAllMemberByGroup(groupId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllMemberByGroupHeaders({});
        return await this.queryAllMemberByGroupWithOptions(groupId, request, headers, runtime);
    }
    async queryAllMemberByGroupWithOptions(groupId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        groupId = openapi_util_1.default.getEncodeParam(groupId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllMemberByGroup", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/groups/${groupId}/members`, "json", req, runtime), new QueryAllMemberByGroupResponse({}));
    }
    async queryBizOptLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBizOptLogHeaders({});
        return await this.queryBizOptLogWithOptions(request, headers, runtime);
    }
    async queryBizOptLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryBizOptLog", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/bizOptLogs`, "json", req, runtime), new QueryBizOptLogResponse({}));
    }
    async queryDepartmentExtendInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDepartmentExtendInfoHeaders({});
        return await this.queryDepartmentExtendInfoWithOptions(request, headers, runtime);
    }
    async queryDepartmentExtendInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptCode)) {
            query["deptCode"] = request.deptCode;
        }
        if (!tea_util_1.default.isUnset(request.propCode)) {
            query["propCode"] = request.propCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryDepartmentExtendInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/departments/extensions/infos`, "json", req, runtime), new QueryDepartmentExtendInfoResponse({}));
    }
    async queryDepartmentInfo(deptId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDepartmentInfoHeaders({});
        return await this.queryDepartmentInfoWithOptions(deptId, headers, runtime);
    }
    async queryDepartmentInfoWithOptions(deptId, headers, runtime) {
        deptId = openapi_util_1.default.getEncodeParam(deptId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryDepartmentInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/departments/${deptId}`, "json", req, runtime), new QueryDepartmentInfoResponse({}));
    }
    async queryGroupInfo(groupId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupInfoHeaders({});
        return await this.queryGroupInfoWithOptions(groupId, headers, runtime);
    }
    async queryGroupInfoWithOptions(groupId, headers, runtime) {
        groupId = openapi_util_1.default.getEncodeParam(groupId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryGroupInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/groups/${groupId}`, "json", req, runtime), new QueryGroupInfoResponse({}));
    }
    async queryHospitalDistrictInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHospitalDistrictInfoHeaders({});
        return await this.queryHospitalDistrictInfoWithOptions(request, headers, runtime);
    }
    async queryHospitalDistrictInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryHospitalDistrictInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/districts`, "json", req, runtime), new QueryHospitalDistrictInfoResponse({}));
    }
    async queryHospitalRoleUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHospitalRoleUserInfoHeaders({});
        return await this.queryHospitalRoleUserInfoWithOptions(request, headers, runtime);
    }
    async queryHospitalRoleUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryHospitalRoleUserInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/roles/userInfos`, "json", req, runtime), new QueryHospitalRoleUserInfoResponse({}));
    }
    async queryHospitalRoles() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHospitalRolesHeaders({});
        return await this.queryHospitalRolesWithOptions(headers, runtime);
    }
    async queryHospitalRolesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryHospitalRoles", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/roles`, "json", req, runtime), new QueryHospitalRolesResponse({}));
    }
    async queryJobCodeDictionary() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryJobCodeDictionaryHeaders({});
        return await this.queryJobCodeDictionaryWithOptions(headers, runtime);
    }
    async queryJobCodeDictionaryWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryJobCodeDictionary", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/jobCodes`, "json", req, runtime), new QueryJobCodeDictionaryResponse({}));
    }
    async queryJobStatusCodeDictionary() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryJobStatusCodeDictionaryHeaders({});
        return await this.queryJobStatusCodeDictionaryWithOptions(headers, runtime);
    }
    async queryJobStatusCodeDictionaryWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryJobStatusCodeDictionary", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/jobStatusCodes`, "json", req, runtime), new QueryJobStatusCodeDictionaryResponse({}));
    }
    async queryMedicalEvents() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMedicalEventsHeaders({});
        return await this.queryMedicalEventsWithOptions(headers, runtime);
    }
    async queryMedicalEventsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryMedicalEvents", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/events`, "json", req, runtime), new QueryMedicalEventsResponse({}));
    }
    async queryUserCredentials(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserCredentialsHeaders({});
        return await this.queryUserCredentialsWithOptions(request, headers, runtime);
    }
    async queryUserCredentialsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryUserCredentials", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/medicals/users/credentials/query`, "json", req, runtime), new QueryUserCredentialsResponse({}));
    }
    async queryUserExtInfo(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserExtInfoHeaders({});
        return await this.queryUserExtInfoWithOptions(userId, headers, runtime);
    }
    async queryUserExtInfoWithOptions(userId, headers, runtime) {
        userId = openapi_util_1.default.getEncodeParam(userId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryUserExtInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/users/${userId}/extInfos`, "json", req, runtime), new QueryUserExtInfoResponse({}));
    }
    async queryUserExtendValues(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserExtendValuesHeaders({});
        return await this.queryUserExtendValuesWithOptions(request, headers, runtime);
    }
    async queryUserExtendValuesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userExtendKey)) {
            body["userExtendKey"] = request.userExtendKey;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryUserExtendValues", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/medicals/users/extends/query`, "json", req, runtime), new QueryUserExtendValuesResponse({}));
    }
    async queryUserInfo(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserInfoHeaders({});
        return await this.queryUserInfoWithOptions(userId, headers, runtime);
    }
    async queryUserInfoWithOptions(userId, headers, runtime) {
        userId = openapi_util_1.default.getEncodeParam(userId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryUserInfo", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/users/${userId}`, "json", req, runtime), new QueryUserInfoResponse({}));
    }
    async queryUserProbCodeDictionary() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserProbCodeDictionaryHeaders({});
        return await this.queryUserProbCodeDictionaryWithOptions(headers, runtime);
    }
    async queryUserProbCodeDictionaryWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryUserProbCodeDictionary", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/userProbCodes`, "json", req, runtime), new QueryUserProbCodeDictionaryResponse({}));
    }
    async queryUserRoles(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserRolesHeaders({});
        return await this.queryUserRolesWithOptions(userId, headers, runtime);
    }
    async queryUserRolesWithOptions(userId, headers, runtime) {
        userId = openapi_util_1.default.getEncodeParam(userId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryUserRoles", "industry_1.0", "HTTP", "GET", "AK", `/v1.0/industry/medicals/users/${userId}/roles`, "json", req, runtime), new QueryUserRolesResponse({}));
    }
    async saveUserExtendValues(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveUserExtendValuesHeaders({});
        return await this.saveUserExtendValuesWithOptions(userId, request, headers, runtime);
    }
    async saveUserExtendValuesWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userDisplayName)) {
            query["userDisplayName"] = request.userDisplayName;
        }
        if (!tea_util_1.default.isUnset(request.userExtendKey)) {
            query["userExtendKey"] = request.userExtendKey;
        }
        if (!tea_util_1.default.isUnset(request.userExtendValue)) {
            query["userExtendValue"] = request.userExtendValue;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("SaveUserExtendValues", "industry_1.0", "HTTP", "POST", "AK", `/v1.0/industry/medicals/users/${userId}/extends`, "json", req, runtime), new SaveUserExtendValuesResponse({}));
    }
    async updateUserExtendInfo(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateUserExtendInfoHeaders({});
        return await this.updateUserExtendInfoWithOptions(userId, request, headers, runtime);
    }
    async updateUserExtendInfoWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.comments)) {
            body["comments"] = request.comments;
        }
        if (!tea_util_1.default.isUnset(request.jobCode)) {
            body["jobCode"] = request.jobCode;
        }
        if (!tea_util_1.default.isUnset(request.jobStatusCode)) {
            body["jobStatusCode"] = request.jobStatusCode;
        }
        if (!tea_util_1.default.isUnset(request.userProbCode)) {
            body["userProbCode"] = request.userProbCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateUserExtendInfo", "industry_1.0", "HTTP", "PUT", "AK", `/v1.0/industry/medicals/users/${userId}/extInfos`, "none", req, runtime), new UpdateUserExtendInfoResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map