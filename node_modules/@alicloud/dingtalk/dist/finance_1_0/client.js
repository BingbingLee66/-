"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class ApplyBatchPayHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ApplyBatchPayHeaders = ApplyBatchPayHeaders;
class ApplyBatchPayRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountId: 'accountId',
            orderNo: 'orderNo',
            passBackParams: 'passBackParams',
            payTerminal: 'payTerminal',
            returnUrl: 'returnUrl',
            staffId: 'staffId',
            transAmount: 'transAmount',
            transExpireTime: 'transExpireTime',
        };
    }
    static types() {
        return {
            accountId: 'string',
            orderNo: 'string',
            passBackParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            payTerminal: 'string',
            returnUrl: 'string',
            staffId: 'string',
            transAmount: 'string',
            transExpireTime: 'string',
        };
    }
}
exports.ApplyBatchPayRequest = ApplyBatchPayRequest;
class ApplyBatchPayResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderNo: 'orderNo',
            payData: 'payData',
        };
    }
    static types() {
        return {
            orderNo: 'string',
            payData: 'string',
        };
    }
}
exports.ApplyBatchPayResponseBody = ApplyBatchPayResponseBody;
class ApplyBatchPayResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ApplyBatchPayResponseBody,
        };
    }
}
exports.ApplyBatchPayResponse = ApplyBatchPayResponse;
class ConsultCreateSubInstitutionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionHeaders = ConsultCreateSubInstitutionHeaders;
class ConsultCreateSubInstitutionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bindingAlipayLogonId: 'bindingAlipayLogonId',
            contactInfo: 'contactInfo',
            instId: 'instId',
            legalPersonCertInfo: 'legalPersonCertInfo',
            outTradeNo: 'outTradeNo',
            payChannel: 'payChannel',
            qualificationInfos: 'qualificationInfos',
            services: 'services',
            settleInfo: 'settleInfo',
            solution: 'solution',
            subInstAddressInfo: 'subInstAddressInfo',
            subInstAuthInfo: 'subInstAuthInfo',
            subInstBasicInfo: 'subInstBasicInfo',
            subInstCertifyInfo: 'subInstCertifyInfo',
            subInstId: 'subInstId',
            subInstInvoiceInfo: 'subInstInvoiceInfo',
            subInstShopInfo: 'subInstShopInfo',
        };
    }
    static types() {
        return {
            bindingAlipayLogonId: 'string',
            contactInfo: ConsultCreateSubInstitutionRequestContactInfo,
            instId: 'string',
            legalPersonCertInfo: ConsultCreateSubInstitutionRequestLegalPersonCertInfo,
            outTradeNo: 'string',
            payChannel: 'string',
            qualificationInfos: { 'type': 'array', 'itemType': ConsultCreateSubInstitutionRequestQualificationInfos },
            services: { 'type': 'array', 'itemType': 'string' },
            settleInfo: ConsultCreateSubInstitutionRequestSettleInfo,
            solution: 'string',
            subInstAddressInfo: ConsultCreateSubInstitutionRequestSubInstAddressInfo,
            subInstAuthInfo: ConsultCreateSubInstitutionRequestSubInstAuthInfo,
            subInstBasicInfo: ConsultCreateSubInstitutionRequestSubInstBasicInfo,
            subInstCertifyInfo: ConsultCreateSubInstitutionRequestSubInstCertifyInfo,
            subInstId: 'string',
            subInstInvoiceInfo: ConsultCreateSubInstitutionRequestSubInstInvoiceInfo,
            subInstShopInfo: ConsultCreateSubInstitutionRequestSubInstShopInfo,
        };
    }
}
exports.ConsultCreateSubInstitutionRequest = ConsultCreateSubInstitutionRequest;
class ConsultCreateSubInstitutionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderId: 'orderId',
        };
    }
    static types() {
        return {
            orderId: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionResponseBody = ConsultCreateSubInstitutionResponseBody;
class ConsultCreateSubInstitutionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ConsultCreateSubInstitutionResponseBody,
        };
    }
}
exports.ConsultCreateSubInstitutionResponse = ConsultCreateSubInstitutionResponse;
class CreatWithholdingOrderAndPayHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreatWithholdingOrderAndPayHeaders = CreatWithholdingOrderAndPayHeaders;
class CreatWithholdingOrderAndPayRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            instId: 'instId',
            otherPayChannelDetailInfoList: 'otherPayChannelDetailInfoList',
            outTradeNo: 'outTradeNo',
            payChannel: 'payChannel',
            payerUserId: 'payerUserId',
            remark: 'remark',
            subInstId: 'subInstId',
            timeOutExpress: 'timeOutExpress',
            title: 'title',
        };
    }
    static types() {
        return {
            amount: 'string',
            instId: 'string',
            otherPayChannelDetailInfoList: { 'type': 'array', 'itemType': CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoList },
            outTradeNo: 'string',
            payChannel: 'string',
            payerUserId: 'string',
            remark: 'string',
            subInstId: 'string',
            timeOutExpress: 'string',
            title: 'string',
        };
    }
}
exports.CreatWithholdingOrderAndPayRequest = CreatWithholdingOrderAndPayRequest;
class CreatWithholdingOrderAndPayResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            gmtPay: 'gmtPay',
            instId: 'instId',
            orderNo: 'orderNo',
            outTradeNo: 'outTradeNo',
            payChannel: 'payChannel',
            payChannelAccountNo: 'payChannelAccountNo',
            payerStaffId: 'payerStaffId',
            remark: 'remark',
            status: 'status',
            subInstId: 'subInstId',
            title: 'title',
        };
    }
    static types() {
        return {
            amount: 'string',
            gmtPay: 'string',
            instId: 'string',
            orderNo: 'string',
            outTradeNo: 'string',
            payChannel: 'string',
            payChannelAccountNo: 'string',
            payerStaffId: 'string',
            remark: 'string',
            status: 'string',
            subInstId: 'string',
            title: 'string',
        };
    }
}
exports.CreatWithholdingOrderAndPayResponseBody = CreatWithholdingOrderAndPayResponseBody;
class CreatWithholdingOrderAndPayResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreatWithholdingOrderAndPayResponseBody,
        };
    }
}
exports.CreatWithholdingOrderAndPayResponse = CreatWithholdingOrderAndPayResponse;
class CreateAcquireRefundOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateAcquireRefundOrderHeaders = CreateAcquireRefundOrderHeaders;
class CreateAcquireRefundOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instId: 'instId',
            operatorUserId: 'operatorUserId',
            originOutTradeNo: 'originOutTradeNo',
            otherPayChannelDetailInfoList: 'otherPayChannelDetailInfoList',
            outRefundNo: 'outRefundNo',
            refundAmount: 'refundAmount',
            remark: 'remark',
            subInstId: 'subInstId',
            title: 'title',
        };
    }
    static types() {
        return {
            instId: 'string',
            operatorUserId: 'string',
            originOutTradeNo: 'string',
            otherPayChannelDetailInfoList: { 'type': 'array', 'itemType': CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoList },
            outRefundNo: 'string',
            refundAmount: 'string',
            remark: 'string',
            subInstId: 'string',
            title: 'string',
        };
    }
}
exports.CreateAcquireRefundOrderRequest = CreateAcquireRefundOrderRequest;
class CreateAcquireRefundOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outRefundNo: 'outRefundNo',
            refundOrderNo: 'refundOrderNo',
            status: 'status',
        };
    }
    static types() {
        return {
            outRefundNo: 'string',
            refundOrderNo: 'string',
            status: 'string',
        };
    }
}
exports.CreateAcquireRefundOrderResponseBody = CreateAcquireRefundOrderResponseBody;
class CreateAcquireRefundOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateAcquireRefundOrderResponseBody,
        };
    }
}
exports.CreateAcquireRefundOrderResponse = CreateAcquireRefundOrderResponse;
class CreateBatchTradeOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateBatchTradeOrderHeaders = CreateBatchTradeOrderHeaders;
class CreateBatchTradeOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountId: 'accountId',
            accountNo: 'accountNo',
            batchRemark: 'batchRemark',
            batchTradeDetails: 'batchTradeDetails',
            outBatchNo: 'outBatchNo',
            staffId: 'staffId',
            totalAmount: 'totalAmount',
            totalCount: 'totalCount',
            tradeTitle: 'tradeTitle',
        };
    }
    static types() {
        return {
            accountId: 'string',
            accountNo: 'string',
            batchRemark: 'string',
            batchTradeDetails: { 'type': 'array', 'itemType': CreateBatchTradeOrderRequestBatchTradeDetails },
            outBatchNo: 'string',
            staffId: 'string',
            totalAmount: 'string',
            totalCount: 'number',
            tradeTitle: 'string',
        };
    }
}
exports.CreateBatchTradeOrderRequest = CreateBatchTradeOrderRequest;
class CreateBatchTradeOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderNo: 'orderNo',
            orderStatus: 'orderStatus',
            outBatchNo: 'outBatchNo',
        };
    }
    static types() {
        return {
            orderNo: 'string',
            orderStatus: 'string',
            outBatchNo: 'string',
        };
    }
}
exports.CreateBatchTradeOrderResponseBody = CreateBatchTradeOrderResponseBody;
class CreateBatchTradeOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateBatchTradeOrderResponseBody,
        };
    }
}
exports.CreateBatchTradeOrderResponse = CreateBatchTradeOrderResponse;
class CreateSubInstitutionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSubInstitutionHeaders = CreateSubInstitutionHeaders;
class CreateSubInstitutionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bindingAlipayLogonId: 'bindingAlipayLogonId',
            contactInfo: 'contactInfo',
            instId: 'instId',
            legalPersonCertInfo: 'legalPersonCertInfo',
            outTradeNo: 'outTradeNo',
            payChannel: 'payChannel',
            qualificationInfos: 'qualificationInfos',
            services: 'services',
            settleInfo: 'settleInfo',
            solution: 'solution',
            subInstAddressInfo: 'subInstAddressInfo',
            subInstAuthInfo: 'subInstAuthInfo',
            subInstBasicInfo: 'subInstBasicInfo',
            subInstCertifyInfo: 'subInstCertifyInfo',
            subInstId: 'subInstId',
            subInstInvoiceInfo: 'subInstInvoiceInfo',
            subInstShopInfo: 'subInstShopInfo',
        };
    }
    static types() {
        return {
            bindingAlipayLogonId: 'string',
            contactInfo: CreateSubInstitutionRequestContactInfo,
            instId: 'string',
            legalPersonCertInfo: CreateSubInstitutionRequestLegalPersonCertInfo,
            outTradeNo: 'string',
            payChannel: 'string',
            qualificationInfos: { 'type': 'array', 'itemType': CreateSubInstitutionRequestQualificationInfos },
            services: { 'type': 'array', 'itemType': 'string' },
            settleInfo: CreateSubInstitutionRequestSettleInfo,
            solution: 'string',
            subInstAddressInfo: CreateSubInstitutionRequestSubInstAddressInfo,
            subInstAuthInfo: CreateSubInstitutionRequestSubInstAuthInfo,
            subInstBasicInfo: CreateSubInstitutionRequestSubInstBasicInfo,
            subInstCertifyInfo: CreateSubInstitutionRequestSubInstCertifyInfo,
            subInstId: 'string',
            subInstInvoiceInfo: CreateSubInstitutionRequestSubInstInvoiceInfo,
            subInstShopInfo: CreateSubInstitutionRequestSubInstShopInfo,
        };
    }
}
exports.CreateSubInstitutionRequest = CreateSubInstitutionRequest;
class CreateSubInstitutionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderId: 'orderId',
        };
    }
    static types() {
        return {
            orderId: 'string',
        };
    }
}
exports.CreateSubInstitutionResponseBody = CreateSubInstitutionResponseBody;
class CreateSubInstitutionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSubInstitutionResponseBody,
        };
    }
}
exports.CreateSubInstitutionResponse = CreateSubInstitutionResponse;
class CreateUserCodeInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateUserCodeInstanceHeaders = CreateUserCodeInstanceHeaders;
class CreateUserCodeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            availableTimes: 'availableTimes',
            codeIdentity: 'codeIdentity',
            codeValue: 'codeValue',
            codeValueType: 'codeValueType',
            corpId: 'corpId',
            extInfo: 'extInfo',
            gmtExpired: 'gmtExpired',
            requestId: 'requestId',
            status: 'status',
            userCorpRelationType: 'userCorpRelationType',
            userIdentity: 'userIdentity',
        };
    }
    static types() {
        return {
            availableTimes: { 'type': 'array', 'itemType': CreateUserCodeInstanceRequestAvailableTimes },
            codeIdentity: 'string',
            codeValue: 'string',
            codeValueType: 'string',
            corpId: 'string',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            gmtExpired: 'string',
            requestId: 'string',
            status: 'string',
            userCorpRelationType: 'string',
            userIdentity: 'string',
        };
    }
}
exports.CreateUserCodeInstanceRequest = CreateUserCodeInstanceRequest;
class CreateUserCodeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            codeDetailUrl: 'codeDetailUrl',
            codeId: 'codeId',
        };
    }
    static types() {
        return {
            codeDetailUrl: 'string',
            codeId: 'string',
        };
    }
}
exports.CreateUserCodeInstanceResponseBody = CreateUserCodeInstanceResponseBody;
class CreateUserCodeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateUserCodeInstanceResponseBody,
        };
    }
}
exports.CreateUserCodeInstanceResponse = CreateUserCodeInstanceResponse;
class DecodePayCodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DecodePayCodeHeaders = DecodePayCodeHeaders;
class DecodePayCodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            payCode: 'payCode',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            payCode: 'string',
            requestId: 'string',
        };
    }
}
exports.DecodePayCodeRequest = DecodePayCodeRequest;
class DecodePayCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alipayCode: 'alipayCode',
            codeId: 'codeId',
            codeIdentity: 'codeIdentity',
            codeType: 'codeType',
            corpId: 'corpId',
            extInfo: 'extInfo',
            outBizId: 'outBizId',
            userCorpRelationType: 'userCorpRelationType',
            userId: 'userId',
            userInCorp: 'userInCorp',
        };
    }
    static types() {
        return {
            alipayCode: 'string',
            codeId: 'string',
            codeIdentity: 'string',
            codeType: 'string',
            corpId: 'string',
            extInfo: 'string',
            outBizId: 'string',
            userCorpRelationType: 'string',
            userId: 'string',
            userInCorp: 'boolean',
        };
    }
}
exports.DecodePayCodeResponseBody = DecodePayCodeResponseBody;
class DecodePayCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DecodePayCodeResponseBody,
        };
    }
}
exports.DecodePayCodeResponse = DecodePayCodeResponse;
class ModifySubInstitutionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ModifySubInstitutionHeaders = ModifySubInstitutionHeaders;
class ModifySubInstitutionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bindingAlipayLogonId: 'bindingAlipayLogonId',
            contactInfo: 'contactInfo',
            instId: 'instId',
            legalPersonCertInfo: 'legalPersonCertInfo',
            outTradeNo: 'outTradeNo',
            payChannel: 'payChannel',
            qualificationInfos: 'qualificationInfos',
            services: 'services',
            settleInfo: 'settleInfo',
            subInstAddressInfo: 'subInstAddressInfo',
            subInstAuthInfo: 'subInstAuthInfo',
            subInstBasicInfo: 'subInstBasicInfo',
            subInstCertifyInfo: 'subInstCertifyInfo',
            subInstId: 'subInstId',
            subInstInvoiceInfo: 'subInstInvoiceInfo',
            subInstShopInfo: 'subInstShopInfo',
        };
    }
    static types() {
        return {
            bindingAlipayLogonId: 'string',
            contactInfo: ModifySubInstitutionRequestContactInfo,
            instId: 'string',
            legalPersonCertInfo: ModifySubInstitutionRequestLegalPersonCertInfo,
            outTradeNo: 'string',
            payChannel: 'string',
            qualificationInfos: { 'type': 'array', 'itemType': ModifySubInstitutionRequestQualificationInfos },
            services: { 'type': 'array', 'itemType': 'string' },
            settleInfo: ModifySubInstitutionRequestSettleInfo,
            subInstAddressInfo: ModifySubInstitutionRequestSubInstAddressInfo,
            subInstAuthInfo: ModifySubInstitutionRequestSubInstAuthInfo,
            subInstBasicInfo: ModifySubInstitutionRequestSubInstBasicInfo,
            subInstCertifyInfo: ModifySubInstitutionRequestSubInstCertifyInfo,
            subInstId: 'string',
            subInstInvoiceInfo: ModifySubInstitutionRequestSubInstInvoiceInfo,
            subInstShopInfo: ModifySubInstitutionRequestSubInstShopInfo,
        };
    }
}
exports.ModifySubInstitutionRequest = ModifySubInstitutionRequest;
class ModifySubInstitutionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderId: 'orderId',
        };
    }
    static types() {
        return {
            orderId: 'string',
        };
    }
}
exports.ModifySubInstitutionResponseBody = ModifySubInstitutionResponseBody;
class ModifySubInstitutionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ModifySubInstitutionResponseBody,
        };
    }
}
exports.ModifySubInstitutionResponse = ModifySubInstitutionResponse;
class NotifyPayCodePayResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.NotifyPayCodePayResultHeaders = NotifyPayCodePayResultHeaders;
class NotifyPayCodePayResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            chargeAmount: 'chargeAmount',
            corpId: 'corpId',
            extInfo: 'extInfo',
            gmtTradeCreate: 'gmtTradeCreate',
            gmtTradeFinish: 'gmtTradeFinish',
            merchantName: 'merchantName',
            payChannelDetailList: 'payChannelDetailList',
            payCode: 'payCode',
            promotionAmount: 'promotionAmount',
            remark: 'remark',
            title: 'title',
            tradeErrorCode: 'tradeErrorCode',
            tradeErrorMsg: 'tradeErrorMsg',
            tradeNo: 'tradeNo',
            tradeStatus: 'tradeStatus',
            userId: 'userId',
        };
    }
    static types() {
        return {
            amount: 'string',
            chargeAmount: 'string',
            corpId: 'string',
            extInfo: 'string',
            gmtTradeCreate: 'string',
            gmtTradeFinish: 'string',
            merchantName: 'string',
            payChannelDetailList: { 'type': 'array', 'itemType': NotifyPayCodePayResultRequestPayChannelDetailList },
            payCode: 'string',
            promotionAmount: 'string',
            remark: 'string',
            title: 'string',
            tradeErrorCode: 'string',
            tradeErrorMsg: 'string',
            tradeNo: 'string',
            tradeStatus: 'string',
            userId: 'string',
        };
    }
}
exports.NotifyPayCodePayResultRequest = NotifyPayCodePayResultRequest;
class NotifyPayCodePayResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.NotifyPayCodePayResultResponseBody = NotifyPayCodePayResultResponseBody;
class NotifyPayCodePayResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: NotifyPayCodePayResultResponseBody,
        };
    }
}
exports.NotifyPayCodePayResultResponse = NotifyPayCodePayResultResponse;
class NotifyPayCodeRefundResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.NotifyPayCodeRefundResultHeaders = NotifyPayCodeRefundResultHeaders;
class NotifyPayCodeRefundResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            gmtRefund: 'gmtRefund',
            payChannelDetailList: 'payChannelDetailList',
            payCode: 'payCode',
            refundAmount: 'refundAmount',
            refundOrderNo: 'refundOrderNo',
            refundPromotionAmount: 'refundPromotionAmount',
            remark: 'remark',
            tradeNo: 'tradeNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            gmtRefund: 'string',
            payChannelDetailList: { 'type': 'array', 'itemType': NotifyPayCodeRefundResultRequestPayChannelDetailList },
            payCode: 'string',
            refundAmount: 'string',
            refundOrderNo: 'string',
            refundPromotionAmount: 'string',
            remark: 'string',
            tradeNo: 'string',
            userId: 'string',
        };
    }
}
exports.NotifyPayCodeRefundResultRequest = NotifyPayCodeRefundResultRequest;
class NotifyPayCodeRefundResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.NotifyPayCodeRefundResultResponseBody = NotifyPayCodeRefundResultResponseBody;
class NotifyPayCodeRefundResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: NotifyPayCodeRefundResultResponseBody,
        };
    }
}
exports.NotifyPayCodeRefundResultResponse = NotifyPayCodeRefundResultResponse;
class NotifyVerifyResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.NotifyVerifyResultHeaders = NotifyVerifyResultHeaders;
class NotifyVerifyResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            payCode: 'payCode',
            remark: 'remark',
            userCorpRelationType: 'userCorpRelationType',
            userIdentity: 'userIdentity',
            verifyEvent: 'verifyEvent',
            verifyLocation: 'verifyLocation',
            verifyNo: 'verifyNo',
            verifyResult: 'verifyResult',
            verifyTime: 'verifyTime',
        };
    }
    static types() {
        return {
            corpId: 'string',
            payCode: 'string',
            remark: 'string',
            userCorpRelationType: 'string',
            userIdentity: 'string',
            verifyEvent: 'string',
            verifyLocation: 'string',
            verifyNo: 'string',
            verifyResult: 'boolean',
            verifyTime: 'string',
        };
    }
}
exports.NotifyVerifyResultRequest = NotifyVerifyResultRequest;
class NotifyVerifyResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.NotifyVerifyResultResponseBody = NotifyVerifyResultResponseBody;
class NotifyVerifyResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: NotifyVerifyResultResponseBody,
        };
    }
}
exports.NotifyVerifyResultResponse = NotifyVerifyResultResponse;
class QueryAcquireRefundOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAcquireRefundOrderHeaders = QueryAcquireRefundOrderHeaders;
class QueryAcquireRefundOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outRefundNo: 'outRefundNo',
        };
    }
    static types() {
        return {
            outRefundNo: 'string',
        };
    }
}
exports.QueryAcquireRefundOrderRequest = QueryAcquireRefundOrderRequest;
class QueryAcquireRefundOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            gmtCreate: 'gmtCreate',
            gmtRefund: 'gmtRefund',
            instId: 'instId',
            orderNo: 'orderNo',
            originOutTradeNo: 'originOutTradeNo',
            outRefundNo: 'outRefundNo',
            payChannel: 'payChannel',
            payChannelAccountNo: 'payChannelAccountNo',
            payerUserId: 'payerUserId',
            remark: 'remark',
            status: 'status',
            subInstId: 'subInstId',
            title: 'title',
        };
    }
    static types() {
        return {
            amount: 'string',
            gmtCreate: 'string',
            gmtRefund: 'string',
            instId: 'string',
            orderNo: 'string',
            originOutTradeNo: 'string',
            outRefundNo: 'string',
            payChannel: 'string',
            payChannelAccountNo: 'string',
            payerUserId: 'string',
            remark: 'string',
            status: 'string',
            subInstId: 'string',
            title: 'string',
        };
    }
}
exports.QueryAcquireRefundOrderResponseBody = QueryAcquireRefundOrderResponseBody;
class QueryAcquireRefundOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAcquireRefundOrderResponseBody,
        };
    }
}
exports.QueryAcquireRefundOrderResponse = QueryAcquireRefundOrderResponse;
class QueryBatchTradeDetailListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryBatchTradeDetailListHeaders = QueryBatchTradeDetailListHeaders;
class QueryBatchTradeDetailListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outBatchNo: 'outBatchNo',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            outBatchNo: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryBatchTradeDetailListRequest = QueryBatchTradeDetailListRequest;
class QueryBatchTradeDetailListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            batchTradeDetailList: 'batchTradeDetailList',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            total: 'total',
            totalPageNumber: 'totalPageNumber',
        };
    }
    static types() {
        return {
            batchTradeDetailList: { 'type': 'array', 'itemType': QueryBatchTradeDetailListResponseBodyBatchTradeDetailList },
            pageNumber: 'number',
            pageSize: 'number',
            total: 'number',
            totalPageNumber: 'number',
        };
    }
}
exports.QueryBatchTradeDetailListResponseBody = QueryBatchTradeDetailListResponseBody;
class QueryBatchTradeDetailListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryBatchTradeDetailListResponseBody,
        };
    }
}
exports.QueryBatchTradeDetailListResponse = QueryBatchTradeDetailListResponse;
class QueryBatchTradeOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryBatchTradeOrderHeaders = QueryBatchTradeOrderHeaders;
class QueryBatchTradeOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outBatchNos: 'outBatchNos',
        };
    }
    static types() {
        return {
            outBatchNos: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryBatchTradeOrderRequest = QueryBatchTradeOrderRequest;
class QueryBatchTradeOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            batchTradeOrderVOs: 'batchTradeOrderVOs',
        };
    }
    static types() {
        return {
            batchTradeOrderVOs: { 'type': 'array', 'itemType': QueryBatchTradeOrderResponseBodyBatchTradeOrderVOs },
        };
    }
}
exports.QueryBatchTradeOrderResponseBody = QueryBatchTradeOrderResponseBody;
class QueryBatchTradeOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryBatchTradeOrderResponseBody,
        };
    }
}
exports.QueryBatchTradeOrderResponse = QueryBatchTradeOrderResponse;
class QueryPayAccountListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPayAccountListHeaders = QueryPayAccountListHeaders;
class QueryPayAccountListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            payAccountVOList: 'payAccountVOList',
        };
    }
    static types() {
        return {
            payAccountVOList: { 'type': 'array', 'itemType': QueryPayAccountListResponseBodyPayAccountVOList },
        };
    }
}
exports.QueryPayAccountListResponseBody = QueryPayAccountListResponseBody;
class QueryPayAccountListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryPayAccountListResponseBody,
        };
    }
}
exports.QueryPayAccountListResponse = QueryPayAccountListResponse;
class QueryRegisterOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryRegisterOrderHeaders = QueryRegisterOrderHeaders;
class QueryRegisterOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instId: 'instId',
            orderId: 'orderId',
            outTradeNo: 'outTradeNo',
            subInstId: 'subInstId',
        };
    }
    static types() {
        return {
            instId: 'string',
            orderId: 'string',
            outTradeNo: 'string',
            subInstId: 'string',
        };
    }
}
exports.QueryRegisterOrderRequest = QueryRegisterOrderRequest;
class QueryRegisterOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failReason: 'failReason',
            gmtAudit: 'gmtAudit',
            instId: 'instId',
            orderId: 'orderId',
            outTradeNo: 'outTradeNo',
            status: 'status',
            subInstId: 'subInstId',
            subInstName: 'subInstName',
        };
    }
    static types() {
        return {
            failReason: 'string',
            gmtAudit: 'string',
            instId: 'string',
            orderId: 'string',
            outTradeNo: 'string',
            status: 'string',
            subInstId: 'string',
            subInstName: 'string',
        };
    }
}
exports.QueryRegisterOrderResponseBody = QueryRegisterOrderResponseBody;
class QueryRegisterOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryRegisterOrderResponseBody,
        };
    }
}
exports.QueryRegisterOrderResponse = QueryRegisterOrderResponse;
class QueryUserAgreementHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserAgreementHeaders = QueryUserAgreementHeaders;
class QueryUserAgreementRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'bizCode',
            bizScene: 'bizScene',
            instId: 'instId',
            subInstId: 'subInstId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            bizScene: 'string',
            instId: 'string',
            subInstId: 'string',
            userId: 'string',
        };
    }
}
exports.QueryUserAgreementRequest = QueryUserAgreementRequest;
class QueryUserAgreementResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agreementNo: 'agreementNo',
            corpId: 'corpId',
            gmtExpire: 'gmtExpire',
            gmtSign: 'gmtSign',
            gmtValid: 'gmtValid',
            instId: 'instId',
            payChannel: 'payChannel',
            payChannelAccountName: 'payChannelAccountName',
            payChannelAccountNo: 'payChannelAccountNo',
            status: 'status',
            subInstId: 'subInstId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agreementNo: 'string',
            corpId: 'string',
            gmtExpire: 'string',
            gmtSign: 'string',
            gmtValid: 'string',
            instId: 'string',
            payChannel: 'string',
            payChannelAccountName: 'string',
            payChannelAccountNo: 'string',
            status: 'string',
            subInstId: 'string',
            userId: 'string',
        };
    }
}
exports.QueryUserAgreementResponseBody = QueryUserAgreementResponseBody;
class QueryUserAgreementResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserAgreementResponseBody,
        };
    }
}
exports.QueryUserAgreementResponse = QueryUserAgreementResponse;
class QueryUserAlipayAccountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserAlipayAccountHeaders = QueryUserAlipayAccountHeaders;
class QueryUserAlipayAccountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alipayUid: 'alipayUid',
        };
    }
    static types() {
        return {
            alipayUid: 'string',
        };
    }
}
exports.QueryUserAlipayAccountResponseBody = QueryUserAlipayAccountResponseBody;
class QueryUserAlipayAccountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryUserAlipayAccountResponseBody,
        };
    }
}
exports.QueryUserAlipayAccountResponse = QueryUserAlipayAccountResponse;
class QueryWithholdingOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryWithholdingOrderHeaders = QueryWithholdingOrderHeaders;
class QueryWithholdingOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outTradeNo: 'outTradeNo',
        };
    }
    static types() {
        return {
            outTradeNo: 'string',
        };
    }
}
exports.QueryWithholdingOrderRequest = QueryWithholdingOrderRequest;
class QueryWithholdingOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            gmtCreate: 'gmtCreate',
            gmtPay: 'gmtPay',
            instId: 'instId',
            orderNo: 'orderNo',
            outTradeNo: 'outTradeNo',
            payChannel: 'payChannel',
            payChannelAccountNo: 'payChannelAccountNo',
            payerUserId: 'payerUserId',
            remark: 'remark',
            status: 'status',
            subInstId: 'subInstId',
            title: 'title',
        };
    }
    static types() {
        return {
            amount: 'string',
            gmtCreate: 'string',
            gmtPay: 'string',
            instId: 'string',
            orderNo: 'string',
            outTradeNo: 'string',
            payChannel: 'string',
            payChannelAccountNo: 'string',
            payerUserId: 'string',
            remark: 'string',
            status: 'string',
            subInstId: 'string',
            title: 'string',
        };
    }
}
exports.QueryWithholdingOrderResponseBody = QueryWithholdingOrderResponseBody;
class QueryWithholdingOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryWithholdingOrderResponseBody,
        };
    }
}
exports.QueryWithholdingOrderResponse = QueryWithholdingOrderResponse;
class SaveCorpPayCodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveCorpPayCodeHeaders = SaveCorpPayCodeHeaders;
class SaveCorpPayCodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            codeIdentity: 'codeIdentity',
            corpId: 'corpId',
            extInfo: 'extInfo',
            status: 'status',
        };
    }
    static types() {
        return {
            codeIdentity: 'string',
            corpId: 'string',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            status: 'string',
        };
    }
}
exports.SaveCorpPayCodeRequest = SaveCorpPayCodeRequest;
class SaveCorpPayCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            codeIdentity: 'codeIdentity',
            corpId: 'corpId',
            extInfo: 'extInfo',
            status: 'status',
        };
    }
    static types() {
        return {
            codeIdentity: 'string',
            corpId: 'string',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            status: 'string',
        };
    }
}
exports.SaveCorpPayCodeResponseBody = SaveCorpPayCodeResponseBody;
class SaveCorpPayCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SaveCorpPayCodeResponseBody,
        };
    }
}
exports.SaveCorpPayCodeResponse = SaveCorpPayCodeResponse;
class UnsignUserAgreementHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UnsignUserAgreementHeaders = UnsignUserAgreementHeaders;
class UnsignUserAgreementRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agreementNo: 'agreementNo',
            bizCode: 'bizCode',
            bizScene: 'bizScene',
            instId: 'instId',
            subInstId: 'subInstId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agreementNo: 'string',
            bizCode: 'string',
            bizScene: 'string',
            instId: 'string',
            subInstId: 'string',
            userId: 'string',
        };
    }
}
exports.UnsignUserAgreementRequest = UnsignUserAgreementRequest;
class UnsignUserAgreementResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UnsignUserAgreementResponse = UnsignUserAgreementResponse;
class UpateUserCodeInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpateUserCodeInstanceHeaders = UpateUserCodeInstanceHeaders;
class UpateUserCodeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            availableTimes: 'availableTimes',
            codeId: 'codeId',
            codeIdentity: 'codeIdentity',
            codeValue: 'codeValue',
            corpId: 'corpId',
            extInfo: 'extInfo',
            gmtExpired: 'gmtExpired',
            status: 'status',
            userCorpRelationType: 'userCorpRelationType',
            userIdentity: 'userIdentity',
        };
    }
    static types() {
        return {
            availableTimes: { 'type': 'array', 'itemType': UpateUserCodeInstanceRequestAvailableTimes },
            codeId: 'string',
            codeIdentity: 'string',
            codeValue: 'string',
            corpId: 'string',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            gmtExpired: 'string',
            status: 'string',
            userCorpRelationType: 'string',
            userIdentity: 'string',
        };
    }
}
exports.UpateUserCodeInstanceRequest = UpateUserCodeInstanceRequest;
class UpateUserCodeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            codeId: 'codeId',
        };
    }
    static types() {
        return {
            codeId: 'string',
        };
    }
}
exports.UpateUserCodeInstanceResponseBody = UpateUserCodeInstanceResponseBody;
class UpateUserCodeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpateUserCodeInstanceResponseBody,
        };
    }
}
exports.UpateUserCodeInstanceResponse = UpateUserCodeInstanceResponse;
class UpdateInvoiceVerifyStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusHeaders = UpdateInvoiceVerifyStatusHeaders;
class UpdateInvoiceVerifyStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'bizId',
            checkingResult: 'checkingResult',
            checkingStatus: 'checkingStatus',
            code: 'code',
            corpId: 'corpId',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceVerifyId: 'invoiceVerifyId',
            msg: 'msg',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            checkingResult: 'number',
            checkingStatus: 'number',
            code: 'string',
            corpId: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'number',
            invoiceVerifyId: 'string',
            msg: 'string',
            unionId: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequest = UpdateInvoiceVerifyStatusRequest;
class UpdateInvoiceVerifyStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateInvoiceVerifyStatusResponseBody = UpdateInvoiceVerifyStatusResponseBody;
class UpdateInvoiceVerifyStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateInvoiceVerifyStatusResponseBody,
        };
    }
}
exports.UpdateInvoiceVerifyStatusResponse = UpdateInvoiceVerifyStatusResponse;
class UploadInvoiceByAuthHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UploadInvoiceByAuthHeaders = UploadInvoiceByAuthHeaders;
class UploadInvoiceByAuthRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoices: 'invoices',
        };
    }
    static types() {
        return {
            invoices: { 'type': 'array', 'itemType': UploadInvoiceByAuthRequestInvoices },
        };
    }
}
exports.UploadInvoiceByAuthRequest = UploadInvoiceByAuthRequest;
class UploadInvoiceByAuthResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UploadInvoiceByAuthResponseBodyResult,
        };
    }
}
exports.UploadInvoiceByAuthResponseBody = UploadInvoiceByAuthResponseBody;
class UploadInvoiceByAuthResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UploadInvoiceByAuthResponseBody,
        };
    }
}
exports.UploadInvoiceByAuthResponse = UploadInvoiceByAuthResponse;
class UploadInvoiceByMobileHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UploadInvoiceByMobileHeaders = UploadInvoiceByMobileHeaders;
class UploadInvoiceByMobileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoices: 'invoices',
            mobile: 'mobile',
            mobileStateCode: 'mobileStateCode',
        };
    }
    static types() {
        return {
            invoices: { 'type': 'array', 'itemType': UploadInvoiceByMobileRequestInvoices },
            mobile: 'string',
            mobileStateCode: 'string',
        };
    }
}
exports.UploadInvoiceByMobileRequest = UploadInvoiceByMobileRequest;
class UploadInvoiceByMobileResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UploadInvoiceByMobileResponseBodyResult,
        };
    }
}
exports.UploadInvoiceByMobileResponseBody = UploadInvoiceByMobileResponseBody;
class UploadInvoiceByMobileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UploadInvoiceByMobileResponseBody,
        };
    }
}
exports.UploadInvoiceByMobileResponse = UploadInvoiceByMobileResponse;
class UploadRegisterImageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UploadRegisterImageHeaders = UploadRegisterImageHeaders;
class UploadRegisterImageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            imageContent: 'imageContent',
            imageName: 'imageName',
            imageType: 'imageType',
            instId: 'instId',
            payChannel: 'payChannel',
        };
    }
    static types() {
        return {
            imageContent: 'string',
            imageName: 'string',
            imageType: 'string',
            instId: 'string',
            payChannel: 'string',
        };
    }
}
exports.UploadRegisterImageRequest = UploadRegisterImageRequest;
class UploadRegisterImageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ossUrl: 'ossUrl',
        };
    }
    static types() {
        return {
            ossUrl: 'string',
        };
    }
}
exports.UploadRegisterImageResponseBody = UploadRegisterImageResponseBody;
class UploadRegisterImageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UploadRegisterImageResponseBody,
        };
    }
}
exports.UploadRegisterImageResponse = UploadRegisterImageResponse;
class UserAgreementPageSignHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UserAgreementPageSignHeaders = UserAgreementPageSignHeaders;
class UserAgreementPageSignRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'bizCode',
            bizScene: 'bizScene',
            instId: 'instId',
            payChannel: 'payChannel',
            remark: 'remark',
            returnUrl: 'returnUrl',
            signScene: 'signScene',
            subInstId: 'subInstId',
            subMerchantName: 'subMerchantName',
            subMerchantServiceDesc: 'subMerchantServiceDesc',
            subMerchantServiceName: 'subMerchantServiceName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            bizScene: 'string',
            instId: 'string',
            payChannel: 'string',
            remark: 'string',
            returnUrl: 'string',
            signScene: 'string',
            subInstId: 'string',
            subMerchantName: 'string',
            subMerchantServiceDesc: 'string',
            subMerchantServiceName: 'string',
            userId: 'string',
        };
    }
}
exports.UserAgreementPageSignRequest = UserAgreementPageSignRequest;
class UserAgreementPageSignResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageData: 'pageData',
        };
    }
    static types() {
        return {
            pageData: 'string',
        };
    }
}
exports.UserAgreementPageSignResponseBody = UserAgreementPageSignResponseBody;
class UserAgreementPageSignResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UserAgreementPageSignResponseBody,
        };
    }
}
exports.UserAgreementPageSignResponse = UserAgreementPageSignResponse;
class ConsultCreateSubInstitutionRequestContactInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactName: 'contactName',
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            contactName: 'string',
            mobile: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestContactInfo = ConsultCreateSubInstitutionRequestContactInfo;
class ConsultCreateSubInstitutionRequestLegalPersonCertInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certBackImage: 'certBackImage',
            certFrontImage: 'certFrontImage',
            certName: 'certName',
            certType: 'certType',
            idCardNo: 'idCardNo',
        };
    }
    static types() {
        return {
            certBackImage: 'string',
            certFrontImage: 'string',
            certName: 'string',
            certType: 'string',
            idCardNo: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestLegalPersonCertInfo = ConsultCreateSubInstitutionRequestLegalPersonCertInfo;
class ConsultCreateSubInstitutionRequestQualificationInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            qualificationImage: 'qualificationImage',
            qualificationType: 'qualificationType',
        };
    }
    static types() {
        return {
            qualificationImage: 'string',
            qualificationType: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestQualificationInfos = ConsultCreateSubInstitutionRequestQualificationInfos;
class ConsultCreateSubInstitutionRequestSettleInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountId: 'accountId',
            accountName: 'accountName',
            accountType: 'accountType',
            bankBranchName: 'bankBranchName',
            bankCity: 'bankCity',
            bankCode: 'bankCode',
            bankName: 'bankName',
            bankProvince: 'bankProvince',
            bankShortNameCode: 'bankShortNameCode',
            type: 'type',
            usageType: 'usageType',
        };
    }
    static types() {
        return {
            accountId: 'string',
            accountName: 'string',
            accountType: 'string',
            bankBranchName: 'string',
            bankCity: 'string',
            bankCode: 'string',
            bankName: 'string',
            bankProvince: 'string',
            bankShortNameCode: 'string',
            type: 'string',
            usageType: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSettleInfo = ConsultCreateSubInstitutionRequestSettleInfo;
class ConsultCreateSubInstitutionRequestSubInstAddressInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            cityCode: 'cityCode',
            districtCode: 'districtCode',
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            address: 'string',
            cityCode: 'string',
            districtCode: 'string',
            provinceCode: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSubInstAddressInfo = ConsultCreateSubInstitutionRequestSubInstAddressInfo;
class ConsultCreateSubInstitutionRequestSubInstAuthInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authorizationLetterUrl: 'authorizationLetterUrl',
        };
    }
    static types() {
        return {
            authorizationLetterUrl: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSubInstAuthInfo = ConsultCreateSubInstitutionRequestSubInstAuthInfo;
class ConsultCreateSubInstitutionRequestSubInstBasicInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliasName: 'aliasName',
            mcc: 'mcc',
            subInstName: 'subInstName',
            type: 'type',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            mcc: 'string',
            subInstName: 'string',
            type: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSubInstBasicInfo = ConsultCreateSubInstitutionRequestSubInstBasicInfo;
class ConsultCreateSubInstitutionRequestSubInstCertifyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certImage: 'certImage',
            certNo: 'certNo',
            certType: 'certType',
        };
    }
    static types() {
        return {
            certImage: 'string',
            certNo: 'string',
            certType: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSubInstCertifyInfo = ConsultCreateSubInstitutionRequestSubInstCertifyInfo;
class ConsultCreateSubInstitutionRequestSubInstInvoiceInfoMailAddress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            cityCode: 'cityCode',
            districtCode: 'districtCode',
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            address: 'string',
            cityCode: 'string',
            districtCode: 'string',
            provinceCode: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSubInstInvoiceInfoMailAddress = ConsultCreateSubInstitutionRequestSubInstInvoiceInfoMailAddress;
class ConsultCreateSubInstitutionRequestSubInstInvoiceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            acceptElectronic: 'acceptElectronic',
            address: 'address',
            autoInvoice: 'autoInvoice',
            bankAccount: 'bankAccount',
            bankName: 'bankName',
            mailAddress: 'mailAddress',
            mailName: 'mailName',
            mailPhone: 'mailPhone',
            taxNo: 'taxNo',
            taxPayerQualification: 'taxPayerQualification',
            taxPayerValidDate: 'taxPayerValidDate',
            telephone: 'telephone',
            title: 'title',
        };
    }
    static types() {
        return {
            acceptElectronic: 'boolean',
            address: 'string',
            autoInvoice: 'boolean',
            bankAccount: 'string',
            bankName: 'string',
            mailAddress: ConsultCreateSubInstitutionRequestSubInstInvoiceInfoMailAddress,
            mailName: 'string',
            mailPhone: 'string',
            taxNo: 'string',
            taxPayerQualification: 'string',
            taxPayerValidDate: 'string',
            telephone: 'string',
            title: 'string',
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSubInstInvoiceInfo = ConsultCreateSubInstitutionRequestSubInstInvoiceInfo;
class ConsultCreateSubInstitutionRequestSubInstShopInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inDoorImages: 'inDoorImages',
            outDoorImages: 'outDoorImages',
        };
    }
    static types() {
        return {
            inDoorImages: { 'type': 'array', 'itemType': 'string' },
            outDoorImages: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ConsultCreateSubInstitutionRequestSubInstShopInfo = ConsultCreateSubInstitutionRequestSubInstShopInfo;
class CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoListFundToolDetailInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            extInfo: 'extInfo',
            fundToolName: 'fundToolName',
            gmtCreate: 'gmtCreate',
            gmtFinish: 'gmtFinish',
            promotionFundTool: 'promotionFundTool',
        };
    }
    static types() {
        return {
            amount: 'string',
            extInfo: 'string',
            fundToolName: 'string',
            gmtCreate: 'string',
            gmtFinish: 'string',
            promotionFundTool: 'boolean',
        };
    }
}
exports.CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoListFundToolDetailInfoList = CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoListFundToolDetailInfoList;
class CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            fundToolDetailInfoList: 'fundToolDetailInfoList',
            payChannelName: 'payChannelName',
            payChannelOrderNo: 'payChannelOrderNo',
            payChannelType: 'payChannelType',
            promotionAmount: 'promotionAmount',
        };
    }
    static types() {
        return {
            amount: 'string',
            fundToolDetailInfoList: { 'type': 'array', 'itemType': CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoListFundToolDetailInfoList },
            payChannelName: 'string',
            payChannelOrderNo: 'string',
            payChannelType: 'string',
            promotionAmount: 'string',
        };
    }
}
exports.CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoList = CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoList;
class CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoListFundToolDetailInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            extInfo: 'extInfo',
            fundToolName: 'fundToolName',
            gmtCreate: 'gmtCreate',
            gmtFinish: 'gmtFinish',
            promotionFundTool: 'promotionFundTool',
        };
    }
    static types() {
        return {
            amount: 'string',
            extInfo: 'string',
            fundToolName: 'string',
            gmtCreate: 'string',
            gmtFinish: 'string',
            promotionFundTool: 'boolean',
        };
    }
}
exports.CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoListFundToolDetailInfoList = CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoListFundToolDetailInfoList;
class CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            fundToolDetailInfoList: 'fundToolDetailInfoList',
            payChannelName: 'payChannelName',
            payChannelOrderNo: 'payChannelOrderNo',
            payChannelType: 'payChannelType',
            promotionAmount: 'promotionAmount',
        };
    }
    static types() {
        return {
            amount: 'string',
            fundToolDetailInfoList: { 'type': 'array', 'itemType': CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoListFundToolDetailInfoList },
            payChannelName: 'string',
            payChannelOrderNo: 'string',
            payChannelType: 'string',
            promotionAmount: 'string',
        };
    }
}
exports.CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoList = CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoList;
class CreateBatchTradeOrderRequestBatchTradeDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            memo: 'memo',
            payeeAccountName: 'payeeAccountName',
            payeeAccountNo: 'payeeAccountNo',
            payeeAccountType: 'payeeAccountType',
            serialNo: 'serialNo',
        };
    }
    static types() {
        return {
            amount: 'string',
            memo: 'string',
            payeeAccountName: 'string',
            payeeAccountNo: 'string',
            payeeAccountType: 'string',
            serialNo: 'number',
        };
    }
}
exports.CreateBatchTradeOrderRequestBatchTradeDetails = CreateBatchTradeOrderRequestBatchTradeDetails;
class CreateSubInstitutionRequestContactInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactName: 'contactName',
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            contactName: 'string',
            mobile: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestContactInfo = CreateSubInstitutionRequestContactInfo;
class CreateSubInstitutionRequestLegalPersonCertInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certBackImage: 'certBackImage',
            certFrontImage: 'certFrontImage',
            certName: 'certName',
            certType: 'certType',
            idCardNo: 'idCardNo',
        };
    }
    static types() {
        return {
            certBackImage: 'string',
            certFrontImage: 'string',
            certName: 'string',
            certType: 'string',
            idCardNo: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestLegalPersonCertInfo = CreateSubInstitutionRequestLegalPersonCertInfo;
class CreateSubInstitutionRequestQualificationInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            qualificationImage: 'qualificationImage',
            qualificationType: 'qualificationType',
        };
    }
    static types() {
        return {
            qualificationImage: 'string',
            qualificationType: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestQualificationInfos = CreateSubInstitutionRequestQualificationInfos;
class CreateSubInstitutionRequestSettleInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountId: 'accountId',
            accountName: 'accountName',
            accountType: 'accountType',
            bankBranchName: 'bankBranchName',
            bankCity: 'bankCity',
            bankCode: 'bankCode',
            bankName: 'bankName',
            bankProvince: 'bankProvince',
            bankShortNameCode: 'bankShortNameCode',
            type: 'type',
            usageType: 'usageType',
        };
    }
    static types() {
        return {
            accountId: 'string',
            accountName: 'string',
            accountType: 'string',
            bankBranchName: 'string',
            bankCity: 'string',
            bankCode: 'string',
            bankName: 'string',
            bankProvince: 'string',
            bankShortNameCode: 'string',
            type: 'string',
            usageType: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestSettleInfo = CreateSubInstitutionRequestSettleInfo;
class CreateSubInstitutionRequestSubInstAddressInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            cityCode: 'cityCode',
            districtCode: 'districtCode',
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            address: 'string',
            cityCode: 'string',
            districtCode: 'string',
            provinceCode: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestSubInstAddressInfo = CreateSubInstitutionRequestSubInstAddressInfo;
class CreateSubInstitutionRequestSubInstAuthInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authorizationLetterUrl: 'authorizationLetterUrl',
        };
    }
    static types() {
        return {
            authorizationLetterUrl: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestSubInstAuthInfo = CreateSubInstitutionRequestSubInstAuthInfo;
class CreateSubInstitutionRequestSubInstBasicInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliasName: 'aliasName',
            mcc: 'mcc',
            subInstName: 'subInstName',
            type: 'type',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            mcc: 'string',
            subInstName: 'string',
            type: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestSubInstBasicInfo = CreateSubInstitutionRequestSubInstBasicInfo;
class CreateSubInstitutionRequestSubInstCertifyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certImage: 'certImage',
            certNo: 'certNo',
            certType: 'certType',
        };
    }
    static types() {
        return {
            certImage: 'string',
            certNo: 'string',
            certType: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestSubInstCertifyInfo = CreateSubInstitutionRequestSubInstCertifyInfo;
class CreateSubInstitutionRequestSubInstInvoiceInfoMailAddress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            cityCode: 'cityCode',
            districtCode: 'districtCode',
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            address: 'string',
            cityCode: 'string',
            districtCode: 'string',
            provinceCode: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestSubInstInvoiceInfoMailAddress = CreateSubInstitutionRequestSubInstInvoiceInfoMailAddress;
class CreateSubInstitutionRequestSubInstInvoiceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            acceptElectronic: 'acceptElectronic',
            address: 'address',
            autoInvoice: 'autoInvoice',
            bankAccount: 'bankAccount',
            bankName: 'bankName',
            mailAddress: 'mailAddress',
            mailName: 'mailName',
            mailPhone: 'mailPhone',
            taxNo: 'taxNo',
            taxPayerQualification: 'taxPayerQualification',
            taxPayerValidDate: 'taxPayerValidDate',
            telephone: 'telephone',
            title: 'title',
        };
    }
    static types() {
        return {
            acceptElectronic: 'boolean',
            address: 'string',
            autoInvoice: 'boolean',
            bankAccount: 'string',
            bankName: 'string',
            mailAddress: CreateSubInstitutionRequestSubInstInvoiceInfoMailAddress,
            mailName: 'string',
            mailPhone: 'string',
            taxNo: 'string',
            taxPayerQualification: 'string',
            taxPayerValidDate: 'string',
            telephone: 'string',
            title: 'string',
        };
    }
}
exports.CreateSubInstitutionRequestSubInstInvoiceInfo = CreateSubInstitutionRequestSubInstInvoiceInfo;
class CreateSubInstitutionRequestSubInstShopInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inDoorImages: 'inDoorImages',
            outDoorImages: 'outDoorImages',
        };
    }
    static types() {
        return {
            inDoorImages: { 'type': 'array', 'itemType': 'string' },
            outDoorImages: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateSubInstitutionRequestSubInstShopInfo = CreateSubInstitutionRequestSubInstShopInfo;
class CreateUserCodeInstanceRequestAvailableTimes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtEnd: 'gmtEnd',
            gmtStart: 'gmtStart',
        };
    }
    static types() {
        return {
            gmtEnd: 'string',
            gmtStart: 'string',
        };
    }
}
exports.CreateUserCodeInstanceRequestAvailableTimes = CreateUserCodeInstanceRequestAvailableTimes;
class ModifySubInstitutionRequestContactInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactName: 'contactName',
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            contactName: 'string',
            mobile: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestContactInfo = ModifySubInstitutionRequestContactInfo;
class ModifySubInstitutionRequestLegalPersonCertInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certBackImage: 'certBackImage',
            certFrontImage: 'certFrontImage',
            certName: 'certName',
            certType: 'certType',
            idCardNo: 'idCardNo',
        };
    }
    static types() {
        return {
            certBackImage: 'string',
            certFrontImage: 'string',
            certName: 'string',
            certType: 'string',
            idCardNo: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestLegalPersonCertInfo = ModifySubInstitutionRequestLegalPersonCertInfo;
class ModifySubInstitutionRequestQualificationInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            qualificationImage: 'qualificationImage',
            qualificationType: 'qualificationType',
        };
    }
    static types() {
        return {
            qualificationImage: 'string',
            qualificationType: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestQualificationInfos = ModifySubInstitutionRequestQualificationInfos;
class ModifySubInstitutionRequestSettleInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountId: 'accountId',
            accountName: 'accountName',
            accountType: 'accountType',
            bankBranchName: 'bankBranchName',
            bankCity: 'bankCity',
            bankCode: 'bankCode',
            bankName: 'bankName',
            bankProvince: 'bankProvince',
            bankShortNameCode: 'bankShortNameCode',
            type: 'type',
            usageType: 'usageType',
        };
    }
    static types() {
        return {
            accountId: 'string',
            accountName: 'string',
            accountType: 'string',
            bankBranchName: 'string',
            bankCity: 'string',
            bankCode: 'string',
            bankName: 'string',
            bankProvince: 'string',
            bankShortNameCode: 'string',
            type: 'string',
            usageType: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestSettleInfo = ModifySubInstitutionRequestSettleInfo;
class ModifySubInstitutionRequestSubInstAddressInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            cityCode: 'cityCode',
            districtCode: 'districtCode',
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            address: 'string',
            cityCode: 'string',
            districtCode: 'string',
            provinceCode: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestSubInstAddressInfo = ModifySubInstitutionRequestSubInstAddressInfo;
class ModifySubInstitutionRequestSubInstAuthInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authorizationLetterUrl: 'authorizationLetterUrl',
        };
    }
    static types() {
        return {
            authorizationLetterUrl: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestSubInstAuthInfo = ModifySubInstitutionRequestSubInstAuthInfo;
class ModifySubInstitutionRequestSubInstBasicInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliasName: 'aliasName',
            mcc: 'mcc',
            subInstName: 'subInstName',
            type: 'type',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            mcc: 'string',
            subInstName: 'string',
            type: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestSubInstBasicInfo = ModifySubInstitutionRequestSubInstBasicInfo;
class ModifySubInstitutionRequestSubInstCertifyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certImage: 'certImage',
            certNo: 'certNo',
            certType: 'certType',
        };
    }
    static types() {
        return {
            certImage: 'string',
            certNo: 'string',
            certType: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestSubInstCertifyInfo = ModifySubInstitutionRequestSubInstCertifyInfo;
class ModifySubInstitutionRequestSubInstInvoiceInfoMailAddress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            cityCode: 'cityCode',
            districtCode: 'districtCode',
            provinceCode: 'provinceCode',
        };
    }
    static types() {
        return {
            address: 'string',
            cityCode: 'string',
            districtCode: 'string',
            provinceCode: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestSubInstInvoiceInfoMailAddress = ModifySubInstitutionRequestSubInstInvoiceInfoMailAddress;
class ModifySubInstitutionRequestSubInstInvoiceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            acceptElectronic: 'acceptElectronic',
            address: 'address',
            autoInvoice: 'autoInvoice',
            bankAccount: 'bankAccount',
            bankName: 'bankName',
            mailAddress: 'mailAddress',
            mailName: 'mailName',
            mailPhone: 'mailPhone',
            taxNo: 'taxNo',
            taxPayerQualification: 'taxPayerQualification',
            taxPayerValidDate: 'taxPayerValidDate',
            telephone: 'telephone',
            title: 'title',
        };
    }
    static types() {
        return {
            acceptElectronic: 'boolean',
            address: 'string',
            autoInvoice: 'boolean',
            bankAccount: 'string',
            bankName: 'string',
            mailAddress: ModifySubInstitutionRequestSubInstInvoiceInfoMailAddress,
            mailName: 'string',
            mailPhone: 'string',
            taxNo: 'string',
            taxPayerQualification: 'string',
            taxPayerValidDate: 'string',
            telephone: 'string',
            title: 'string',
        };
    }
}
exports.ModifySubInstitutionRequestSubInstInvoiceInfo = ModifySubInstitutionRequestSubInstInvoiceInfo;
class ModifySubInstitutionRequestSubInstShopInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inDoorImages: 'inDoorImages',
            outDoorImages: 'outDoorImages',
        };
    }
    static types() {
        return {
            inDoorImages: { 'type': 'array', 'itemType': 'string' },
            outDoorImages: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ModifySubInstitutionRequestSubInstShopInfo = ModifySubInstitutionRequestSubInstShopInfo;
class NotifyPayCodePayResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            extInfo: 'extInfo',
            fundToolName: 'fundToolName',
            gmtCreate: 'gmtCreate',
            gmtFinish: 'gmtFinish',
            promotionFundTool: 'promotionFundTool',
        };
    }
    static types() {
        return {
            amount: 'string',
            extInfo: 'string',
            fundToolName: 'string',
            gmtCreate: 'string',
            gmtFinish: 'string',
            promotionFundTool: 'boolean',
        };
    }
}
exports.NotifyPayCodePayResultRequestPayChannelDetailListFundToolDetailList = NotifyPayCodePayResultRequestPayChannelDetailListFundToolDetailList;
class NotifyPayCodePayResultRequestPayChannelDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            fundToolDetailList: 'fundToolDetailList',
            gmtCreate: 'gmtCreate',
            gmtFinish: 'gmtFinish',
            payChannelName: 'payChannelName',
            payChannelOrderNo: 'payChannelOrderNo',
            payChannelType: 'payChannelType',
            promotionAmount: 'promotionAmount',
        };
    }
    static types() {
        return {
            amount: 'string',
            fundToolDetailList: { 'type': 'array', 'itemType': NotifyPayCodePayResultRequestPayChannelDetailListFundToolDetailList },
            gmtCreate: 'string',
            gmtFinish: 'string',
            payChannelName: 'string',
            payChannelOrderNo: 'string',
            payChannelType: 'string',
            promotionAmount: 'string',
        };
    }
}
exports.NotifyPayCodePayResultRequestPayChannelDetailList = NotifyPayCodePayResultRequestPayChannelDetailList;
class NotifyPayCodeRefundResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            extInfo: 'extInfo',
            fundToolName: 'fundToolName',
            gmtCreate: 'gmtCreate',
            gmtFinish: 'gmtFinish',
            promotionFundTool: 'promotionFundTool',
        };
    }
    static types() {
        return {
            amount: 'string',
            extInfo: 'string',
            fundToolName: 'string',
            gmtCreate: 'string',
            gmtFinish: 'string',
            promotionFundTool: 'boolean',
        };
    }
}
exports.NotifyPayCodeRefundResultRequestPayChannelDetailListFundToolDetailList = NotifyPayCodeRefundResultRequestPayChannelDetailListFundToolDetailList;
class NotifyPayCodeRefundResultRequestPayChannelDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            fundToolDetailList: 'fundToolDetailList',
            payChannelName: 'payChannelName',
            payChannelOrderNo: 'payChannelOrderNo',
            payChannelRefundOrderNo: 'payChannelRefundOrderNo',
            payChannelType: 'payChannelType',
            promotionAmount: 'promotionAmount',
        };
    }
    static types() {
        return {
            amount: 'string',
            fundToolDetailList: { 'type': 'array', 'itemType': NotifyPayCodeRefundResultRequestPayChannelDetailListFundToolDetailList },
            payChannelName: 'string',
            payChannelOrderNo: 'string',
            payChannelRefundOrderNo: 'string',
            payChannelType: 'string',
            promotionAmount: 'string',
        };
    }
}
exports.NotifyPayCodeRefundResultRequestPayChannelDetailList = NotifyPayCodeRefundResultRequestPayChannelDetailList;
class QueryBatchTradeDetailListResponseBodyBatchTradeDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            detailNo: 'detailNo',
            gmtCreate: 'gmtCreate',
            gmtFinish: 'gmtFinish',
            memo: 'memo',
            payeeAccountName: 'payeeAccountName',
            payeeAccountNo: 'payeeAccountNo',
            payeeAccountType: 'payeeAccountType',
            serialNo: 'serialNo',
            status: 'status',
        };
    }
    static types() {
        return {
            amount: 'string',
            detailNo: 'string',
            gmtCreate: 'string',
            gmtFinish: 'string',
            memo: 'string',
            payeeAccountName: 'string',
            payeeAccountNo: 'string',
            payeeAccountType: 'string',
            serialNo: 'number',
            status: 'string',
        };
    }
}
exports.QueryBatchTradeDetailListResponseBodyBatchTradeDetailList = QueryBatchTradeDetailListResponseBodyBatchTradeDetailList;
class QueryBatchTradeOrderResponseBodyBatchTradeOrderVOs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alipayTransId: 'alipayTransId',
            failAmount: 'failAmount',
            failCount: 'failCount',
            failReason: 'failReason',
            gmtFinish: 'gmtFinish',
            gmtSubmit: 'gmtSubmit',
            outBatchNo: 'outBatchNo',
            payerStaffId: 'payerStaffId',
            paymentAmount: 'paymentAmount',
            paymentCurrency: 'paymentCurrency',
            status: 'status',
            successAmount: 'successAmount',
            successCount: 'successCount',
            totalAmount: 'totalAmount',
        };
    }
    static types() {
        return {
            alipayTransId: 'string',
            failAmount: 'string',
            failCount: 'number',
            failReason: 'string',
            gmtFinish: 'string',
            gmtSubmit: 'string',
            outBatchNo: 'string',
            payerStaffId: 'string',
            paymentAmount: 'string',
            paymentCurrency: 'string',
            status: 'string',
            successAmount: 'string',
            successCount: 'number',
            totalAmount: 'string',
        };
    }
}
exports.QueryBatchTradeOrderResponseBodyBatchTradeOrderVOs = QueryBatchTradeOrderResponseBodyBatchTradeOrderVOs;
class QueryPayAccountListResponseBodyPayAccountVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountClass: 'accountClass',
            accountId: 'accountId',
            accountName: 'accountName',
            accountNo: 'accountNo',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
        };
    }
    static types() {
        return {
            accountClass: 'string',
            accountId: 'string',
            accountName: 'string',
            accountNo: 'string',
            accountRemark: 'string',
            accountType: 'string',
        };
    }
}
exports.QueryPayAccountListResponseBodyPayAccountVOList = QueryPayAccountListResponseBodyPayAccountVOList;
class UpateUserCodeInstanceRequestAvailableTimes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtEnd: 'gmtEnd',
            gmtStart: 'gmtStart',
        };
    }
    static types() {
        return {
            gmtEnd: 'string',
            gmtStart: 'string',
        };
    }
}
exports.UpateUserCodeInstanceRequestAvailableTimes = UpateUserCodeInstanceRequestAvailableTimes;
class UploadInvoiceByAuthRequestInvoices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceAmount: 'invoiceAmount',
            invoiceCode: 'invoiceCode',
            invoiceDate: 'invoiceDate',
            invoiceNo: 'invoiceNo',
            invoiceType: 'invoiceType',
            logoUrl: 'logoUrl',
            payeeName: 'payeeName',
            payeeTaxNo: 'payeeTaxNo',
            payerName: 'payerName',
            payerTaxNo: 'payerTaxNo',
            pdfUrl: 'pdfUrl',
            taxAmount: 'taxAmount',
            verifyCode: 'verifyCode',
            withoutTaxAmount: 'withoutTaxAmount',
        };
    }
    static types() {
        return {
            invoiceAmount: 'string',
            invoiceCode: 'string',
            invoiceDate: 'string',
            invoiceNo: 'string',
            invoiceType: 'string',
            logoUrl: 'string',
            payeeName: 'string',
            payeeTaxNo: 'string',
            payerName: 'string',
            payerTaxNo: 'string',
            pdfUrl: 'string',
            taxAmount: 'string',
            verifyCode: 'string',
            withoutTaxAmount: 'string',
        };
    }
}
exports.UploadInvoiceByAuthRequestInvoices = UploadInvoiceByAuthRequestInvoices;
class UploadInvoiceByAuthResponseBodyResultResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errCode: 'errCode',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            reason: 'reason',
            success: 'success',
        };
    }
    static types() {
        return {
            errCode: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            reason: 'string',
            success: 'boolean',
        };
    }
}
exports.UploadInvoiceByAuthResponseBodyResultResults = UploadInvoiceByAuthResponseBodyResultResults;
class UploadInvoiceByAuthResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            results: 'results',
        };
    }
    static types() {
        return {
            results: { 'type': 'array', 'itemType': UploadInvoiceByAuthResponseBodyResultResults },
        };
    }
}
exports.UploadInvoiceByAuthResponseBodyResult = UploadInvoiceByAuthResponseBodyResult;
class UploadInvoiceByMobileRequestInvoices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceAmount: 'invoiceAmount',
            invoiceCode: 'invoiceCode',
            invoiceDate: 'invoiceDate',
            invoiceNo: 'invoiceNo',
            invoiceType: 'invoiceType',
            logoUrl: 'logoUrl',
            payeeName: 'payeeName',
            payeeTaxNo: 'payeeTaxNo',
            payerName: 'payerName',
            payerTaxNo: 'payerTaxNo',
            pdfUrl: 'pdfUrl',
            taxAmount: 'taxAmount',
            verifyCode: 'verifyCode',
            withoutTaxAmount: 'withoutTaxAmount',
        };
    }
    static types() {
        return {
            invoiceAmount: 'string',
            invoiceCode: 'string',
            invoiceDate: 'string',
            invoiceNo: 'string',
            invoiceType: 'string',
            logoUrl: 'string',
            payeeName: 'string',
            payeeTaxNo: 'string',
            payerName: 'string',
            payerTaxNo: 'string',
            pdfUrl: 'string',
            taxAmount: 'string',
            verifyCode: 'string',
            withoutTaxAmount: 'string',
        };
    }
}
exports.UploadInvoiceByMobileRequestInvoices = UploadInvoiceByMobileRequestInvoices;
class UploadInvoiceByMobileResponseBodyResultResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errCode: 'errCode',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            reason: 'reason',
            success: 'success',
        };
    }
    static types() {
        return {
            errCode: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            reason: 'string',
            success: 'boolean',
        };
    }
}
exports.UploadInvoiceByMobileResponseBodyResultResults = UploadInvoiceByMobileResponseBodyResultResults;
class UploadInvoiceByMobileResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            results: 'results',
        };
    }
    static types() {
        return {
            results: { 'type': 'array', 'itemType': UploadInvoiceByMobileResponseBodyResultResults },
        };
    }
}
exports.UploadInvoiceByMobileResponseBodyResult = UploadInvoiceByMobileResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async applyBatchPay(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ApplyBatchPayHeaders({});
        return await this.applyBatchPayWithOptions(request, headers, runtime);
    }
    async applyBatchPayWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountId)) {
            body["accountId"] = request.accountId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.passBackParams)) {
            body["passBackParams"] = request.passBackParams;
        }
        if (!tea_util_1.default.isUnset(request.payTerminal)) {
            body["payTerminal"] = request.payTerminal;
        }
        if (!tea_util_1.default.isUnset(request.returnUrl)) {
            body["returnUrl"] = request.returnUrl;
        }
        if (!tea_util_1.default.isUnset(request.staffId)) {
            body["staffId"] = request.staffId;
        }
        if (!tea_util_1.default.isUnset(request.transAmount)) {
            body["transAmount"] = request.transAmount;
        }
        if (!tea_util_1.default.isUnset(request.transExpireTime)) {
            body["transExpireTime"] = request.transExpireTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("ApplyBatchPay", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/batchTrades/orders/pay`, "json", req, runtime), new ApplyBatchPayResponse({}));
    }
    async consultCreateSubInstitution(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ConsultCreateSubInstitutionHeaders({});
        return await this.consultCreateSubInstitutionWithOptions(request, headers, runtime);
    }
    async consultCreateSubInstitutionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bindingAlipayLogonId)) {
            body["bindingAlipayLogonId"] = request.bindingAlipayLogonId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.contactInfo))) {
            body["contactInfo"] = request.contactInfo;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.legalPersonCertInfo))) {
            body["legalPersonCertInfo"] = request.legalPersonCertInfo;
        }
        if (!tea_util_1.default.isUnset(request.outTradeNo)) {
            body["outTradeNo"] = request.outTradeNo;
        }
        if (!tea_util_1.default.isUnset(request.payChannel)) {
            body["payChannel"] = request.payChannel;
        }
        if (!tea_util_1.default.isUnset(request.qualificationInfos)) {
            body["qualificationInfos"] = request.qualificationInfos;
        }
        if (!tea_util_1.default.isUnset(request.services)) {
            body["services"] = request.services;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.settleInfo))) {
            body["settleInfo"] = request.settleInfo;
        }
        if (!tea_util_1.default.isUnset(request.solution)) {
            body["solution"] = request.solution;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstAddressInfo))) {
            body["subInstAddressInfo"] = request.subInstAddressInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstAuthInfo))) {
            body["subInstAuthInfo"] = request.subInstAuthInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstBasicInfo))) {
            body["subInstBasicInfo"] = request.subInstBasicInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstCertifyInfo))) {
            body["subInstCertifyInfo"] = request.subInstCertifyInfo;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            body["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstInvoiceInfo))) {
            body["subInstInvoiceInfo"] = request.subInstInvoiceInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstShopInfo))) {
            body["subInstShopInfo"] = request.subInstShopInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("ConsultCreateSubInstitution", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/institutions/subInstitutions/consult`, "json", req, runtime), new ConsultCreateSubInstitutionResponse({}));
    }
    async creatWithholdingOrderAndPay(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreatWithholdingOrderAndPayHeaders({});
        return await this.creatWithholdingOrderAndPayWithOptions(request, headers, runtime);
    }
    async creatWithholdingOrderAndPayWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.amount)) {
            body["amount"] = request.amount;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset(request.otherPayChannelDetailInfoList)) {
            body["otherPayChannelDetailInfoList"] = request.otherPayChannelDetailInfoList;
        }
        if (!tea_util_1.default.isUnset(request.outTradeNo)) {
            body["outTradeNo"] = request.outTradeNo;
        }
        if (!tea_util_1.default.isUnset(request.payChannel)) {
            body["payChannel"] = request.payChannel;
        }
        if (!tea_util_1.default.isUnset(request.payerUserId)) {
            body["payerUserId"] = request.payerUserId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            body["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset(request.timeOutExpress)) {
            body["timeOutExpress"] = request.timeOutExpress;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreatWithholdingOrderAndPay", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/withholdingOrders`, "json", req, runtime), new CreatWithholdingOrderAndPayResponse({}));
    }
    async createAcquireRefundOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateAcquireRefundOrderHeaders({});
        return await this.createAcquireRefundOrderWithOptions(request, headers, runtime);
    }
    async createAcquireRefundOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset(request.operatorUserId)) {
            body["operatorUserId"] = request.operatorUserId;
        }
        if (!tea_util_1.default.isUnset(request.originOutTradeNo)) {
            body["originOutTradeNo"] = request.originOutTradeNo;
        }
        if (!tea_util_1.default.isUnset(request.otherPayChannelDetailInfoList)) {
            body["otherPayChannelDetailInfoList"] = request.otherPayChannelDetailInfoList;
        }
        if (!tea_util_1.default.isUnset(request.outRefundNo)) {
            body["outRefundNo"] = request.outRefundNo;
        }
        if (!tea_util_1.default.isUnset(request.refundAmount)) {
            body["refundAmount"] = request.refundAmount;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            body["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateAcquireRefundOrder", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/acquireOrders/refund`, "json", req, runtime), new CreateAcquireRefundOrderResponse({}));
    }
    async createBatchTradeOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateBatchTradeOrderHeaders({});
        return await this.createBatchTradeOrderWithOptions(request, headers, runtime);
    }
    async createBatchTradeOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountId)) {
            body["accountId"] = request.accountId;
        }
        if (!tea_util_1.default.isUnset(request.accountNo)) {
            body["accountNo"] = request.accountNo;
        }
        if (!tea_util_1.default.isUnset(request.batchRemark)) {
            body["batchRemark"] = request.batchRemark;
        }
        if (!tea_util_1.default.isUnset(request.batchTradeDetails)) {
            body["batchTradeDetails"] = request.batchTradeDetails;
        }
        if (!tea_util_1.default.isUnset(request.outBatchNo)) {
            body["outBatchNo"] = request.outBatchNo;
        }
        if (!tea_util_1.default.isUnset(request.staffId)) {
            body["staffId"] = request.staffId;
        }
        if (!tea_util_1.default.isUnset(request.totalAmount)) {
            body["totalAmount"] = request.totalAmount;
        }
        if (!tea_util_1.default.isUnset(request.totalCount)) {
            body["totalCount"] = request.totalCount;
        }
        if (!tea_util_1.default.isUnset(request.tradeTitle)) {
            body["tradeTitle"] = request.tradeTitle;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateBatchTradeOrder", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/batchTrades/orders`, "json", req, runtime), new CreateBatchTradeOrderResponse({}));
    }
    async createSubInstitution(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSubInstitutionHeaders({});
        return await this.createSubInstitutionWithOptions(request, headers, runtime);
    }
    async createSubInstitutionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bindingAlipayLogonId)) {
            body["bindingAlipayLogonId"] = request.bindingAlipayLogonId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.contactInfo))) {
            body["contactInfo"] = request.contactInfo;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.legalPersonCertInfo))) {
            body["legalPersonCertInfo"] = request.legalPersonCertInfo;
        }
        if (!tea_util_1.default.isUnset(request.outTradeNo)) {
            body["outTradeNo"] = request.outTradeNo;
        }
        if (!tea_util_1.default.isUnset(request.payChannel)) {
            body["payChannel"] = request.payChannel;
        }
        if (!tea_util_1.default.isUnset(request.qualificationInfos)) {
            body["qualificationInfos"] = request.qualificationInfos;
        }
        if (!tea_util_1.default.isUnset(request.services)) {
            body["services"] = request.services;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.settleInfo))) {
            body["settleInfo"] = request.settleInfo;
        }
        if (!tea_util_1.default.isUnset(request.solution)) {
            body["solution"] = request.solution;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstAddressInfo))) {
            body["subInstAddressInfo"] = request.subInstAddressInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstAuthInfo))) {
            body["subInstAuthInfo"] = request.subInstAuthInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstBasicInfo))) {
            body["subInstBasicInfo"] = request.subInstBasicInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstCertifyInfo))) {
            body["subInstCertifyInfo"] = request.subInstCertifyInfo;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            body["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstInvoiceInfo))) {
            body["subInstInvoiceInfo"] = request.subInstInvoiceInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstShopInfo))) {
            body["subInstShopInfo"] = request.subInstShopInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateSubInstitution", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/institutions/subInstitutions`, "json", req, runtime), new CreateSubInstitutionResponse({}));
    }
    async createUserCodeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateUserCodeInstanceHeaders({});
        return await this.createUserCodeInstanceWithOptions(request, headers, runtime);
    }
    async createUserCodeInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.availableTimes)) {
            body["availableTimes"] = request.availableTimes;
        }
        if (!tea_util_1.default.isUnset(request.codeIdentity)) {
            body["codeIdentity"] = request.codeIdentity;
        }
        if (!tea_util_1.default.isUnset(request.codeValue)) {
            body["codeValue"] = request.codeValue;
        }
        if (!tea_util_1.default.isUnset(request.codeValueType)) {
            body["codeValueType"] = request.codeValueType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extInfo)) {
            body["extInfo"] = request.extInfo;
        }
        if (!tea_util_1.default.isUnset(request.gmtExpired)) {
            body["gmtExpired"] = request.gmtExpired;
        }
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.userCorpRelationType)) {
            body["userCorpRelationType"] = request.userCorpRelationType;
        }
        if (!tea_util_1.default.isUnset(request.userIdentity)) {
            body["userIdentity"] = request.userIdentity;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateUserCodeInstance", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/payCodes/userInstances`, "json", req, runtime), new CreateUserCodeInstanceResponse({}));
    }
    async decodePayCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DecodePayCodeHeaders({});
        return await this.decodePayCodeWithOptions(request, headers, runtime);
    }
    async decodePayCodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.payCode)) {
            body["payCode"] = request.payCode;
        }
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("DecodePayCode", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/payCodes/decode`, "json", req, runtime), new DecodePayCodeResponse({}));
    }
    async modifySubInstitution(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ModifySubInstitutionHeaders({});
        return await this.modifySubInstitutionWithOptions(request, headers, runtime);
    }
    async modifySubInstitutionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bindingAlipayLogonId)) {
            body["bindingAlipayLogonId"] = request.bindingAlipayLogonId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.contactInfo))) {
            body["contactInfo"] = request.contactInfo;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.legalPersonCertInfo))) {
            body["legalPersonCertInfo"] = request.legalPersonCertInfo;
        }
        if (!tea_util_1.default.isUnset(request.outTradeNo)) {
            body["outTradeNo"] = request.outTradeNo;
        }
        if (!tea_util_1.default.isUnset(request.payChannel)) {
            body["payChannel"] = request.payChannel;
        }
        if (!tea_util_1.default.isUnset(request.qualificationInfos)) {
            body["qualificationInfos"] = request.qualificationInfos;
        }
        if (!tea_util_1.default.isUnset(request.services)) {
            body["services"] = request.services;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.settleInfo))) {
            body["settleInfo"] = request.settleInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstAddressInfo))) {
            body["subInstAddressInfo"] = request.subInstAddressInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstAuthInfo))) {
            body["subInstAuthInfo"] = request.subInstAuthInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstBasicInfo))) {
            body["subInstBasicInfo"] = request.subInstBasicInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstCertifyInfo))) {
            body["subInstCertifyInfo"] = request.subInstCertifyInfo;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            body["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstInvoiceInfo))) {
            body["subInstInvoiceInfo"] = request.subInstInvoiceInfo;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.subInstShopInfo))) {
            body["subInstShopInfo"] = request.subInstShopInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("ModifySubInstitution", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/institutions/subInstitutions/modify`, "json", req, runtime), new ModifySubInstitutionResponse({}));
    }
    async notifyPayCodePayResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new NotifyPayCodePayResultHeaders({});
        return await this.notifyPayCodePayResultWithOptions(request, headers, runtime);
    }
    async notifyPayCodePayResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.amount)) {
            body["amount"] = request.amount;
        }
        if (!tea_util_1.default.isUnset(request.chargeAmount)) {
            body["chargeAmount"] = request.chargeAmount;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extInfo)) {
            body["extInfo"] = request.extInfo;
        }
        if (!tea_util_1.default.isUnset(request.gmtTradeCreate)) {
            body["gmtTradeCreate"] = request.gmtTradeCreate;
        }
        if (!tea_util_1.default.isUnset(request.gmtTradeFinish)) {
            body["gmtTradeFinish"] = request.gmtTradeFinish;
        }
        if (!tea_util_1.default.isUnset(request.merchantName)) {
            body["merchantName"] = request.merchantName;
        }
        if (!tea_util_1.default.isUnset(request.payChannelDetailList)) {
            body["payChannelDetailList"] = request.payChannelDetailList;
        }
        if (!tea_util_1.default.isUnset(request.payCode)) {
            body["payCode"] = request.payCode;
        }
        if (!tea_util_1.default.isUnset(request.promotionAmount)) {
            body["promotionAmount"] = request.promotionAmount;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.tradeErrorCode)) {
            body["tradeErrorCode"] = request.tradeErrorCode;
        }
        if (!tea_util_1.default.isUnset(request.tradeErrorMsg)) {
            body["tradeErrorMsg"] = request.tradeErrorMsg;
        }
        if (!tea_util_1.default.isUnset(request.tradeNo)) {
            body["tradeNo"] = request.tradeNo;
        }
        if (!tea_util_1.default.isUnset(request.tradeStatus)) {
            body["tradeStatus"] = request.tradeStatus;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("NotifyPayCodePayResult", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/payCodes/payResults/notify`, "json", req, runtime), new NotifyPayCodePayResultResponse({}));
    }
    async notifyPayCodeRefundResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new NotifyPayCodeRefundResultHeaders({});
        return await this.notifyPayCodeRefundResultWithOptions(request, headers, runtime);
    }
    async notifyPayCodeRefundResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.gmtRefund)) {
            body["gmtRefund"] = request.gmtRefund;
        }
        if (!tea_util_1.default.isUnset(request.payChannelDetailList)) {
            body["payChannelDetailList"] = request.payChannelDetailList;
        }
        if (!tea_util_1.default.isUnset(request.payCode)) {
            body["payCode"] = request.payCode;
        }
        if (!tea_util_1.default.isUnset(request.refundAmount)) {
            body["refundAmount"] = request.refundAmount;
        }
        if (!tea_util_1.default.isUnset(request.refundOrderNo)) {
            body["refundOrderNo"] = request.refundOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.refundPromotionAmount)) {
            body["refundPromotionAmount"] = request.refundPromotionAmount;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.tradeNo)) {
            body["tradeNo"] = request.tradeNo;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("NotifyPayCodeRefundResult", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/payCodes/refundResults/notify`, "json", req, runtime), new NotifyPayCodeRefundResultResponse({}));
    }
    async notifyVerifyResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new NotifyVerifyResultHeaders({});
        return await this.notifyVerifyResultWithOptions(request, headers, runtime);
    }
    async notifyVerifyResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.payCode)) {
            body["payCode"] = request.payCode;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.userCorpRelationType)) {
            body["userCorpRelationType"] = request.userCorpRelationType;
        }
        if (!tea_util_1.default.isUnset(request.userIdentity)) {
            body["userIdentity"] = request.userIdentity;
        }
        if (!tea_util_1.default.isUnset(request.verifyEvent)) {
            body["verifyEvent"] = request.verifyEvent;
        }
        if (!tea_util_1.default.isUnset(request.verifyLocation)) {
            body["verifyLocation"] = request.verifyLocation;
        }
        if (!tea_util_1.default.isUnset(request.verifyNo)) {
            body["verifyNo"] = request.verifyNo;
        }
        if (!tea_util_1.default.isUnset(request.verifyResult)) {
            body["verifyResult"] = request.verifyResult;
        }
        if (!tea_util_1.default.isUnset(request.verifyTime)) {
            body["verifyTime"] = request.verifyTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("NotifyVerifyResult", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/payCodes/verifyResults/notify`, "json", req, runtime), new NotifyVerifyResultResponse({}));
    }
    async queryAcquireRefundOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAcquireRefundOrderHeaders({});
        return await this.queryAcquireRefundOrderWithOptions(request, headers, runtime);
    }
    async queryAcquireRefundOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outRefundNo)) {
            query["outRefundNo"] = request.outRefundNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAcquireRefundOrder", "finance_1.0", "HTTP", "GET", "AK", `/v1.0/finance/acquireOrders/refunds`, "json", req, runtime), new QueryAcquireRefundOrderResponse({}));
    }
    async queryBatchTradeDetailList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBatchTradeDetailListHeaders({});
        return await this.queryBatchTradeDetailListWithOptions(request, headers, runtime);
    }
    async queryBatchTradeDetailListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outBatchNo)) {
            query["outBatchNo"] = request.outBatchNo;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryBatchTradeDetailList", "finance_1.0", "HTTP", "GET", "AK", `/v1.0/finance/batchTrades/details`, "json", req, runtime), new QueryBatchTradeDetailListResponse({}));
    }
    async queryBatchTradeOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBatchTradeOrderHeaders({});
        return await this.queryBatchTradeOrderWithOptions(request, headers, runtime);
    }
    async queryBatchTradeOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outBatchNos)) {
            body["outBatchNos"] = request.outBatchNos;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryBatchTradeOrder", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/batchTrades/orders/query`, "json", req, runtime), new QueryBatchTradeOrderResponse({}));
    }
    async queryPayAccountList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPayAccountListHeaders({});
        return await this.queryPayAccountListWithOptions(headers, runtime);
    }
    async queryPayAccountListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryPayAccountList", "finance_1.0", "HTTP", "GET", "AK", `/v1.0/finance/payAccounts`, "json", req, runtime), new QueryPayAccountListResponse({}));
    }
    async queryRegisterOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRegisterOrderHeaders({});
        return await this.queryRegisterOrderWithOptions(request, headers, runtime);
    }
    async queryRegisterOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instId)) {
            query["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            query["orderId"] = request.orderId;
        }
        if (!tea_util_1.default.isUnset(request.outTradeNo)) {
            query["outTradeNo"] = request.outTradeNo;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            query["subInstId"] = request.subInstId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryRegisterOrder", "finance_1.0", "HTTP", "GET", "AK", `/v1.0/finance/institutions/subInstitutions/orders`, "json", req, runtime), new QueryRegisterOrderResponse({}));
    }
    async queryUserAgreement(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserAgreementHeaders({});
        return await this.queryUserAgreementWithOptions(request, headers, runtime);
    }
    async queryUserAgreementWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            query["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.bizScene)) {
            query["bizScene"] = request.bizScene;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            query["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            query["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryUserAgreement", "finance_1.0", "HTTP", "GET", "AK", `/v1.0/finance/userAgreements`, "json", req, runtime), new QueryUserAgreementResponse({}));
    }
    async queryUserAlipayAccount() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserAlipayAccountHeaders({});
        return await this.queryUserAlipayAccountWithOptions(headers, runtime);
    }
    async queryUserAlipayAccountWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("QueryUserAlipayAccount", "finance_1.0", "HTTP", "GET", "AK", `/v1.0/finance/userAlipayAccounts`, "json", req, runtime), new QueryUserAlipayAccountResponse({}));
    }
    async queryWithholdingOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryWithholdingOrderHeaders({});
        return await this.queryWithholdingOrderWithOptions(request, headers, runtime);
    }
    async queryWithholdingOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outTradeNo)) {
            query["outTradeNo"] = request.outTradeNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryWithholdingOrder", "finance_1.0", "HTTP", "GET", "AK", `/v1.0/finance/withholdingOrders`, "json", req, runtime), new QueryWithholdingOrderResponse({}));
    }
    async saveCorpPayCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveCorpPayCodeHeaders({});
        return await this.saveCorpPayCodeWithOptions(request, headers, runtime);
    }
    async saveCorpPayCodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.codeIdentity)) {
            body["codeIdentity"] = request.codeIdentity;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extInfo)) {
            body["extInfo"] = request.extInfo;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("SaveCorpPayCode", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/payCodes/corpSettings`, "json", req, runtime), new SaveCorpPayCodeResponse({}));
    }
    async unsignUserAgreement(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnsignUserAgreementHeaders({});
        return await this.unsignUserAgreementWithOptions(request, headers, runtime);
    }
    async unsignUserAgreementWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agreementNo)) {
            body["agreementNo"] = request.agreementNo;
        }
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.bizScene)) {
            body["bizScene"] = request.bizScene;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            body["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UnsignUserAgreement", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/userAgreements/unsign`, "none", req, runtime), new UnsignUserAgreementResponse({}));
    }
    async upateUserCodeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpateUserCodeInstanceHeaders({});
        return await this.upateUserCodeInstanceWithOptions(request, headers, runtime);
    }
    async upateUserCodeInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.availableTimes)) {
            body["availableTimes"] = request.availableTimes;
        }
        if (!tea_util_1.default.isUnset(request.codeId)) {
            body["codeId"] = request.codeId;
        }
        if (!tea_util_1.default.isUnset(request.codeIdentity)) {
            body["codeIdentity"] = request.codeIdentity;
        }
        if (!tea_util_1.default.isUnset(request.codeValue)) {
            body["codeValue"] = request.codeValue;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extInfo)) {
            body["extInfo"] = request.extInfo;
        }
        if (!tea_util_1.default.isUnset(request.gmtExpired)) {
            body["gmtExpired"] = request.gmtExpired;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.userCorpRelationType)) {
            body["userCorpRelationType"] = request.userCorpRelationType;
        }
        if (!tea_util_1.default.isUnset(request.userIdentity)) {
            body["userIdentity"] = request.userIdentity;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpateUserCodeInstance", "finance_1.0", "HTTP", "PUT", "AK", `/v1.0/finance/payCodes/userInstances`, "json", req, runtime), new UpateUserCodeInstanceResponse({}));
    }
    async updateInvoiceVerifyStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceVerifyStatusHeaders({});
        return await this.updateInvoiceVerifyStatusWithOptions(request, headers, runtime);
    }
    async updateInvoiceVerifyStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.checkingResult)) {
            body["checkingResult"] = request.checkingResult;
        }
        if (!tea_util_1.default.isUnset(request.checkingStatus)) {
            body["checkingStatus"] = request.checkingStatus;
        }
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.invoiceCode)) {
            body["invoiceCode"] = request.invoiceCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceNo)) {
            body["invoiceNo"] = request.invoiceNo;
        }
        if (!tea_util_1.default.isUnset(request.invoiceStatus)) {
            body["invoiceStatus"] = request.invoiceStatus;
        }
        if (!tea_util_1.default.isUnset(request.invoiceVerifyId)) {
            body["invoiceVerifyId"] = request.invoiceVerifyId;
        }
        if (!tea_util_1.default.isUnset(request.msg)) {
            body["msg"] = request.msg;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateInvoiceVerifyStatus", "finance_1.0", "HTTP", "PUT", "AK", `/v1.0/finance/invoices/verifyStatus`, "json", req, runtime), new UpdateInvoiceVerifyStatusResponse({}));
    }
    async uploadInvoiceByAuth(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UploadInvoiceByAuthHeaders({});
        return await this.uploadInvoiceByAuthWithOptions(request, headers, runtime);
    }
    async uploadInvoiceByAuthWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.invoices)) {
            body["invoices"] = request.invoices;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UploadInvoiceByAuth", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/invoices/authorizations/upload`, "json", req, runtime), new UploadInvoiceByAuthResponse({}));
    }
    async uploadInvoiceByMobile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UploadInvoiceByMobileHeaders({});
        return await this.uploadInvoiceByMobileWithOptions(request, headers, runtime);
    }
    async uploadInvoiceByMobileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.invoices)) {
            body["invoices"] = request.invoices;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.mobileStateCode)) {
            body["mobileStateCode"] = request.mobileStateCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UploadInvoiceByMobile", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/invoices/mobiles/upload`, "json", req, runtime), new UploadInvoiceByMobileResponse({}));
    }
    async uploadRegisterImage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UploadRegisterImageHeaders({});
        return await this.uploadRegisterImageWithOptions(request, headers, runtime);
    }
    async uploadRegisterImageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.imageContent)) {
            body["imageContent"] = request.imageContent;
        }
        if (!tea_util_1.default.isUnset(request.imageName)) {
            body["imageName"] = request.imageName;
        }
        if (!tea_util_1.default.isUnset(request.imageType)) {
            body["imageType"] = request.imageType;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset(request.payChannel)) {
            body["payChannel"] = request.payChannel;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UploadRegisterImage", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/institutions/images`, "json", req, runtime), new UploadRegisterImageResponse({}));
    }
    async userAgreementPageSign(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UserAgreementPageSignHeaders({});
        return await this.userAgreementPageSignWithOptions(request, headers, runtime);
    }
    async userAgreementPageSignWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.bizScene)) {
            body["bizScene"] = request.bizScene;
        }
        if (!tea_util_1.default.isUnset(request.instId)) {
            body["instId"] = request.instId;
        }
        if (!tea_util_1.default.isUnset(request.payChannel)) {
            body["payChannel"] = request.payChannel;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.returnUrl)) {
            body["returnUrl"] = request.returnUrl;
        }
        if (!tea_util_1.default.isUnset(request.signScene)) {
            body["signScene"] = request.signScene;
        }
        if (!tea_util_1.default.isUnset(request.subInstId)) {
            body["subInstId"] = request.subInstId;
        }
        if (!tea_util_1.default.isUnset(request.subMerchantName)) {
            body["subMerchantName"] = request.subMerchantName;
        }
        if (!tea_util_1.default.isUnset(request.subMerchantServiceDesc)) {
            body["subMerchantServiceDesc"] = request.subMerchantServiceDesc;
        }
        if (!tea_util_1.default.isUnset(request.subMerchantServiceName)) {
            body["subMerchantServiceName"] = request.subMerchantServiceName;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UserAgreementPageSign", "finance_1.0", "HTTP", "POST", "AK", `/v1.0/finance/userAgreements`, "json", req, runtime), new UserAgreementPageSignResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map