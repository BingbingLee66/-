/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class DentryModel extends $tea.Model {
    contentType?: string;
    createdTime?: number;
    creator?: DentryModelCreator;
    dentryId?: string;
    dentryType?: string;
    dentryUuid?: string;
    docKey?: string;
    extension?: string;
    hasChildren?: boolean;
    linkSourceInfo?: LinkSourceInfo;
    name?: string;
    path?: string;
    space?: SpaceModel;
    spaceId?: string;
    updatedTime?: number;
    updater?: DentryModelUpdater;
    url?: string;
    visitorInfo?: DentryModelVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVO extends $tea.Model {
    contentType?: string;
    createdTime?: number;
    creator?: DentryVOCreator;
    dentryId?: string;
    dentryType?: string;
    dentryUuid?: string;
    docKey?: string;
    extension?: string;
    hasChildren?: boolean;
    linkSourceInfo?: LinkSourceInfo;
    name?: string;
    path?: string;
    space?: SpaceModel;
    spaceId?: string;
    updatedTime?: number;
    updater?: DentryVOUpdater;
    url?: string;
    visitorInfo?: DentryVOVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkSourceInfo extends $tea.Model {
    extension?: string;
    iconUrl?: LinkSourceInfoIconUrl;
    id?: string;
    linkType?: number;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenActionModel extends $tea.Model {
    name?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModel extends $tea.Model {
    cover?: string;
    description?: string;
    iconVO?: SpaceModelIconVO;
    id?: string;
    name?: string;
    owner?: SpaceModelOwner;
    url?: string;
    visitorInfo?: SpaceModelVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVO extends $tea.Model {
    cover?: string;
    description?: string;
    iconVO?: SpaceVOIconVO;
    id?: string;
    name?: string;
    owner?: SpaceVOOwner;
    url?: string;
    visitorInfo?: SpaceVOVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryRequest extends $tea.Model {
    name?: string;
    operatorId?: string;
    targetSpaceId?: string;
    toNextDentryId?: string;
    toParentDentryId?: string;
    toPrevDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryRequest extends $tea.Model {
    dentryType?: string;
    documentType?: number;
    name?: string;
    operatorId?: string;
    parentDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesRequest extends $tea.Model {
    dentryId?: string;
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesResponseBody extends $tea.Model {
    children?: DentryModel[];
    hasMore?: boolean;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSpaceDirectoriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenRequest extends $tea.Model {
    docKey?: string;
    openToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenResponseBody extends $tea.Model {
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetUserInfoByOpenTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryRequest extends $tea.Model {
    operatorId?: string;
    targetSpaceId?: string;
    toNextDentryId?: string;
    toParentDentryId?: string;
    toPrevDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryRequest extends $tea.Model {
    includeSpace?: boolean;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMineSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMineSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListRequest extends $tea.Model {
    creatorType?: number;
    fileType?: number;
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    recentType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    recentList?: QueryRecentListResponseBodyRecentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryRecentListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBody extends $tea.Model {
    hasMore?: boolean;
    items?: SpaceModel[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RelatedSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryRequest extends $tea.Model {
    name?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequest extends $tea.Model {
    dentryRequest?: SearchRequestDentryRequest;
    keyword?: string;
    operatorId?: string;
    spaceRequest?: SearchRequestSpaceRequest;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBody extends $tea.Model {
    dentryResult?: SearchResponseBodyDentryResult;
    spaceResult?: SearchResponseBodySpaceResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SearchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelCreator extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelUpdater extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOCreator extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOUpdater extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkSourceInfoIconUrl extends $tea.Model {
    line?: string;
    small?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelOwner extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOOwner extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBodyRecentList extends $tea.Model {
    deleted?: boolean;
    dentry?: DentryModel;
    recentTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestDentryRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    searchFileType?: number;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestSpaceRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodyDentryResultItems extends $tea.Model {
    content?: string;
    creation?: OpenActionModel;
    dentryId?: string;
    dentryUuid?: string;
    extension?: string;
    iconUrl?: string;
    lastEdition?: OpenActionModel;
    name?: string;
    originName?: string;
    path?: string;
    searchFileType?: number;
    spaceId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodyDentryResult extends $tea.Model {
    hasMore?: boolean;
    items?: SearchResponseBodyDentryResultItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItems extends $tea.Model {
    name?: string;
    originName?: string;
    spaceId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResult extends $tea.Model {
    hasMore?: boolean;
    items?: SearchResponseBodySpaceResultItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    copyDentry(spaceId: string, dentryId: string, request: CopyDentryRequest): Promise<CopyDentryResponse>;
    copyDentryWithOptions(spaceId: string, dentryId: string, request: CopyDentryRequest, headers: CopyDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CopyDentryResponse>;
    createDentry(spaceId: string, request: CreateDentryRequest): Promise<CreateDentryResponse>;
    createDentryWithOptions(spaceId: string, request: CreateDentryRequest, headers: CreateDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDentryResponse>;
    getSpaceDirectories(spaceId: string, request: GetSpaceDirectoriesRequest): Promise<GetSpaceDirectoriesResponse>;
    getSpaceDirectoriesWithOptions(spaceId: string, request: GetSpaceDirectoriesRequest, headers: GetSpaceDirectoriesHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceDirectoriesResponse>;
    getUserInfoByOpenToken(request: GetUserInfoByOpenTokenRequest): Promise<GetUserInfoByOpenTokenResponse>;
    getUserInfoByOpenTokenWithOptions(request: GetUserInfoByOpenTokenRequest, headers: GetUserInfoByOpenTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserInfoByOpenTokenResponse>;
    moveDentry(spaceId: string, dentryId: string, request: MoveDentryRequest): Promise<MoveDentryResponse>;
    moveDentryWithOptions(spaceId: string, dentryId: string, request: MoveDentryRequest, headers: MoveDentryHeaders, runtime: $Util.RuntimeOptions): Promise<MoveDentryResponse>;
    queryDentry(spaceId: string, dentryId: string, request: QueryDentryRequest): Promise<QueryDentryResponse>;
    queryDentryWithOptions(spaceId: string, dentryId: string, request: QueryDentryRequest, headers: QueryDentryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDentryResponse>;
    queryMineSpace(unionId: string): Promise<QueryMineSpaceResponse>;
    queryMineSpaceWithOptions(unionId: string, headers: QueryMineSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMineSpaceResponse>;
    queryRecentList(request: QueryRecentListRequest): Promise<QueryRecentListResponse>;
    queryRecentListWithOptions(request: QueryRecentListRequest, headers: QueryRecentListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRecentListResponse>;
    querySpace(spaceId: string, request: QuerySpaceRequest): Promise<QuerySpaceResponse>;
    querySpaceWithOptions(spaceId: string, request: QuerySpaceRequest, headers: QuerySpaceHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySpaceResponse>;
    relatedSpaces(request: RelatedSpacesRequest): Promise<RelatedSpacesResponse>;
    relatedSpacesWithOptions(request: RelatedSpacesRequest, headers: RelatedSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<RelatedSpacesResponse>;
    renameDentry(spaceId: string, dentryId: string, request: RenameDentryRequest): Promise<RenameDentryResponse>;
    renameDentryWithOptions(spaceId: string, dentryId: string, request: RenameDentryRequest, headers: RenameDentryHeaders, runtime: $Util.RuntimeOptions): Promise<RenameDentryResponse>;
    search(request: SearchRequest): Promise<SearchResponse>;
    searchWithOptions(request: SearchRequest, headers: SearchHeaders, runtime: $Util.RuntimeOptions): Promise<SearchResponse>;
}
