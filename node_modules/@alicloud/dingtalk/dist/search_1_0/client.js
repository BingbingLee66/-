"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BatchInsertSearchItemHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchInsertSearchItemHeaders = BatchInsertSearchItemHeaders;
class BatchInsertSearchItemRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchItemModels: 'searchItemModels',
        };
    }
    static types() {
        return {
            searchItemModels: { 'type': 'array', 'itemType': BatchInsertSearchItemRequestSearchItemModels },
        };
    }
}
exports.BatchInsertSearchItemRequest = BatchInsertSearchItemRequest;
class BatchInsertSearchItemResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.BatchInsertSearchItemResponse = BatchInsertSearchItemResponse;
class CreateSearchTabHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSearchTabHeaders = CreateSearchTabHeaders;
class CreateSearchTabRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            priority: 'priority',
            source: 'source',
            status: 'status',
        };
    }
    static types() {
        return {
            name: 'string',
            priority: 'number',
            source: 'string',
            status: 'number',
        };
    }
}
exports.CreateSearchTabRequest = CreateSearchTabRequest;
class CreateSearchTabResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tabId: 'tabId',
        };
    }
    static types() {
        return {
            tabId: 'number',
        };
    }
}
exports.CreateSearchTabResponseBody = CreateSearchTabResponseBody;
class CreateSearchTabResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSearchTabResponseBody,
        };
    }
}
exports.CreateSearchTabResponse = CreateSearchTabResponse;
class DeleteSearchItemHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteSearchItemHeaders = DeleteSearchItemHeaders;
class DeleteSearchItemResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.DeleteSearchItemResponse = DeleteSearchItemResponse;
class DeleteSearchTabHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteSearchTabHeaders = DeleteSearchTabHeaders;
class DeleteSearchTabResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.DeleteSearchTabResponse = DeleteSearchTabResponse;
class GetSearchItemHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSearchItemHeaders = GetSearchItemHeaders;
class GetSearchItemResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            footer: 'footer',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            icon: 'icon',
            itemId: 'itemId',
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            summary: 'summary',
            tabId: 'tabId',
            title: 'title',
            url: 'url',
        };
    }
    static types() {
        return {
            footer: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            icon: 'string',
            itemId: 'string',
            mobileUrl: 'string',
            pcUrl: 'string',
            summary: 'string',
            tabId: 'number',
            title: 'string',
            url: 'string',
        };
    }
}
exports.GetSearchItemResponseBody = GetSearchItemResponseBody;
class GetSearchItemResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSearchItemResponseBody,
        };
    }
}
exports.GetSearchItemResponse = GetSearchItemResponse;
class GetSearchItemsByKeyWordHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSearchItemsByKeyWordHeaders = GetSearchItemsByKeyWordHeaders;
class GetSearchItemsByKeyWordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyWord: 'keyWord',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            keyWord: 'string',
            maxResults: 'number',
            nextToken: 'string',
        };
    }
}
exports.GetSearchItemsByKeyWordRequest = GetSearchItemsByKeyWordRequest;
class GetSearchItemsByKeyWordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            totalCount: 'totalCount',
            value: 'value',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            totalCount: 'number',
            value: { 'type': 'array', 'itemType': GetSearchItemsByKeyWordResponseBodyValue },
        };
    }
}
exports.GetSearchItemsByKeyWordResponseBody = GetSearchItemsByKeyWordResponseBody;
class GetSearchItemsByKeyWordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSearchItemsByKeyWordResponseBody,
        };
    }
}
exports.GetSearchItemsByKeyWordResponse = GetSearchItemsByKeyWordResponse;
class GetSearchTabHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSearchTabHeaders = GetSearchTabHeaders;
class GetSearchTabResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            name: 'name',
            priority: 'priority',
            source: 'source',
            status: 'status',
            tabId: 'tabId',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtModified: 'string',
            name: 'string',
            priority: 'number',
            source: 'string',
            status: 'number',
            tabId: 'number',
        };
    }
}
exports.GetSearchTabResponseBody = GetSearchTabResponseBody;
class GetSearchTabResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSearchTabResponseBody,
        };
    }
}
exports.GetSearchTabResponse = GetSearchTabResponse;
class InsertSearchItemHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InsertSearchItemHeaders = InsertSearchItemHeaders;
class InsertSearchItemRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            footer: 'footer',
            icon: 'icon',
            itemId: 'itemId',
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            summary: 'summary',
            title: 'title',
            url: 'url',
        };
    }
    static types() {
        return {
            footer: 'string',
            icon: 'string',
            itemId: 'string',
            mobileUrl: 'string',
            pcUrl: 'string',
            summary: 'string',
            title: 'string',
            url: 'string',
        };
    }
}
exports.InsertSearchItemRequest = InsertSearchItemRequest;
class InsertSearchItemResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.InsertSearchItemResponse = InsertSearchItemResponse;
class ListSearchTabsByOrgIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListSearchTabsByOrgIdHeaders = ListSearchTabsByOrgIdHeaders;
class ListSearchTabsByOrgIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchTabResult: 'searchTabResult',
        };
    }
    static types() {
        return {
            searchTabResult: { 'type': 'array', 'itemType': ListSearchTabsByOrgIdResponseBodySearchTabResult },
        };
    }
}
exports.ListSearchTabsByOrgIdResponseBody = ListSearchTabsByOrgIdResponseBody;
class ListSearchTabsByOrgIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListSearchTabsByOrgIdResponseBody,
        };
    }
}
exports.ListSearchTabsByOrgIdResponse = ListSearchTabsByOrgIdResponse;
class UpdateSearchTabHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateSearchTabHeaders = UpdateSearchTabHeaders;
class UpdateSearchTabRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            priority: 'priority',
            source: 'source',
            status: 'status',
        };
    }
    static types() {
        return {
            name: 'string',
            priority: 'number',
            source: 'string',
            status: 'number',
        };
    }
}
exports.UpdateSearchTabRequest = UpdateSearchTabRequest;
class UpdateSearchTabResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateSearchTabResponse = UpdateSearchTabResponse;
class BatchInsertSearchItemRequestSearchItemModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            footer: 'footer',
            icon: 'icon',
            itemId: 'itemId',
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            summary: 'summary',
            title: 'title',
            url: 'url',
        };
    }
    static types() {
        return {
            footer: 'string',
            icon: 'string',
            itemId: 'string',
            mobileUrl: 'string',
            pcUrl: 'string',
            summary: 'string',
            title: 'string',
            url: 'string',
        };
    }
}
exports.BatchInsertSearchItemRequestSearchItemModels = BatchInsertSearchItemRequestSearchItemModels;
class GetSearchItemsByKeyWordResponseBodyValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            footer: 'footer',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            icon: 'icon',
            itemId: 'itemId',
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            summary: 'summary',
            tabId: 'tabId',
            title: 'title',
            url: 'url',
        };
    }
    static types() {
        return {
            footer: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            icon: 'string',
            itemId: 'string',
            mobileUrl: 'string',
            pcUrl: 'string',
            summary: 'string',
            tabId: 'number',
            title: 'string',
            url: 'string',
        };
    }
}
exports.GetSearchItemsByKeyWordResponseBodyValue = GetSearchItemsByKeyWordResponseBodyValue;
class ListSearchTabsByOrgIdResponseBodySearchTabResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            name: 'name',
            priority: 'priority',
            source: 'source',
            status: 'status',
            tabId: 'tabId',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtModified: 'string',
            name: 'string',
            priority: 'number',
            source: 'string',
            status: 'number',
            tabId: 'number',
        };
    }
}
exports.ListSearchTabsByOrgIdResponseBodySearchTabResult = ListSearchTabsByOrgIdResponseBodySearchTabResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async batchInsertSearchItem(tabId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchInsertSearchItemHeaders({});
        return await this.batchInsertSearchItemWithOptions(tabId, request, headers, runtime);
    }
    async batchInsertSearchItemWithOptions(tabId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.searchItemModels)) {
            body["searchItemModels"] = request.searchItemModels;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("BatchInsertSearchItem", "search_1.0", "HTTP", "POST", "AK", `/v1.0/search/tabs/${tabId}/items/batch`, "none", req, runtime), new BatchInsertSearchItemResponse({}));
    }
    async createSearchTab(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSearchTabHeaders({});
        return await this.createSearchTabWithOptions(request, headers, runtime);
    }
    async createSearchTabWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.source)) {
            body["source"] = request.source;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateSearchTab", "search_1.0", "HTTP", "POST", "AK", `/v1.0/search/tabs`, "json", req, runtime), new CreateSearchTabResponse({}));
    }
    async deleteSearchItem(tabId, itemId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteSearchItemHeaders({});
        return await this.deleteSearchItemWithOptions(tabId, itemId, headers, runtime);
    }
    async deleteSearchItemWithOptions(tabId, itemId, headers, runtime) {
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        itemId = openapi_util_1.default.getEncodeParam(itemId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("DeleteSearchItem", "search_1.0", "HTTP", "DELETE", "AK", `/v1.0/search/tabs/${tabId}/items/${itemId}`, "none", req, runtime), new DeleteSearchItemResponse({}));
    }
    async deleteSearchTab(tabId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteSearchTabHeaders({});
        return await this.deleteSearchTabWithOptions(tabId, headers, runtime);
    }
    async deleteSearchTabWithOptions(tabId, headers, runtime) {
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("DeleteSearchTab", "search_1.0", "HTTP", "DELETE", "AK", `/v1.0/search/tabs/${tabId}`, "none", req, runtime), new DeleteSearchTabResponse({}));
    }
    async getSearchItem(tabId, itemId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSearchItemHeaders({});
        return await this.getSearchItemWithOptions(tabId, itemId, headers, runtime);
    }
    async getSearchItemWithOptions(tabId, itemId, headers, runtime) {
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        itemId = openapi_util_1.default.getEncodeParam(itemId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetSearchItem", "search_1.0", "HTTP", "GET", "AK", `/v1.0/search/tabs/${tabId}/items/${itemId}`, "json", req, runtime), new GetSearchItemResponse({}));
    }
    async getSearchItemsByKeyWord(tabId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSearchItemsByKeyWordHeaders({});
        return await this.getSearchItemsByKeyWordWithOptions(tabId, request, headers, runtime);
    }
    async getSearchItemsByKeyWordWithOptions(tabId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.keyWord)) {
            query["keyWord"] = request.keyWord;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetSearchItemsByKeyWord", "search_1.0", "HTTP", "GET", "AK", `/v1.0/search/tabs/${tabId}/items`, "json", req, runtime), new GetSearchItemsByKeyWordResponse({}));
    }
    async getSearchTab(tabId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSearchTabHeaders({});
        return await this.getSearchTabWithOptions(tabId, headers, runtime);
    }
    async getSearchTabWithOptions(tabId, headers, runtime) {
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetSearchTab", "search_1.0", "HTTP", "GET", "AK", `/v1.0/search/tabs/${tabId}`, "json", req, runtime), new GetSearchTabResponse({}));
    }
    async insertSearchItem(tabId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertSearchItemHeaders({});
        return await this.insertSearchItemWithOptions(tabId, request, headers, runtime);
    }
    async insertSearchItemWithOptions(tabId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.footer)) {
            body["footer"] = request.footer;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.itemId)) {
            body["itemId"] = request.itemId;
        }
        if (!tea_util_1.default.isUnset(request.mobileUrl)) {
            body["mobileUrl"] = request.mobileUrl;
        }
        if (!tea_util_1.default.isUnset(request.pcUrl)) {
            body["pcUrl"] = request.pcUrl;
        }
        if (!tea_util_1.default.isUnset(request.summary)) {
            body["summary"] = request.summary;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            body["url"] = request.url;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("InsertSearchItem", "search_1.0", "HTTP", "POST", "AK", `/v1.0/search/tabs/${tabId}/items`, "none", req, runtime), new InsertSearchItemResponse({}));
    }
    async listSearchTabsByOrgId() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSearchTabsByOrgIdHeaders({});
        return await this.listSearchTabsByOrgIdWithOptions(headers, runtime);
    }
    async listSearchTabsByOrgIdWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("ListSearchTabsByOrgId", "search_1.0", "HTTP", "GET", "AK", `/v1.0/search/tabs`, "json", req, runtime), new ListSearchTabsByOrgIdResponse({}));
    }
    async updateSearchTab(tabId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateSearchTabHeaders({});
        return await this.updateSearchTabWithOptions(tabId, request, headers, runtime);
    }
    async updateSearchTabWithOptions(tabId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        tabId = openapi_util_1.default.getEncodeParam(tabId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.source)) {
            body["source"] = request.source;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateSearchTab", "search_1.0", "HTTP", "PUT", "AK", `/v1.0/search/tabs/${tabId}`, "none", req, runtime), new UpdateSearchTabResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map