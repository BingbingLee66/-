"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddWorkspaceDocMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddWorkspaceDocMembersHeaders = AddWorkspaceDocMembersHeaders;
class AddWorkspaceDocMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': AddWorkspaceDocMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.AddWorkspaceDocMembersRequest = AddWorkspaceDocMembersRequest;
class AddWorkspaceDocMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.AddWorkspaceDocMembersResponse = AddWorkspaceDocMembersResponse;
class AddWorkspaceMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddWorkspaceMembersHeaders = AddWorkspaceMembersHeaders;
class AddWorkspaceMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': AddWorkspaceMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.AddWorkspaceMembersRequest = AddWorkspaceMembersRequest;
class AddWorkspaceMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notInOrgList: 'notInOrgList',
        };
    }
    static types() {
        return {
            notInOrgList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.AddWorkspaceMembersResponseBody = AddWorkspaceMembersResponseBody;
class AddWorkspaceMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddWorkspaceMembersResponseBody,
        };
    }
}
exports.AddWorkspaceMembersResponse = AddWorkspaceMembersResponse;
class AppendRowsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AppendRowsHeaders = AppendRowsHeaders;
class AppendRowsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            values: 'values',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            values: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            operatorId: 'string',
        };
    }
}
exports.AppendRowsRequest = AppendRowsRequest;
class AppendRowsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.AppendRowsResponse = AppendRowsResponse;
class BatchGetWorkspaceDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsHeaders = BatchGetWorkspaceDocsHeaders;
class BatchGetWorkspaceDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeIds: 'nodeIds',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            nodeIds: { 'type': 'array', 'itemType': 'string' },
            operatorId: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsRequest = BatchGetWorkspaceDocsRequest;
class BatchGetWorkspaceDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': BatchGetWorkspaceDocsResponseBodyResult },
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBody = BatchGetWorkspaceDocsResponseBody;
class BatchGetWorkspaceDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetWorkspaceDocsResponseBody,
        };
    }
}
exports.BatchGetWorkspaceDocsResponse = BatchGetWorkspaceDocsResponse;
class BatchGetWorkspacesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchGetWorkspacesHeaders = BatchGetWorkspacesHeaders;
class BatchGetWorkspacesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            includeRecent: 'includeRecent',
            operatorId: 'operatorId',
            workspaceIds: 'workspaceIds',
        };
    }
    static types() {
        return {
            includeRecent: 'boolean',
            operatorId: 'string',
            workspaceIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchGetWorkspacesRequest = BatchGetWorkspacesRequest;
class BatchGetWorkspacesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            workspaces: 'workspaces',
        };
    }
    static types() {
        return {
            workspaces: { 'type': 'array', 'itemType': BatchGetWorkspacesResponseBodyWorkspaces },
        };
    }
}
exports.BatchGetWorkspacesResponseBody = BatchGetWorkspacesResponseBody;
class BatchGetWorkspacesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetWorkspacesResponseBody,
        };
    }
}
exports.BatchGetWorkspacesResponse = BatchGetWorkspacesResponse;
class CreateSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSheetHeaders = CreateSheetHeaders;
class CreateSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            name: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateSheetRequest = CreateSheetRequest;
class CreateSheetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
            visibility: 'string',
        };
    }
}
exports.CreateSheetResponseBody = CreateSheetResponseBody;
class CreateSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSheetResponseBody,
        };
    }
}
exports.CreateSheetResponse = CreateSheetResponse;
class CreateWorkspaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateWorkspaceHeaders = CreateWorkspaceHeaders;
class CreateWorkspaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            name: 'name',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            description: 'string',
            name: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateWorkspaceRequest = CreateWorkspaceRequest;
class CreateWorkspaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            name: 'name',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            description: 'string',
            name: 'string',
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateWorkspaceResponseBody = CreateWorkspaceResponseBody;
class CreateWorkspaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateWorkspaceResponseBody,
        };
    }
}
exports.CreateWorkspaceResponse = CreateWorkspaceResponse;
class CreateWorkspaceDocHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateWorkspaceDocHeaders = CreateWorkspaceDocHeaders;
class CreateWorkspaceDocRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docType: 'docType',
            name: 'name',
            operatorId: 'operatorId',
            parentNodeId: 'parentNodeId',
            templateId: 'templateId',
            templateType: 'templateType',
        };
    }
    static types() {
        return {
            docType: 'string',
            name: 'string',
            operatorId: 'string',
            parentNodeId: 'string',
            templateId: 'string',
            templateType: 'string',
        };
    }
}
exports.CreateWorkspaceDocRequest = CreateWorkspaceDocRequest;
class CreateWorkspaceDocResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docKey: 'docKey',
            nodeId: 'nodeId',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            docKey: 'string',
            nodeId: 'string',
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateWorkspaceDocResponseBody = CreateWorkspaceDocResponseBody;
class CreateWorkspaceDocResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateWorkspaceDocResponseBody,
        };
    }
}
exports.CreateWorkspaceDocResponse = CreateWorkspaceDocResponse;
class DeleteSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteSheetHeaders = DeleteSheetHeaders;
class DeleteSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DeleteSheetRequest = DeleteSheetRequest;
class DeleteSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.DeleteSheetResponse = DeleteSheetResponse;
class DeleteWorkspaceDocHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteWorkspaceDocHeaders = DeleteWorkspaceDocHeaders;
class DeleteWorkspaceDocRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DeleteWorkspaceDocRequest = DeleteWorkspaceDocRequest;
class DeleteWorkspaceDocResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.DeleteWorkspaceDocResponse = DeleteWorkspaceDocResponse;
class DeleteWorkspaceDocMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteWorkspaceDocMembersHeaders = DeleteWorkspaceDocMembersHeaders;
class DeleteWorkspaceDocMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': DeleteWorkspaceDocMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.DeleteWorkspaceDocMembersRequest = DeleteWorkspaceDocMembersRequest;
class DeleteWorkspaceDocMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.DeleteWorkspaceDocMembersResponse = DeleteWorkspaceDocMembersResponse;
class DeleteWorkspaceMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteWorkspaceMembersHeaders = DeleteWorkspaceMembersHeaders;
class DeleteWorkspaceMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': DeleteWorkspaceMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.DeleteWorkspaceMembersRequest = DeleteWorkspaceMembersRequest;
class DeleteWorkspaceMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.DeleteWorkspaceMembersResponse = DeleteWorkspaceMembersResponse;
class GetRangeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRangeHeaders = GetRangeHeaders;
class GetRangeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.GetRangeRequest = GetRangeRequest;
class GetRangeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundColors: 'backgroundColors',
            displayValues: 'displayValues',
            formulas: 'formulas',
            values: 'values',
        };
    }
    static types() {
        return {
            backgroundColors: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': GetRangeResponseBodyBackgroundColors } },
            displayValues: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            formulas: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            values: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'any' } },
        };
    }
}
exports.GetRangeResponseBody = GetRangeResponseBody;
class GetRangeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetRangeResponseBody,
        };
    }
}
exports.GetRangeResponse = GetRangeResponse;
class GetRecentEditDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRecentEditDocsHeaders = GetRecentEditDocsHeaders;
class GetRecentEditDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
        };
    }
}
exports.GetRecentEditDocsRequest = GetRecentEditDocsRequest;
class GetRecentEditDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            recentList: 'recentList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            recentList: { 'type': 'array', 'itemType': GetRecentEditDocsResponseBodyRecentList },
        };
    }
}
exports.GetRecentEditDocsResponseBody = GetRecentEditDocsResponseBody;
class GetRecentEditDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetRecentEditDocsResponseBody,
        };
    }
}
exports.GetRecentEditDocsResponse = GetRecentEditDocsResponse;
class GetRecentOpenDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRecentOpenDocsHeaders = GetRecentOpenDocsHeaders;
class GetRecentOpenDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
        };
    }
}
exports.GetRecentOpenDocsRequest = GetRecentOpenDocsRequest;
class GetRecentOpenDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            recentList: 'recentList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            recentList: { 'type': 'array', 'itemType': GetRecentOpenDocsResponseBodyRecentList },
        };
    }
}
exports.GetRecentOpenDocsResponseBody = GetRecentOpenDocsResponseBody;
class GetRecentOpenDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetRecentOpenDocsResponseBody,
        };
    }
}
exports.GetRecentOpenDocsResponse = GetRecentOpenDocsResponse;
class GetRelatedWorkspacesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRelatedWorkspacesHeaders = GetRelatedWorkspacesHeaders;
class GetRelatedWorkspacesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            includeRecent: 'includeRecent',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            includeRecent: 'boolean',
            operatorId: 'string',
        };
    }
}
exports.GetRelatedWorkspacesRequest = GetRelatedWorkspacesRequest;
class GetRelatedWorkspacesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            workspaces: 'workspaces',
        };
    }
    static types() {
        return {
            workspaces: { 'type': 'array', 'itemType': GetRelatedWorkspacesResponseBodyWorkspaces },
        };
    }
}
exports.GetRelatedWorkspacesResponseBody = GetRelatedWorkspacesResponseBody;
class GetRelatedWorkspacesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetRelatedWorkspacesResponseBody,
        };
    }
}
exports.GetRelatedWorkspacesResponse = GetRelatedWorkspacesResponse;
class GetSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSheetHeaders = GetSheetHeaders;
class GetSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.GetSheetRequest = GetSheetRequest;
class GetSheetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            columnCount: 'columnCount',
            lastNonEmptyColumn: 'lastNonEmptyColumn',
            lastNonEmptyRow: 'lastNonEmptyRow',
            name: 'name',
            rowCount: 'rowCount',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            columnCount: 'number',
            lastNonEmptyColumn: 'number',
            lastNonEmptyRow: 'number',
            name: 'string',
            rowCount: 'number',
            visibility: 'string',
        };
    }
}
exports.GetSheetResponseBody = GetSheetResponseBody;
class GetSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSheetResponseBody,
        };
    }
}
exports.GetSheetResponse = GetSheetResponse;
class GetTemplateByIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTemplateByIdHeaders = GetTemplateByIdHeaders;
class GetTemplateByIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            belong: 'belong',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            belong: 'string',
            operatorId: 'string',
        };
    }
}
exports.GetTemplateByIdRequest = GetTemplateByIdRequest;
class GetTemplateByIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coverUrl: 'coverUrl',
            createTime: 'createTime',
            docType: 'docType',
            id: 'id',
            templateType: 'templateType',
            title: 'title',
            updateTime: 'updateTime',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            createTime: 'number',
            docType: 'string',
            id: 'string',
            templateType: 'string',
            title: 'string',
            updateTime: 'number',
            workspaceId: 'string',
        };
    }
}
exports.GetTemplateByIdResponseBody = GetTemplateByIdResponseBody;
class GetTemplateByIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetTemplateByIdResponseBody,
        };
    }
}
exports.GetTemplateByIdResponse = GetTemplateByIdResponse;
class GetWorkspaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetWorkspaceHeaders = GetWorkspaceHeaders;
class GetWorkspaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            isDeleted: 'isDeleted',
            owner: 'owner',
            url: 'url',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isDeleted: 'boolean',
            owner: 'string',
            url: 'string',
        };
    }
}
exports.GetWorkspaceResponseBody = GetWorkspaceResponseBody;
class GetWorkspaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetWorkspaceResponseBody,
        };
    }
}
exports.GetWorkspaceResponse = GetWorkspaceResponse;
class GetWorkspaceNodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetWorkspaceNodeHeaders = GetWorkspaceNodeHeaders;
class GetWorkspaceNodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.GetWorkspaceNodeRequest = GetWorkspaceNodeRequest;
class GetWorkspaceNodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasPermission: 'hasPermission',
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            hasPermission: 'boolean',
            nodeBO: GetWorkspaceNodeResponseBodyNodeBO,
            workspaceBO: GetWorkspaceNodeResponseBodyWorkspaceBO,
        };
    }
}
exports.GetWorkspaceNodeResponseBody = GetWorkspaceNodeResponseBody;
class GetWorkspaceNodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetWorkspaceNodeResponseBody,
        };
    }
}
exports.GetWorkspaceNodeResponse = GetWorkspaceNodeResponse;
class InsertBlocksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InsertBlocksHeaders = InsertBlocksHeaders;
class InsertBlocksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blocks: 'blocks',
            location: 'location',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            blocks: { 'type': 'array', 'itemType': InsertBlocksRequestBlocks },
            location: InsertBlocksRequestLocation,
            operatorId: 'string',
        };
    }
}
exports.InsertBlocksRequest = InsertBlocksRequest;
class InsertBlocksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.InsertBlocksResponse = InsertBlocksResponse;
class ListTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListTemplateHeaders = ListTemplateHeaders;
class ListTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
            templateType: 'templateType',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
            templateType: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListTemplateRequest = ListTemplateRequest;
class ListTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'string',
            templateList: { 'type': 'array', 'itemType': ListTemplateResponseBodyTemplateList },
        };
    }
}
exports.ListTemplateResponseBody = ListTemplateResponseBody;
class ListTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListTemplateResponseBody,
        };
    }
}
exports.ListTemplateResponse = ListTemplateResponse;
class RangeFindNextHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RangeFindNextHeaders = RangeFindNextHeaders;
class RangeFindNextRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            findOptions: 'findOptions',
            text: 'text',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            findOptions: RangeFindNextRequestFindOptions,
            text: 'string',
            operatorId: 'string',
        };
    }
}
exports.RangeFindNextRequest = RangeFindNextRequest;
class RangeFindNextResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.RangeFindNextResponseBody = RangeFindNextResponseBody;
class RangeFindNextResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RangeFindNextResponseBody,
        };
    }
}
exports.RangeFindNextResponse = RangeFindNextResponse;
class SearchWorkspaceDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchWorkspaceDocsHeaders = SearchWorkspaceDocsHeaders;
class SearchWorkspaceDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyword: 'keyword',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            keyword: 'string',
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.SearchWorkspaceDocsRequest = SearchWorkspaceDocsRequest;
class SearchWorkspaceDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docs: 'docs',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            docs: { 'type': 'array', 'itemType': SearchWorkspaceDocsResponseBodyDocs },
            hasMore: 'boolean',
            nextToken: 'string',
        };
    }
}
exports.SearchWorkspaceDocsResponseBody = SearchWorkspaceDocsResponseBody;
class SearchWorkspaceDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SearchWorkspaceDocsResponseBody,
        };
    }
}
exports.SearchWorkspaceDocsResponse = SearchWorkspaceDocsResponse;
class UpdateRangeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateRangeHeaders = UpdateRangeHeaders;
class UpdateRangeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundColors: 'backgroundColors',
            hyperlinks: 'hyperlinks',
            values: 'values',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            backgroundColors: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            hyperlinks: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': UpdateRangeRequestHyperlinks } },
            values: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            operatorId: 'string',
        };
    }
}
exports.UpdateRangeRequest = UpdateRangeRequest;
class UpdateRangeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateRangeResponse = UpdateRangeResponse;
class UpdateSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateSheetHeaders = UpdateSheetHeaders;
class UpdateSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            visibility: 'visibility',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            name: 'string',
            visibility: 'string',
            operatorId: 'string',
        };
    }
}
exports.UpdateSheetRequest = UpdateSheetRequest;
class UpdateSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateSheetResponse = UpdateSheetResponse;
class UpdateWorkspaceDocMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateWorkspaceDocMembersHeaders = UpdateWorkspaceDocMembersHeaders;
class UpdateWorkspaceDocMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': UpdateWorkspaceDocMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.UpdateWorkspaceDocMembersRequest = UpdateWorkspaceDocMembersRequest;
class UpdateWorkspaceDocMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateWorkspaceDocMembersResponse = UpdateWorkspaceDocMembersResponse;
class UpdateWorkspaceMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateWorkspaceMembersHeaders = UpdateWorkspaceMembersHeaders;
class UpdateWorkspaceMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': UpdateWorkspaceMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.UpdateWorkspaceMembersRequest = UpdateWorkspaceMembersRequest;
class UpdateWorkspaceMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateWorkspaceMembersResponse = UpdateWorkspaceMembersResponse;
class AddWorkspaceDocMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.AddWorkspaceDocMembersRequestMembers = AddWorkspaceDocMembersRequestMembers;
class AddWorkspaceMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.AddWorkspaceMembersRequestMembers = AddWorkspaceMembersRequestMembers;
class BatchGetWorkspaceDocsResponseBodyResultNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deleted: 'deleted',
            docType: 'docType',
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            deleted: 'boolean',
            docType: 'string',
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBodyResultNodeBO = BatchGetWorkspaceDocsResponseBodyResultNodeBO;
class BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            name: 'string',
            workspaceId: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO = BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO;
class BatchGetWorkspaceDocsResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasPermission: 'hasPermission',
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            hasPermission: 'boolean',
            nodeBO: BatchGetWorkspaceDocsResponseBodyResultNodeBO,
            workspaceBO: BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO,
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBodyResult = BatchGetWorkspaceDocsResponseBodyResult;
class BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            lastEditTime: 'string',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList = BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList;
class BatchGetWorkspacesResponseBodyWorkspacesWorkspace extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            name: 'name',
            orgPublished: 'orgPublished',
            recentList: 'recentList',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            createTime: 'number',
            name: 'string',
            orgPublished: 'boolean',
            recentList: { 'type': 'array', 'itemType': BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList },
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.BatchGetWorkspacesResponseBodyWorkspacesWorkspace = BatchGetWorkspacesResponseBodyWorkspacesWorkspace;
class BatchGetWorkspacesResponseBodyWorkspaces extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasPermission: 'hasPermission',
            workspace: 'workspace',
        };
    }
    static types() {
        return {
            hasPermission: 'boolean',
            workspace: BatchGetWorkspacesResponseBodyWorkspacesWorkspace,
        };
    }
}
exports.BatchGetWorkspacesResponseBodyWorkspaces = BatchGetWorkspacesResponseBodyWorkspaces;
class DeleteWorkspaceDocMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.DeleteWorkspaceDocMembersRequestMembers = DeleteWorkspaceDocMembersRequestMembers;
class DeleteWorkspaceMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.DeleteWorkspaceMembersRequestMembers = DeleteWorkspaceMembersRequestMembers;
class GetRangeResponseBodyBackgroundColors extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            red: 'red',
            green: 'green',
            blue: 'blue',
            hexString: 'hexString',
        };
    }
    static types() {
        return {
            red: 'number',
            green: 'number',
            blue: 'number',
            hexString: 'string',
        };
    }
}
exports.GetRangeResponseBodyBackgroundColors = GetRangeResponseBodyBackgroundColors;
class GetRecentEditDocsResponseBodyRecentListNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            docType: 'docType',
            isDeleted: 'isDeleted',
            lastEditTime: 'lastEditTime',
            nodeId: 'nodeId',
            nodeName: 'nodeName',
            updateTime: 'updateTime',
            url: 'url',
        };
    }
    static types() {
        return {
            createTime: 'number',
            docType: 'string',
            isDeleted: 'boolean',
            lastEditTime: 'number',
            nodeId: 'string',
            nodeName: 'string',
            updateTime: 'number',
            url: 'string',
        };
    }
}
exports.GetRecentEditDocsResponseBodyRecentListNodeBO = GetRecentEditDocsResponseBodyRecentListNodeBO;
class GetRecentEditDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'url',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            url: 'string',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
}
exports.GetRecentEditDocsResponseBodyRecentListWorkspaceBO = GetRecentEditDocsResponseBodyRecentListWorkspaceBO;
class GetRecentEditDocsResponseBodyRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            nodeBO: GetRecentEditDocsResponseBodyRecentListNodeBO,
            workspaceBO: GetRecentEditDocsResponseBodyRecentListWorkspaceBO,
        };
    }
}
exports.GetRecentEditDocsResponseBodyRecentList = GetRecentEditDocsResponseBodyRecentList;
class GetRecentOpenDocsResponseBodyRecentListNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            docType: 'docType',
            isDeleted: 'isDeleted',
            lastOpenTime: 'lastOpenTime',
            nodeId: 'nodeId',
            nodeName: 'nodeName',
            updateTime: 'updateTime',
            url: 'url',
        };
    }
    static types() {
        return {
            createTime: 'number',
            docType: 'string',
            isDeleted: 'boolean',
            lastOpenTime: 'number',
            nodeId: 'string',
            nodeName: 'string',
            updateTime: 'number',
            url: 'string',
        };
    }
}
exports.GetRecentOpenDocsResponseBodyRecentListNodeBO = GetRecentOpenDocsResponseBodyRecentListNodeBO;
class GetRecentOpenDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'url',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            url: 'string',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
}
exports.GetRecentOpenDocsResponseBodyRecentListWorkspaceBO = GetRecentOpenDocsResponseBodyRecentListWorkspaceBO;
class GetRecentOpenDocsResponseBodyRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            nodeBO: GetRecentOpenDocsResponseBodyRecentListNodeBO,
            workspaceBO: GetRecentOpenDocsResponseBodyRecentListWorkspaceBO,
        };
    }
}
exports.GetRecentOpenDocsResponseBodyRecentList = GetRecentOpenDocsResponseBodyRecentList;
class GetRelatedWorkspacesResponseBodyWorkspacesRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.GetRelatedWorkspacesResponseBodyWorkspacesRecentList = GetRelatedWorkspacesResponseBodyWorkspacesRecentList;
class GetRelatedWorkspacesResponseBodyWorkspaces extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            deleted: 'deleted',
            name: 'name',
            owner: 'owner',
            recentList: 'recentList',
            role: 'role',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            createTime: 'number',
            deleted: 'boolean',
            name: 'string',
            owner: 'string',
            recentList: { 'type': 'array', 'itemType': GetRelatedWorkspacesResponseBodyWorkspacesRecentList },
            role: 'string',
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.GetRelatedWorkspacesResponseBodyWorkspaces = GetRelatedWorkspacesResponseBodyWorkspaces;
class GetWorkspaceNodeResponseBodyNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docType: 'docType',
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            docType: 'string',
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.GetWorkspaceNodeResponseBodyNodeBO = GetWorkspaceNodeResponseBodyNodeBO;
class GetWorkspaceNodeResponseBodyWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            name: 'string',
            workspaceId: 'string',
        };
    }
}
exports.GetWorkspaceNodeResponseBodyWorkspaceBO = GetWorkspaceNodeResponseBodyWorkspaceBO;
class InsertBlocksRequestBlocksParagraphChildrenTextTextStyle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bold: 'bold',
            dataType: 'dataType',
            fontSize: 'fontSize',
            sizeUnit: 'sizeUnit',
        };
    }
    static types() {
        return {
            bold: 'boolean',
            dataType: 'string',
            fontSize: 'number',
            sizeUnit: 'string',
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphChildrenTextTextStyle = InsertBlocksRequestBlocksParagraphChildrenTextTextStyle;
class InsertBlocksRequestBlocksParagraphChildrenText extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            textStyle: 'textStyle',
        };
    }
    static types() {
        return {
            content: 'string',
            textStyle: InsertBlocksRequestBlocksParagraphChildrenTextTextStyle,
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphChildrenText = InsertBlocksRequestBlocksParagraphChildrenText;
class InsertBlocksRequestBlocksParagraphChildren extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            elementType: 'elementType',
            text: 'text',
        };
    }
    static types() {
        return {
            elementType: 'string',
            text: InsertBlocksRequestBlocksParagraphChildrenText,
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphChildren = InsertBlocksRequestBlocksParagraphChildren;
class InsertBlocksRequestBlocksParagraphStyle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headingLevel: 'headingLevel',
        };
    }
    static types() {
        return {
            headingLevel: 'string',
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphStyle = InsertBlocksRequestBlocksParagraphStyle;
class InsertBlocksRequestBlocksParagraph extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            children: 'children',
            style: 'style',
        };
    }
    static types() {
        return {
            children: { 'type': 'array', 'itemType': InsertBlocksRequestBlocksParagraphChildren },
            style: InsertBlocksRequestBlocksParagraphStyle,
        };
    }
}
exports.InsertBlocksRequestBlocksParagraph = InsertBlocksRequestBlocksParagraph;
class InsertBlocksRequestBlocks extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blockType: 'blockType',
            paragraph: 'paragraph',
        };
    }
    static types() {
        return {
            blockType: 'string',
            paragraph: InsertBlocksRequestBlocksParagraph,
        };
    }
}
exports.InsertBlocksRequestBlocks = InsertBlocksRequestBlocks;
class InsertBlocksRequestLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            head: 'head',
        };
    }
    static types() {
        return {
            head: 'boolean',
        };
    }
}
exports.InsertBlocksRequestLocation = InsertBlocksRequestLocation;
class ListTemplateResponseBodyTemplateList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coverUrl: 'coverUrl',
            createTime: 'createTime',
            docType: 'docType',
            id: 'id',
            templateType: 'templateType',
            title: 'title',
            updateTime: 'updateTime',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            createTime: 'number',
            docType: 'string',
            id: 'string',
            templateType: 'string',
            title: 'string',
            updateTime: 'number',
            workspaceId: 'string',
        };
    }
}
exports.ListTemplateResponseBodyTemplateList = ListTemplateResponseBodyTemplateList;
class RangeFindNextRequestFindOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            matchCase: 'matchCase',
            matchEntireCell: 'matchEntireCell',
            matchFormulaText: 'matchFormulaText',
            scope: 'scope',
            useRegExp: 'useRegExp',
        };
    }
    static types() {
        return {
            matchCase: 'boolean',
            matchEntireCell: 'boolean',
            matchFormulaText: 'boolean',
            scope: 'string',
            useRegExp: 'boolean',
        };
    }
}
exports.RangeFindNextRequestFindOptions = RangeFindNextRequestFindOptions;
class SearchWorkspaceDocsResponseBodyDocsNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docType: 'docType',
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            originName: 'originName',
            url: 'url',
        };
    }
    static types() {
        return {
            docType: 'string',
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            originName: 'string',
            url: 'string',
        };
    }
}
exports.SearchWorkspaceDocsResponseBodyDocsNodeBO = SearchWorkspaceDocsResponseBodyDocsNodeBO;
class SearchWorkspaceDocsResponseBodyDocsWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            name: 'string',
            workspaceId: 'string',
        };
    }
}
exports.SearchWorkspaceDocsResponseBodyDocsWorkspaceBO = SearchWorkspaceDocsResponseBodyDocsWorkspaceBO;
class SearchWorkspaceDocsResponseBodyDocs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            nodeBO: SearchWorkspaceDocsResponseBodyDocsNodeBO,
            workspaceBO: SearchWorkspaceDocsResponseBodyDocsWorkspaceBO,
        };
    }
}
exports.SearchWorkspaceDocsResponseBodyDocs = SearchWorkspaceDocsResponseBodyDocs;
class UpdateRangeRequestHyperlinks extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'type',
            link: 'link',
            text: 'text',
        };
    }
    static types() {
        return {
            type: 'string',
            link: 'string',
            text: 'string',
        };
    }
}
exports.UpdateRangeRequestHyperlinks = UpdateRangeRequestHyperlinks;
class UpdateWorkspaceDocMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.UpdateWorkspaceDocMembersRequestMembers = UpdateWorkspaceDocMembersRequestMembers;
class UpdateWorkspaceMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.UpdateWorkspaceMembersRequestMembers = UpdateWorkspaceMembersRequestMembers;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addWorkspaceDocMembers(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddWorkspaceDocMembersHeaders({});
        return await this.addWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async addWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        nodeId = openapi_util_1.default.getEncodeParam(nodeId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("AddWorkspaceDocMembers", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}/members`, "none", req, runtime), new AddWorkspaceDocMembersResponse({}));
    }
    async addWorkspaceMembers(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddWorkspaceMembersHeaders({});
        return await this.addWorkspaceMembersWithOptions(workspaceId, request, headers, runtime);
    }
    async addWorkspaceMembersWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("AddWorkspaceMembers", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces/${workspaceId}/members`, "json", req, runtime), new AddWorkspaceMembersResponse({}));
    }
    async appendRows(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AppendRowsHeaders({});
        return await this.appendRowsWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async appendRowsWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        sheetId = openapi_util_1.default.getEncodeParam(sheetId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.values)) {
            body["values"] = request.values;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("AppendRows", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/appendRows`, "none", req, runtime), new AppendRowsResponse({}));
    }
    async batchGetWorkspaceDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchGetWorkspaceDocsHeaders({});
        return await this.batchGetWorkspaceDocsWithOptions(request, headers, runtime);
    }
    async batchGetWorkspaceDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.nodeIds)) {
            body["nodeIds"] = request.nodeIds;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("BatchGetWorkspaceDocs", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces/docs/infos/query`, "json", req, runtime), new BatchGetWorkspaceDocsResponse({}));
    }
    async batchGetWorkspaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchGetWorkspacesHeaders({});
        return await this.batchGetWorkspacesWithOptions(request, headers, runtime);
    }
    async batchGetWorkspacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.includeRecent)) {
            body["includeRecent"] = request.includeRecent;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.workspaceIds)) {
            body["workspaceIds"] = request.workspaceIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("BatchGetWorkspaces", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces/infos/query`, "json", req, runtime), new BatchGetWorkspacesResponse({}));
    }
    async createSheet(workbookId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSheetHeaders({});
        return await this.createSheetWithOptions(workbookId, request, headers, runtime);
    }
    async createSheetWithOptions(workbookId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateSheet", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets`, "json", req, runtime), new CreateSheetResponse({}));
    }
    async createWorkspace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateWorkspaceHeaders({});
        return await this.createWorkspaceWithOptions(request, headers, runtime);
    }
    async createWorkspaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateWorkspace", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces`, "json", req, runtime), new CreateWorkspaceResponse({}));
    }
    async createWorkspaceDoc(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateWorkspaceDocHeaders({});
        return await this.createWorkspaceDocWithOptions(workspaceId, request, headers, runtime);
    }
    async createWorkspaceDocWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.docType)) {
            body["docType"] = request.docType;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.parentNodeId)) {
            body["parentNodeId"] = request.parentNodeId;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.templateType)) {
            body["templateType"] = request.templateType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateWorkspaceDoc", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces/${workspaceId}/docs`, "json", req, runtime), new CreateWorkspaceDocResponse({}));
    }
    async deleteSheet(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteSheetHeaders({});
        return await this.deleteSheetWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async deleteSheetWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        sheetId = openapi_util_1.default.getEncodeParam(sheetId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteSheet", "doc_1.0", "HTTP", "DELETE", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}`, "none", req, runtime), new DeleteSheetResponse({}));
    }
    async deleteWorkspaceDoc(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteWorkspaceDocHeaders({});
        return await this.deleteWorkspaceDocWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async deleteWorkspaceDocWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        nodeId = openapi_util_1.default.getEncodeParam(nodeId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteWorkspaceDoc", "doc_1.0", "HTTP", "DELETE", "AK", `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}`, "none", req, runtime), new DeleteWorkspaceDocResponse({}));
    }
    async deleteWorkspaceDocMembers(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteWorkspaceDocMembersHeaders({});
        return await this.deleteWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async deleteWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        nodeId = openapi_util_1.default.getEncodeParam(nodeId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("DeleteWorkspaceDocMembers", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}/members/remove`, "none", req, runtime), new DeleteWorkspaceDocMembersResponse({}));
    }
    async deleteWorkspaceMembers(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteWorkspaceMembersHeaders({});
        return await this.deleteWorkspaceMembersWithOptions(workspaceId, request, headers, runtime);
    }
    async deleteWorkspaceMembersWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("DeleteWorkspaceMembers", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workspaces/${workspaceId}/members/remove`, "none", req, runtime), new DeleteWorkspaceMembersResponse({}));
    }
    async getRange(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRangeHeaders({});
        return await this.getRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async getRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        sheetId = openapi_util_1.default.getEncodeParam(sheetId);
        rangeAddress = openapi_util_1.default.getEncodeParam(rangeAddress);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetRange", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}`, "json", req, runtime), new GetRangeResponse({}));
    }
    async getRecentEditDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecentEditDocsHeaders({});
        return await this.getRecentEditDocsWithOptions(request, headers, runtime);
    }
    async getRecentEditDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetRecentEditDocs", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/workspaces/docs/recentEditDocs`, "json", req, runtime), new GetRecentEditDocsResponse({}));
    }
    async getRecentOpenDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecentOpenDocsHeaders({});
        return await this.getRecentOpenDocsWithOptions(request, headers, runtime);
    }
    async getRecentOpenDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetRecentOpenDocs", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/workspaces/docs/recentOpenDocs`, "json", req, runtime), new GetRecentOpenDocsResponse({}));
    }
    async getRelatedWorkspaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRelatedWorkspacesHeaders({});
        return await this.getRelatedWorkspacesWithOptions(request, headers, runtime);
    }
    async getRelatedWorkspacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.includeRecent)) {
            query["includeRecent"] = request.includeRecent;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetRelatedWorkspaces", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/workspaces`, "json", req, runtime), new GetRelatedWorkspacesResponse({}));
    }
    async getSheet(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSheetHeaders({});
        return await this.getSheetWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async getSheetWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        sheetId = openapi_util_1.default.getEncodeParam(sheetId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetSheet", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}`, "json", req, runtime), new GetSheetResponse({}));
    }
    async getTemplateById(templateId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTemplateByIdHeaders({});
        return await this.getTemplateByIdWithOptions(templateId, request, headers, runtime);
    }
    async getTemplateByIdWithOptions(templateId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        templateId = openapi_util_1.default.getEncodeParam(templateId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.belong)) {
            query["belong"] = request.belong;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetTemplateById", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/templates/${templateId}`, "json", req, runtime), new GetTemplateByIdResponse({}));
    }
    async getWorkspace(workspaceId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetWorkspaceHeaders({});
        return await this.getWorkspaceWithOptions(workspaceId, headers, runtime);
    }
    async getWorkspaceWithOptions(workspaceId, headers, runtime) {
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetWorkspace", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/workspaces/${workspaceId}`, "json", req, runtime), new GetWorkspaceResponse({}));
    }
    async getWorkspaceNode(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetWorkspaceNodeHeaders({});
        return await this.getWorkspaceNodeWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async getWorkspaceNodeWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        nodeId = openapi_util_1.default.getEncodeParam(nodeId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetWorkspaceNode", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}`, "json", req, runtime), new GetWorkspaceNodeResponse({}));
    }
    async insertBlocks(documentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertBlocksHeaders({});
        return await this.insertBlocksWithOptions(documentId, request, headers, runtime);
    }
    async insertBlocksWithOptions(documentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        documentId = openapi_util_1.default.getEncodeParam(documentId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.blocks)) {
            body["blocks"] = request.blocks;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.location))) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("InsertBlocks", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/documents/${documentId}/blocks`, "none", req, runtime), new InsertBlocksResponse({}));
    }
    async listTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListTemplateHeaders({});
        return await this.listTemplateWithOptions(request, headers, runtime);
    }
    async listTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.templateType)) {
            query["templateType"] = request.templateType;
        }
        if (!tea_util_1.default.isUnset(request.workspaceId)) {
            query["workspaceId"] = request.workspaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListTemplate", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/templates`, "json", req, runtime), new ListTemplateResponse({}));
    }
    async rangeFindNext(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RangeFindNextHeaders({});
        return await this.rangeFindNextWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async rangeFindNextWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        sheetId = openapi_util_1.default.getEncodeParam(sheetId);
        rangeAddress = openapi_util_1.default.getEncodeParam(rangeAddress);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset($tea.toMap(request.findOptions))) {
            body["findOptions"] = request.findOptions;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["text"] = request.text;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("RangeFindNext", "doc_1.0", "HTTP", "POST", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/findNext`, "json", req, runtime), new RangeFindNextResponse({}));
    }
    async searchWorkspaceDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchWorkspaceDocsHeaders({});
        return await this.searchWorkspaceDocsWithOptions(request, headers, runtime);
    }
    async searchWorkspaceDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.workspaceId)) {
            query["workspaceId"] = request.workspaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("SearchWorkspaceDocs", "doc_1.0", "HTTP", "GET", "AK", `/v1.0/doc/docs`, "json", req, runtime), new SearchWorkspaceDocsResponse({}));
    }
    async updateRange(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRangeHeaders({});
        return await this.updateRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async updateRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        sheetId = openapi_util_1.default.getEncodeParam(sheetId);
        rangeAddress = openapi_util_1.default.getEncodeParam(rangeAddress);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.backgroundColors)) {
            body["backgroundColors"] = request.backgroundColors;
        }
        if (!tea_util_1.default.isUnset(request.hyperlinks)) {
            body["hyperlinks"] = request.hyperlinks;
        }
        if (!tea_util_1.default.isUnset(request.values)) {
            body["values"] = request.values;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateRange", "doc_1.0", "HTTP", "PUT", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}`, "none", req, runtime), new UpdateRangeResponse({}));
    }
    async updateSheet(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateSheetHeaders({});
        return await this.updateSheetWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async updateSheetWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workbookId = openapi_util_1.default.getEncodeParam(workbookId);
        sheetId = openapi_util_1.default.getEncodeParam(sheetId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.visibility)) {
            body["visibility"] = request.visibility;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateSheet", "doc_1.0", "HTTP", "PUT", "AK", `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}`, "none", req, runtime), new UpdateSheetResponse({}));
    }
    async updateWorkspaceDocMembers(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateWorkspaceDocMembersHeaders({});
        return await this.updateWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async updateWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        nodeId = openapi_util_1.default.getEncodeParam(nodeId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateWorkspaceDocMembers", "doc_1.0", "HTTP", "PUT", "AK", `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}/members`, "none", req, runtime), new UpdateWorkspaceDocMembersResponse({}));
    }
    async updateWorkspaceMembers(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateWorkspaceMembersHeaders({});
        return await this.updateWorkspaceMembersWithOptions(workspaceId, request, headers, runtime);
    }
    async updateWorkspaceMembersWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        workspaceId = openapi_util_1.default.getEncodeParam(workspaceId);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateWorkspaceMembers", "doc_1.0", "HTTP", "PUT", "AK", `/v1.0/doc/workspaces/${workspaceId}/members`, "none", req, runtime), new UpdateWorkspaceMembersResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map