"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class GetDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDeptHeaders = GetDeptHeaders;
class GetDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'language',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            language: 'string',
            subCorpId: 'string',
        };
    }
}
exports.GetDeptRequest = GetDeptRequest;
class GetDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            fromUnionOrg: 'fromUnionOrg',
            order: 'order',
            parentDepartmentId: 'parentDepartmentId',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            departmentName: 'string',
            fromUnionOrg: 'boolean',
            order: 'number',
            parentDepartmentId: 'number',
        };
    }
}
exports.GetDeptResponseBody = GetDeptResponseBody;
class GetDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDeptResponseBody,
        };
    }
}
exports.GetDeptResponse = GetDeptResponse;
class GetResidentDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetResidentDeptHeaders = GetResidentDeptHeaders;
class GetResidentDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            subCorpId: 'string',
        };
    }
}
exports.GetResidentDeptRequest = GetResidentDeptRequest;
class GetResidentDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactType: 'contactType',
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            deptType: 'deptType',
            feature: 'feature',
        };
    }
    static types() {
        return {
            contactType: 'string',
            departmentId: 'number',
            departmentName: 'string',
            deptType: 'string',
            feature: 'string',
        };
    }
}
exports.GetResidentDeptResponseBody = GetResidentDeptResponseBody;
class GetResidentDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetResidentDeptResponseBody,
        };
    }
}
exports.GetResidentDeptResponse = GetResidentDeptResponse;
class GetResidentUserInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetResidentUserInfoHeaders = GetResidentUserInfoHeaders;
class GetResidentUserInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            subCorpId: 'string',
        };
    }
}
exports.GetResidentUserInfoRequest = GetResidentUserInfoRequest;
class GetResidentUserInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            feature: 'feature',
            name: 'name',
            roles: 'roles',
            unionId: 'unionId',
            userid: 'userid',
        };
    }
    static types() {
        return {
            feature: 'string',
            name: 'string',
            roles: { 'type': 'array', 'itemType': GetResidentUserInfoResponseBodyRoles },
            unionId: 'string',
            userid: 'string',
        };
    }
}
exports.GetResidentUserInfoResponseBody = GetResidentUserInfoResponseBody;
class GetResidentUserInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetResidentUserInfoResponseBody,
        };
    }
}
exports.GetResidentUserInfoResponse = GetResidentUserInfoResponse;
class GetUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserHeaders = GetUserHeaders;
class GetUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'language',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            language: 'string',
            subCorpId: 'string',
        };
    }
}
exports.GetUserRequest = GetUserRequest;
class GetUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            admin: 'admin',
            boss: 'boss',
            departmentIdList: 'departmentIdList',
            departmentOrderSet: 'departmentOrderSet',
            exclusiveAccount: 'exclusiveAccount',
            exclusiveAccountType: 'exclusiveAccountType',
            extension: 'extension',
            hiredDate: 'hiredDate',
            jobNumber: 'jobNumber',
            leaderInDepartment: 'leaderInDepartment',
            managerUserId: 'managerUserId',
            name: 'name',
            realAuthed: 'realAuthed',
            remark: 'remark',
            roleList: 'roleList',
            senior: 'senior',
            title: 'title',
            unionEmpExt: 'unionEmpExt',
            unionId: 'unionId',
            userId: 'userId',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            active: 'boolean',
            admin: 'boolean',
            boss: 'boolean',
            departmentIdList: { 'type': 'array', 'itemType': 'number' },
            departmentOrderSet: { 'type': 'array', 'itemType': GetUserResponseBodyDepartmentOrderSet },
            exclusiveAccount: 'boolean',
            exclusiveAccountType: 'string',
            extension: 'string',
            hiredDate: 'number',
            jobNumber: 'string',
            leaderInDepartment: { 'type': 'array', 'itemType': GetUserResponseBodyLeaderInDepartment },
            managerUserId: 'string',
            name: 'string',
            realAuthed: 'boolean',
            remark: 'string',
            roleList: { 'type': 'array', 'itemType': GetUserResponseBodyRoleList },
            senior: 'boolean',
            title: 'string',
            unionEmpExt: GetUserResponseBodyUnionEmpExt,
            unionId: 'string',
            userId: 'string',
            workPlace: 'string',
        };
    }
}
exports.GetUserResponseBody = GetUserResponseBody;
class GetUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetUserResponseBody,
        };
    }
}
exports.GetUserResponse = GetUserResponse;
class GetUserByUnionIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserByUnionIdHeaders = GetUserByUnionIdHeaders;
class GetUserByUnionIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'language',
            subCorpId: 'subCorpId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            language: 'string',
            subCorpId: 'string',
            unionId: 'string',
        };
    }
}
exports.GetUserByUnionIdRequest = GetUserByUnionIdRequest;
class GetUserByUnionIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactType: 'contactType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            contactType: 'number',
            userId: 'string',
        };
    }
}
exports.GetUserByUnionIdResponseBody = GetUserByUnionIdResponseBody;
class GetUserByUnionIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetUserByUnionIdResponseBody,
        };
    }
}
exports.GetUserByUnionIdResponse = GetUserByUnionIdResponse;
class GetVillageOrgInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetVillageOrgInfoHeaders = GetVillageOrgInfoHeaders;
class GetVillageOrgInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'regionId',
            regionLocation: 'regionLocation',
            regionType: 'regionType',
        };
    }
    static types() {
        return {
            regionId: 'string',
            regionLocation: 'string',
            regionType: 'string',
        };
    }
}
exports.GetVillageOrgInfoResponseBody = GetVillageOrgInfoResponseBody;
class GetVillageOrgInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetVillageOrgInfoResponseBody,
        };
    }
}
exports.GetVillageOrgInfoResponse = GetVillageOrgInfoResponse;
class ListDeptSimpleUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListDeptSimpleUsersHeaders = ListDeptSimpleUsersHeaders;
class ListDeptSimpleUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            containAccessLimit: 'containAccessLimit',
            cursor: 'cursor',
            language: 'language',
            orderField: 'orderField',
            size: 'size',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            containAccessLimit: 'boolean',
            cursor: 'number',
            language: 'string',
            orderField: 'string',
            size: 'number',
            subCorpId: 'string',
        };
    }
}
exports.ListDeptSimpleUsersRequest = ListDeptSimpleUsersRequest;
class ListDeptSimpleUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
            userList: 'userList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextCursor: 'number',
            totalCount: 'number',
            userList: { 'type': 'array', 'itemType': ListDeptSimpleUsersResponseBodyUserList },
        };
    }
}
exports.ListDeptSimpleUsersResponseBody = ListDeptSimpleUsersResponseBody;
class ListDeptSimpleUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListDeptSimpleUsersResponseBody,
        };
    }
}
exports.ListDeptSimpleUsersResponse = ListDeptSimpleUsersResponse;
class ListDeptUserIdsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListDeptUserIdsHeaders = ListDeptUserIdsHeaders;
class ListDeptUserIdsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            subCorpId: 'string',
        };
    }
}
exports.ListDeptUserIdsRequest = ListDeptUserIdsRequest;
class ListDeptUserIdsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListDeptUserIdsResponseBody = ListDeptUserIdsResponseBody;
class ListDeptUserIdsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListDeptUserIdsResponseBody,
        };
    }
}
exports.ListDeptUserIdsResponse = ListDeptUserIdsResponse;
class ListDeptUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListDeptUsersHeaders = ListDeptUsersHeaders;
class ListDeptUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            containAccessLimit: 'containAccessLimit',
            cursor: 'cursor',
            language: 'language',
            orderField: 'orderField',
            size: 'size',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            containAccessLimit: 'boolean',
            cursor: 'number',
            language: 'string',
            orderField: 'string',
            size: 'number',
            subCorpId: 'string',
        };
    }
}
exports.ListDeptUsersRequest = ListDeptUsersRequest;
class ListDeptUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextCursor: 'nextCursor',
            userList: 'userList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextCursor: 'number',
            userList: { 'type': 'array', 'itemType': ListDeptUsersResponseBodyUserList },
        };
    }
}
exports.ListDeptUsersResponseBody = ListDeptUsersResponseBody;
class ListDeptUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListDeptUsersResponseBody,
        };
    }
}
exports.ListDeptUsersResponse = ListDeptUsersResponse;
class ListParentByDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListParentByDeptHeaders = ListParentByDeptHeaders;
class ListParentByDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            subCorpId: 'string',
        };
    }
}
exports.ListParentByDeptRequest = ListParentByDeptRequest;
class ListParentByDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentIdList: 'departmentIdList',
        };
    }
    static types() {
        return {
            departmentIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListParentByDeptResponseBody = ListParentByDeptResponseBody;
class ListParentByDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListParentByDeptResponseBody,
        };
    }
}
exports.ListParentByDeptResponse = ListParentByDeptResponse;
class ListParentByUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListParentByUserHeaders = ListParentByUserHeaders;
class ListParentByUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subCorpId: 'subCorpId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            subCorpId: 'string',
            userId: 'string',
        };
    }
}
exports.ListParentByUserRequest = ListParentByUserRequest;
class ListParentByUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentIdList: 'departmentIdList',
        };
    }
    static types() {
        return {
            departmentIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListParentByUserResponseBody = ListParentByUserResponseBody;
class ListParentByUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListParentByUserResponseBody,
        };
    }
}
exports.ListParentByUserResponse = ListParentByUserResponse;
class ListResidentDeptUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListResidentDeptUsersHeaders = ListResidentDeptUsersHeaders;
class ListResidentDeptUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cursor: 'cursor',
            role: 'role',
            size: 'size',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            cursor: 'number',
            role: 'string',
            size: 'number',
            subCorpId: 'string',
        };
    }
}
exports.ListResidentDeptUsersRequest = ListResidentDeptUsersRequest;
class ListResidentDeptUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextCursor: 'nextCursor',
            userList: 'userList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextCursor: 'number',
            userList: { 'type': 'array', 'itemType': ListResidentDeptUsersResponseBodyUserList },
        };
    }
}
exports.ListResidentDeptUsersResponseBody = ListResidentDeptUsersResponseBody;
class ListResidentDeptUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListResidentDeptUsersResponseBody,
        };
    }
}
exports.ListResidentDeptUsersResponse = ListResidentDeptUsersResponse;
class ListResidentSubDeptsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListResidentSubDeptsHeaders = ListResidentSubDeptsHeaders;
class ListResidentSubDeptsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cursor: 'cursor',
            size: 'size',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            cursor: 'number',
            size: 'number',
            subCorpId: 'string',
        };
    }
}
exports.ListResidentSubDeptsRequest = ListResidentSubDeptsRequest;
class ListResidentSubDeptsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentList: 'departmentList',
            hasMore: 'hasMore',
            nextCursor: 'nextCursor',
            total: 'total',
        };
    }
    static types() {
        return {
            departmentList: { 'type': 'array', 'itemType': ListResidentSubDeptsResponseBodyDepartmentList },
            hasMore: 'boolean',
            nextCursor: 'number',
            total: 'number',
        };
    }
}
exports.ListResidentSubDeptsResponseBody = ListResidentSubDeptsResponseBody;
class ListResidentSubDeptsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListResidentSubDeptsResponseBody,
        };
    }
}
exports.ListResidentSubDeptsResponse = ListResidentSubDeptsResponse;
class ListResidentUserInfosHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListResidentUserInfosHeaders = ListResidentUserInfosHeaders;
class ListResidentUserInfosRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subCorpId: 'subCorpId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            subCorpId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListResidentUserInfosRequest = ListResidentUserInfosRequest;
class ListResidentUserInfosShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subCorpId: 'subCorpId',
            userIdsShrink: 'userIds',
        };
    }
    static types() {
        return {
            subCorpId: 'string',
            userIdsShrink: 'string',
        };
    }
}
exports.ListResidentUserInfosShrinkRequest = ListResidentUserInfosShrinkRequest;
class ListResidentUserInfosResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userList: 'userList',
        };
    }
    static types() {
        return {
            userList: { 'type': 'array', 'itemType': ListResidentUserInfosResponseBodyUserList },
        };
    }
}
exports.ListResidentUserInfosResponseBody = ListResidentUserInfosResponseBody;
class ListResidentUserInfosResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListResidentUserInfosResponseBody,
        };
    }
}
exports.ListResidentUserInfosResponse = ListResidentUserInfosResponse;
class ListSimpleUsersByRoleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListSimpleUsersByRoleHeaders = ListSimpleUsersByRoleHeaders;
class ListSimpleUsersByRoleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            offset: 'offset',
            roleId: 'roleId',
            size: 'size',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            offset: 'number',
            roleId: 'number',
            size: 'number',
            subCorpId: 'string',
        };
    }
}
exports.ListSimpleUsersByRoleRequest = ListSimpleUsersByRoleRequest;
class ListSimpleUsersByRoleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextCursor: 'nextCursor',
            userList: 'userList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextCursor: 'number',
            userList: { 'type': 'array', 'itemType': ListSimpleUsersByRoleResponseBodyUserList },
        };
    }
}
exports.ListSimpleUsersByRoleResponseBody = ListSimpleUsersByRoleResponseBody;
class ListSimpleUsersByRoleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListSimpleUsersByRoleResponseBody,
        };
    }
}
exports.ListSimpleUsersByRoleResponse = ListSimpleUsersByRoleResponse;
class ListSubCorpsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListSubCorpsHeaders = ListSubCorpsHeaders;
class ListSubCorpsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isOnlyDirect: 'isOnlyDirect',
            subCorpId: 'subCorpId',
            types: 'types',
        };
    }
    static types() {
        return {
            isOnlyDirect: 'boolean',
            subCorpId: 'string',
            types: 'string',
        };
    }
}
exports.ListSubCorpsRequest = ListSubCorpsRequest;
class ListSubCorpsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpList: 'corpList',
        };
    }
    static types() {
        return {
            corpList: { 'type': 'array', 'itemType': ListSubCorpsResponseBodyCorpList },
        };
    }
}
exports.ListSubCorpsResponseBody = ListSubCorpsResponseBody;
class ListSubCorpsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListSubCorpsResponseBody,
        };
    }
}
exports.ListSubCorpsResponse = ListSubCorpsResponse;
class ListSubDeptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListSubDeptHeaders = ListSubDeptHeaders;
class ListSubDeptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'language',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            language: 'string',
            subCorpId: 'string',
        };
    }
}
exports.ListSubDeptRequest = ListSubDeptRequest;
class ListSubDeptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ListSubDeptResponseBodyResult },
        };
    }
}
exports.ListSubDeptResponseBody = ListSubDeptResponseBody;
class ListSubDeptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListSubDeptResponseBody,
        };
    }
}
exports.ListSubDeptResponse = ListSubDeptResponse;
class ListSubDeptIdsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListSubDeptIdsHeaders = ListSubDeptIdsHeaders;
class ListSubDeptIdsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            subCorpId: 'string',
        };
    }
}
exports.ListSubDeptIdsRequest = ListSubDeptIdsRequest;
class ListSubDeptIdsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentIdList: 'departmentIdList',
        };
    }
    static types() {
        return {
            departmentIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListSubDeptIdsResponseBody = ListSubDeptIdsResponseBody;
class ListSubDeptIdsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListSubDeptIdsResponseBody,
        };
    }
}
exports.ListSubDeptIdsResponse = ListSubDeptIdsResponse;
class GetResidentUserInfoResponseBodyRoles extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleId: 'roleId',
            roleName: 'roleName',
            tagCode: 'tagCode',
        };
    }
    static types() {
        return {
            roleId: 'number',
            roleName: 'string',
            tagCode: 'string',
        };
    }
}
exports.GetResidentUserInfoResponseBodyRoles = GetResidentUserInfoResponseBodyRoles;
class GetUserResponseBodyDepartmentOrderSet extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            order: 'order',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            order: 'number',
        };
    }
}
exports.GetUserResponseBodyDepartmentOrderSet = GetUserResponseBodyDepartmentOrderSet;
class GetUserResponseBodyLeaderInDepartment extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            leader: 'leader',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            leader: 'boolean',
        };
    }
}
exports.GetUserResponseBodyLeaderInDepartment = GetUserResponseBodyLeaderInDepartment;
class GetUserResponseBodyRoleList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'groupName',
            roleId: 'roleId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            groupName: 'string',
            roleId: 'number',
            roleName: 'string',
        };
    }
}
exports.GetUserResponseBodyRoleList = GetUserResponseBodyRoleList;
class GetUserResponseBodyUnionEmpExtUnionEmpMapList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            staffId: 'staffId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            staffId: 'string',
        };
    }
}
exports.GetUserResponseBodyUnionEmpExtUnionEmpMapList = GetUserResponseBodyUnionEmpExtUnionEmpMapList;
class GetUserResponseBodyUnionEmpExt extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            staffId: 'staffId',
            unionEmpMapList: 'unionEmpMapList',
        };
    }
    static types() {
        return {
            corpId: 'string',
            staffId: 'string',
            unionEmpMapList: { 'type': 'array', 'itemType': GetUserResponseBodyUnionEmpExtUnionEmpMapList },
        };
    }
}
exports.GetUserResponseBodyUnionEmpExt = GetUserResponseBodyUnionEmpExt;
class ListDeptSimpleUsersResponseBodyUserList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.ListDeptSimpleUsersResponseBodyUserList = ListDeptSimpleUsersResponseBodyUserList;
class ListDeptUsersResponseBodyUserList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            departmentList: 'departmentList',
            jobNumber: 'jobNumber',
            name: 'name',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            active: 'boolean',
            departmentList: { 'type': 'array', 'itemType': 'number' },
            jobNumber: 'string',
            name: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.ListDeptUsersResponseBodyUserList = ListDeptUsersResponseBodyUserList;
class ListResidentDeptUsersResponseBodyUserListRoles extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagCode: 'tagCode',
            tagId: 'tagId',
            tagName: 'tagName',
        };
    }
    static types() {
        return {
            tagCode: 'string',
            tagId: 'number',
            tagName: 'string',
        };
    }
}
exports.ListResidentDeptUsersResponseBodyUserListRoles = ListResidentDeptUsersResponseBodyUserListRoles;
class ListResidentDeptUsersResponseBodyUserList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            feature: 'feature',
            name: 'name',
            roles: 'roles',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            feature: 'string',
            name: 'string',
            roles: { 'type': 'array', 'itemType': ListResidentDeptUsersResponseBodyUserListRoles },
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.ListResidentDeptUsersResponseBodyUserList = ListResidentDeptUsersResponseBodyUserList;
class ListResidentSubDeptsResponseBodyDepartmentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            superDepartmentId: 'superDepartmentId',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            departmentName: 'string',
            superDepartmentId: 'number',
        };
    }
}
exports.ListResidentSubDeptsResponseBodyDepartmentList = ListResidentSubDeptsResponseBodyDepartmentList;
class ListResidentUserInfosResponseBodyUserListRoles extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagCode: 'tagCode',
            tagId: 'tagId',
            tagName: 'tagName',
        };
    }
    static types() {
        return {
            tagCode: 'string',
            tagId: 'number',
            tagName: 'string',
        };
    }
}
exports.ListResidentUserInfosResponseBodyUserListRoles = ListResidentUserInfosResponseBodyUserListRoles;
class ListResidentUserInfosResponseBodyUserList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            feature: 'feature',
            roles: 'roles',
            unionId: 'unionId',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            feature: 'string',
            roles: { 'type': 'array', 'itemType': ListResidentUserInfosResponseBodyUserListRoles },
            unionId: 'string',
            userId: 'string',
            userName: 'string',
        };
    }
}
exports.ListResidentUserInfosResponseBodyUserList = ListResidentUserInfosResponseBodyUserList;
class ListSimpleUsersByRoleResponseBodyUserList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobNumber: 'jobNumber',
            name: 'name',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            jobNumber: 'string',
            name: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.ListSimpleUsersByRoleResponseBodyUserList = ListSimpleUsersByRoleResponseBodyUserList;
class ListSubCorpsResponseBodyCorpList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
            industry: 'industry',
            industryCode: 'industryCode',
            regionId: 'regionId',
            regionLocation: 'regionLocation',
            regionType: 'regionType',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
            industry: 'string',
            industryCode: 'number',
            regionId: 'string',
            regionLocation: 'string',
            regionType: 'string',
        };
    }
}
exports.ListSubCorpsResponseBodyCorpList = ListSubCorpsResponseBodyCorpList;
class ListSubDeptResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            name: 'name',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            name: 'string',
        };
    }
}
exports.ListSubDeptResponseBodyResult = ListSubDeptResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async getDept(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDeptHeaders({});
        return await this.getDeptWithOptions(departmentId, request, headers, runtime);
    }
    async getDeptWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetDept", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/deptartments/${departmentId}`, "json", req, runtime), new GetDeptResponse({}));
    }
    async getResidentDept(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetResidentDeptHeaders({});
        return await this.getResidentDeptWithOptions(departmentId, request, headers, runtime);
    }
    async getResidentDeptWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetResidentDept", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/residentDepartments/departments/${departmentId}`, "json", req, runtime), new GetResidentDeptResponse({}));
    }
    async getResidentUserInfo(departmentId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetResidentUserInfoHeaders({});
        return await this.getResidentUserInfoWithOptions(departmentId, userId, request, headers, runtime);
    }
    async getResidentUserInfoWithOptions(departmentId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetResidentUserInfo", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/residentDepartments/${departmentId}/users/${userId}`, "json", req, runtime), new GetResidentUserInfoResponse({}));
    }
    async getUser(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserHeaders({});
        return await this.getUserWithOptions(userId, request, headers, runtime);
    }
    async getUserWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        userId = openapi_util_1.default.getEncodeParam(userId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetUser", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/users/getByUserId`, "json", req, runtime), new GetUserResponse({}));
    }
    async getUserByUnionId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserByUnionIdHeaders({});
        return await this.getUserByUnionIdWithOptions(request, headers, runtime);
    }
    async getUserByUnionIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetUserByUnionId", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/users/getByUnionId`, "json", req, runtime), new GetUserByUnionIdResponse({}));
    }
    async getVillageOrgInfo(subCorpId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetVillageOrgInfoHeaders({});
        return await this.getVillageOrgInfoWithOptions(subCorpId, headers, runtime);
    }
    async getVillageOrgInfoWithOptions(subCorpId, headers, runtime) {
        subCorpId = openapi_util_1.default.getEncodeParam(subCorpId);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetVillageOrgInfo", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/corps/${subCorpId}`, "json", req, runtime), new GetVillageOrgInfoResponse({}));
    }
    async listDeptSimpleUsers(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListDeptSimpleUsersHeaders({});
        return await this.listDeptSimpleUsersWithOptions(departmentId, request, headers, runtime);
    }
    async listDeptSimpleUsersWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.containAccessLimit)) {
            query["containAccessLimit"] = request.containAccessLimit;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            query["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.orderField)) {
            query["orderField"] = request.orderField;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListDeptSimpleUsers", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/departments/${departmentId}/simpleUsers`, "json", req, runtime), new ListDeptSimpleUsersResponse({}));
    }
    async listDeptUserIds(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListDeptUserIdsHeaders({});
        return await this.listDeptUserIdsWithOptions(departmentId, request, headers, runtime);
    }
    async listDeptUserIdsWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListDeptUserIds", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/departments/${departmentId}/userIds`, "json", req, runtime), new ListDeptUserIdsResponse({}));
    }
    async listDeptUsers(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListDeptUsersHeaders({});
        return await this.listDeptUsersWithOptions(departmentId, request, headers, runtime);
    }
    async listDeptUsersWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.containAccessLimit)) {
            query["containAccessLimit"] = request.containAccessLimit;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            query["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.orderField)) {
            query["orderField"] = request.orderField;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListDeptUsers", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/departments/${departmentId}/users`, "json", req, runtime), new ListDeptUsersResponse({}));
    }
    async listParentByDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListParentByDeptHeaders({});
        return await this.listParentByDeptWithOptions(request, headers, runtime);
    }
    async listParentByDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListParentByDept", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/departments/listParentByDepartment`, "json", req, runtime), new ListParentByDeptResponse({}));
    }
    async listParentByUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListParentByUserHeaders({});
        return await this.listParentByUserWithOptions(request, headers, runtime);
    }
    async listParentByUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListParentByUser", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/departments/listParentByUser`, "json", req, runtime), new ListParentByUserResponse({}));
    }
    async listResidentDeptUsers(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListResidentDeptUsersHeaders({});
        return await this.listResidentDeptUsersWithOptions(departmentId, request, headers, runtime);
    }
    async listResidentDeptUsersWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cursor)) {
            query["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.role)) {
            query["role"] = request.role;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListResidentDeptUsers", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/residentDepartments/${departmentId}/users`, "json", req, runtime), new ListResidentDeptUsersResponse({}));
    }
    async listResidentSubDepts(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListResidentSubDeptsHeaders({});
        return await this.listResidentSubDeptsWithOptions(departmentId, request, headers, runtime);
    }
    async listResidentSubDeptsWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cursor)) {
            query["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListResidentSubDepts", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/residentDepartments/${departmentId}/subDepartments`, "json", req, runtime), new ListResidentSubDeptsResponse({}));
    }
    async listResidentUserInfos(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListResidentUserInfosHeaders({});
        return await this.listResidentUserInfosWithOptions(request, headers, runtime);
    }
    async listResidentUserInfosWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ListResidentUserInfosShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.userIds)) {
            request.userIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.userIds, "userIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        if (!tea_util_1.default.isUnset(request.userIdsShrink)) {
            query["userIds"] = request.userIdsShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListResidentUserInfos", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/residentUsers/getByUserIds`, "json", req, runtime), new ListResidentUserInfosResponse({}));
    }
    async listSimpleUsersByRole(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSimpleUsersByRoleHeaders({});
        return await this.listSimpleUsersByRoleWithOptions(request, headers, runtime);
    }
    async listSimpleUsersByRoleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.offset)) {
            query["offset"] = request.offset;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            query["roleId"] = request.roleId;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListSimpleUsersByRole", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/users/listByRole`, "json", req, runtime), new ListSimpleUsersByRoleResponse({}));
    }
    async listSubCorps(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSubCorpsHeaders({});
        return await this.listSubCorpsWithOptions(request, headers, runtime);
    }
    async listSubCorpsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isOnlyDirect)) {
            query["isOnlyDirect"] = request.isOnlyDirect;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        if (!tea_util_1.default.isUnset(request.types)) {
            query["types"] = request.types;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListSubCorps", "village_1.0", "HTTP", "POST", "AK", `/v1.0/village/corps/subCorps`, "json", req, runtime), new ListSubCorpsResponse({}));
    }
    async listSubDept(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSubDeptHeaders({});
        return await this.listSubDeptWithOptions(departmentId, request, headers, runtime);
    }
    async listSubDeptWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListSubDept", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/departments/${departmentId}/subDepartments`, "json", req, runtime), new ListSubDeptResponse({}));
    }
    async listSubDeptIds(departmentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSubDeptIdsHeaders({});
        return await this.listSubDeptIdsWithOptions(departmentId, request, headers, runtime);
    }
    async listSubDeptIdsWithOptions(departmentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        departmentId = openapi_util_1.default.getEncodeParam(departmentId);
        let query = {};
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            query["subCorpId"] = request.subCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListSubDeptIds", "village_1.0", "HTTP", "GET", "AK", `/v1.0/village/departments/${departmentId}/subDepartmentIds`, "json", req, runtime), new ListSubDeptIdsResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map