/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddKnowledgeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddKnowledgeRequest extends $tea.Model {
    attachmentList?: AddKnowledgeRequestAttachmentList[];
    content?: string;
    effectTimeend?: number;
    effectTimestart?: number;
    extTitle?: string;
    keyword?: string;
    libraryKey?: string;
    linkUrl?: string;
    openTeamId?: string;
    questionIds?: number[];
    source?: string;
    sourcePrimaryKey?: string;
    title?: string;
    type?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddKnowledgeResponseBody extends $tea.Model {
    openKnowledgeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddKnowledgeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddKnowledgeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLibraryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLibraryRequest extends $tea.Model {
    description?: string;
    openTeamIds?: string[];
    source?: string;
    sourcePrimaryKey?: string;
    title?: string;
    type?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLibraryResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLibraryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddLibraryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenCategoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenCategoryRequest extends $tea.Model {
    libraryId?: number;
    openTeamId?: string;
    parentId?: number;
    title?: string;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenCategoryResponseBody extends $tea.Model {
    result?: AddOpenCategoryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenCategoryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddOpenCategoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenKnowledgeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenKnowledgeRequest extends $tea.Model {
    attachments?: AddOpenKnowledgeRequestAttachments[];
    categoryId?: number;
    content?: string;
    effectTimeend?: string;
    effectTimestart?: string;
    extTitle?: string;
    keyword?: string;
    libraryId?: number;
    openTeamId?: string;
    source?: string;
    tags?: string;
    title?: string;
    type?: string;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenKnowledgeResponseBody extends $tea.Model {
    result?: AddOpenKnowledgeResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenKnowledgeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddOpenKnowledgeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenLibraryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenLibraryRequest extends $tea.Model {
    description?: string;
    openTeamId?: string;
    source?: string;
    title?: string;
    type?: string;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenLibraryResponseBody extends $tea.Model {
    result?: AddOpenLibraryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenLibraryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddOpenLibraryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTicketMemoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTicketMemoRequest extends $tea.Model {
    openTeamId?: string;
    openTicketId?: string;
    processorUnionId?: string;
    ticketMemo?: AddTicketMemoRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTicketMemoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignTicketRequest extends $tea.Model {
    notify?: AssignTicketRequestNotify;
    openTeamId?: string;
    openTicketId?: string;
    operatorUnionId?: string;
    processorUnionIds?: string[];
    ticketMemo?: AssignTicketRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindingGroupBizIdsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindingGroupBizIdsRequest extends $tea.Model {
    bindingGroupBizIds?: BatchBindingGroupBizIdsRequestBindingGroupBizIds[];
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindingGroupBizIdsResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindingGroupBizIdsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchBindingGroupBizIdsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetGroupSetConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetGroupSetConfigRequest extends $tea.Model {
    configKeys?: string[];
    openGroupSetId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetGroupSetConfigResponseBody extends $tea.Model {
    groupSetConfigs?: BatchGetGroupSetConfigResponseBodyGroupSetConfigs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetGroupSetConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetGroupSetConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQuerySendMessageTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQuerySendMessageTaskRequest extends $tea.Model {
    getReadCount?: boolean;
    gmtCreateEnd?: string;
    gmtCreateStart?: string;
    maxResults?: number;
    nextToken?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQuerySendMessageTaskResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    records?: BatchQuerySendMessageTaskResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQuerySendMessageTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchQuerySendMessageTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BoundTemplateToTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BoundTemplateToTeamRequest extends $tea.Model {
    openTeamId?: string;
    robotConfig?: string;
    templateDesc?: string;
    templateId?: string;
    templateName?: string;
    templateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BoundTemplateToTeamResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BoundTemplateToTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BoundTemplateToTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelTicketRequest extends $tea.Model {
    notify?: CancelTicketRequestNotify;
    openTeamId?: string;
    openTicketId?: string;
    operatorUnionId?: string;
    ticketMemo?: CancelTicketRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryStatisticsRequest extends $tea.Model {
    maxDt?: string;
    minDt?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryStatisticsResponseBody extends $tea.Model {
    categoryStatisticsRecords?: CategoryStatisticsResponseBodyCategoryStatisticsRecords[];
    categoryTrend?: CategoryStatisticsResponseBodyCategoryTrend[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CategoryStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseConversationRequest extends $tea.Model {
    conversationId?: string;
    openTeamId?: string;
    serverTips?: string;
    serviceToken?: string;
    targetChannel?: string;
    visitorToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseConversationResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseConversationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CloseConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseHumanSessionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseHumanSessionRequest extends $tea.Model {
    openConversationId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseHumanSessionResponseBody extends $tea.Model {
    sessionId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseHumanSessionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CloseHumanSessionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationCreatedNotifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationCreatedNotifyRequest extends $tea.Model {
    alipayUserId?: string;
    conversationId?: string;
    nickName?: string;
    openTeamId?: string;
    serverName?: string;
    serverTips?: string;
    serviceToken?: string;
    timeoutRemindTips?: string;
    userId?: string;
    visitorToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationCreatedNotifyResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationCreatedNotifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ConversationCreatedNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferBeginNotifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferBeginNotifyRequest extends $tea.Model {
    conversationId?: string;
    memo?: string;
    openTeamId?: string;
    serviceToken?: string;
    sourceSkillGroupId?: string;
    targetSkillGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferBeginNotifyResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferBeginNotifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ConversationTransferBeginNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferCompleteNotifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferCompleteNotifyRequest extends $tea.Model {
    alipayUserId?: string;
    conversationId?: string;
    nickName?: string;
    openTeamId?: string;
    serviceToken?: string;
    userId?: string;
    visitorToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferCompleteNotifyResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversationTransferCompleteNotifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ConversationTransferCompleteNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupRequest extends $tea.Model {
    groupBizId?: string;
    groupName?: string;
    groupTagNames?: string[];
    memberStaffIds?: string[];
    openGroupSetId?: string;
    openTeamId?: string;
    ownerStaffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupResponseBody extends $tea.Model {
    groupUrl?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationRequest extends $tea.Model {
    corpId?: string;
    dingGroupId?: string;
    dingSuiteKey?: string;
    dingTokenGrantType?: number;
    dingUserId?: string;
    dingUserName?: string;
    extValues?: string;
    openTeamId?: string;
    serverGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetRequest extends $tea.Model {
    groupSetName?: string;
    groupTemplateId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateGroupSetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceRequest extends $tea.Model {
    channel?: string;
    externalBizId?: string;
    formCode?: string;
    formDataList?: string;
    openTeamId?: string;
    operatorUnionId?: string;
    ownerUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceResponseBody extends $tea.Model {
    openDataInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamRequest extends $tea.Model {
    creatorDingUnionId?: string;
    teamName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketRequest extends $tea.Model {
    creatorUnionId?: string;
    customFields?: string;
    notify?: CreateTicketRequestNotify;
    openTeamId?: string;
    openTemplateBizId?: string;
    processorUnionIds?: string[];
    scene?: string;
    sceneContext?: CreateTicketRequestSceneContext;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketResponseBody extends $tea.Model {
    openTicketId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceRequest extends $tea.Model {
    formCode?: string;
    openDataInstanceId?: string;
    openTeamId?: string;
    operatorUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceResponseBody extends $tea.Model {
    openDataInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeRequest extends $tea.Model {
    libraryKey?: string;
    openTeamId?: string;
    source?: string;
    sourcePrimaryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteKnowledgeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmotionStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmotionStatisticsRequest extends $tea.Model {
    maxDt?: string;
    maxEmotion?: number;
    minDt?: string;
    minEmotion?: number;
    openConversationIds?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmotionStatisticsResponseBody extends $tea.Model {
    emotionStatisticsRecords?: EmotionStatisticsResponseBodyEmotionStatisticsRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmotionStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: EmotionStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishTicketRequest extends $tea.Model {
    notify?: FinishTicketRequestNotify;
    openTeamId?: string;
    openTicketId?: string;
    processorUnionId?: string;
    ticketMemo?: FinishTicketRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenRequest extends $tea.Model {
    channel?: string;
    effectiveTime?: number;
    openTeamId?: string;
    serverId?: string;
    serverName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: GetAuthTokenResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetAuthTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdsRequest extends $tea.Model {
    formCode?: string;
    openDataInstanceIdList?: string[];
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdsResponseBody extends $tea.Model {
    customFormInstanceResponseList?: GetInstancesByIdsResponseBodyCustomFormInstanceResponseList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetInstancesByIdsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNegativeWordCloudHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNegativeWordCloudRequest extends $tea.Model {
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNegativeWordCloudResponseBody extends $tea.Model {
    words?: GetNegativeWordCloudResponseBodyWords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNegativeWordCloudResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetNegativeWordCloudResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOssTempUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOssTempUrlRequest extends $tea.Model {
    fetchMode?: string;
    fileName?: string;
    key?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOssTempUrlResponseBody extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOssTempUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetOssTempUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStoragePolicyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStoragePolicyRequest extends $tea.Model {
    bizType?: string;
    fileName?: string;
    fileSize?: number;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStoragePolicyResponseBody extends $tea.Model {
    accessKeyId?: string;
    endpoint?: string;
    key?: string;
    policy?: string;
    signature?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStoragePolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetStoragePolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketRequest extends $tea.Model {
    openTeamId?: string;
    openTicketId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketResponseBody extends $tea.Model {
    createTime?: string;
    creator?: GetTicketResponseBodyCreator;
    customFields?: string;
    openConversationId?: string;
    openTicketId?: string;
    processor?: GetTicketResponseBodyProcessor;
    scene?: string;
    sceneContext?: string;
    stage?: string;
    takers?: GetTicketResponseBodyTakers[];
    template?: GetTicketResponseBodyTemplate;
    title?: string;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWordCloudHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWordCloudRequest extends $tea.Model {
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWordCloudResponseBody extends $tea.Model {
    words?: GetWordCloudResponseBodyWords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWordCloudResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetWordCloudResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupStatisticsRequest extends $tea.Model {
    maxDt?: string;
    minDt?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupStatisticsResponseBody extends $tea.Model {
    groupCount?: number;
    groupTrend?: GroupStatisticsResponseBodyGroupTrend[];
    increaseGroupCount?: number;
    increaseRate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GroupStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionCategoryStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionCategoryStatisticsRequest extends $tea.Model {
    maxDt?: string;
    minDt?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionCategoryStatisticsResponseBody extends $tea.Model {
    intentionCategoryRecords?: IntentionCategoryStatisticsResponseBodyIntentionCategoryRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionCategoryStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: IntentionCategoryStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionStatisticsRequest extends $tea.Model {
    maxDt?: string;
    minDt?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionStatisticsResponseBody extends $tea.Model {
    intentionStatisticsRecords?: IntentionStatisticsResponseBodyIntentionStatisticsRecords[];
    intentionTrend?: IntentionStatisticsResponseBodyIntentionTrend[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: IntentionStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordRequest extends $tea.Model {
    openTeamId?: string;
    openTicketId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordResponseBody extends $tea.Model {
    records?: ListTicketOperateRecordResponseBodyRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListTicketOperateRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserTeamsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserTeamsResponseBody extends $tea.Model {
    teams?: ListUserTeamsResponseBodyTeams[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserTeamsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListUserTeamsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUsersRequest extends $tea.Model {
    openConversationId?: string;
    openTeamId?: string;
    topN?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUsersResponseBody extends $tea.Model {
    activeUserInfos?: QueryActiveUsersResponseBodyActiveUserInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUsersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryActiveUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerCardRequest extends $tea.Model {
    jsonParams?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerCardResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerCardResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryCustomerCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupRequest extends $tea.Model {
    bizId?: string;
    openConversationId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupResponseBody extends $tea.Model {
    bizId?: string;
    groupName?: string;
    groupUrl?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    robotCode?: string;
    robotName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberRequest extends $tea.Model {
    openConversationId?: string;
    openTeamId?: string;
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponseBody extends $tea.Model {
    result?: QueryGroupMemberResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupSetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupSetRequest extends $tea.Model {
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupSetResponseBody extends $tea.Model {
    records?: QueryGroupSetResponseBodyRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupSetResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryGroupSetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancesByMultiConditionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancesByMultiConditionsRequest extends $tea.Model {
    formCode?: string;
    maxResults?: number;
    nextToken?: string;
    openTeamId?: string;
    searchFields?: string;
    sortFields?: QueryInstancesByMultiConditionsRequestSortFields[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancesByMultiConditionsResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    records?: QueryInstancesByMultiConditionsResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancesByMultiConditionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryInstancesByMultiConditionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    openBatchTaskId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    records?: QuerySendMsgTaskStatisticsResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySendMsgTaskStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsDetailRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    openBatchTaskId?: string;
    openConversationId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsDetailResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    records?: QuerySendMsgTaskStatisticsDetailResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySendMsgTaskStatisticsDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceGroupMessageReadStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceGroupMessageReadStatusRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    openConversationId?: string;
    openMsgTaskId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceGroupMessageReadStatusResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    records?: QueryServiceGroupMessageReadStatusResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceGroupMessageReadStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryServiceGroupMessageReadStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueueNotifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueueNotifyRequest extends $tea.Model {
    estimateWaitMin?: number;
    openTeamId?: string;
    queuePlace?: number;
    serviceToken?: string;
    targetChannel?: string;
    tips?: string;
    visitorToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueueNotifyResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueueNotifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueueNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerDetailRequest extends $tea.Model {
    hasLogin?: boolean;
    hasOpenConv?: boolean;
    maxDt?: string;
    minDt?: string;
    openConversationId?: string;
    openTeamId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerDetailResponseBody extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    records?: ReportCustomerDetailResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ReportCustomerDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerStatisticsRequest extends $tea.Model {
    groupOwnerUserIds?: string[];
    groupTags?: string[];
    maxDt?: string;
    minDt?: string;
    openConversationIds?: string[];
    openGroupSetId?: string;
    openTeamId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerStatisticsResponseBody extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    records?: ReportCustomerStatisticsResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ReportCustomerStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketRequest extends $tea.Model {
    creatorUnionId?: string;
    customFields?: string;
    notify?: ResubmitTicketRequestNotify;
    openTeamId?: string;
    openTemplateBizId?: string;
    openTicketId?: string;
    processorUnionIds?: string[];
    scene?: string;
    sceneContext?: ResubmitTicketRequestSceneContext;
    ticketMemo?: ResubmitTicketRequestTicketMemo;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetractTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetractTicketRequest extends $tea.Model {
    notify?: RetractTicketRequestNotify;
    openTeamId?: string;
    openTicketId?: string;
    operatorUnionId?: string;
    ticketMemo?: RetractTicketRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetractTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageRecallHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageRecallRequest extends $tea.Model {
    openConversationId?: string;
    openMsgId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageRecallResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageRecallResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RobotMessageRecallResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchGroupRequest extends $tea.Model {
    groupName?: string;
    maxResults?: number;
    nextToken?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    searchType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchGroupResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    records?: SearchGroupResponseBodyRecords[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SearchGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskRequest extends $tea.Model {
    messageContent?: SendMsgByTaskRequestMessageContent;
    openTeamId?: string;
    queryGroup?: SendMsgByTaskRequestQueryGroup;
    sendConfig?: SendMsgByTaskRequestSendConfig;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskResponseBody extends $tea.Model {
    openBatchTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SendMsgByTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendServiceGroupMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendServiceGroupMessageRequest extends $tea.Model {
    atDingtalkIds?: string[];
    atMobiles?: string[];
    atUnionIds?: string[];
    btnOrientation?: string;
    btns?: SendServiceGroupMessageRequestBtns[];
    content?: string;
    hasContentLinks?: boolean;
    isAtAll?: boolean;
    messageType?: string;
    receiverDingtalkIds?: string[];
    receiverMobiles?: string[];
    receiverUnionIds?: string[];
    targetOpenConversationId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendServiceGroupMessageResponseBody extends $tea.Model {
    openMsgTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendServiceGroupMessageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SendServiceGroupMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotConfigRequest extends $tea.Model {
    dingIsvOrgId?: number;
    dingOrgId?: number;
    dingSuiteKey?: string;
    dingTokenGrantType?: number;
    openGroupSetId?: string;
    openTeamId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotConfigResponseBody extends $tea.Model {
    result?: SetRobotConfigResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetRobotConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TakeTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TakeTicketRequest extends $tea.Model {
    openTeamId?: string;
    openTicketId?: string;
    takerUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TakeTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopicStatisticsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopicStatisticsRequest extends $tea.Model {
    maxDt?: string;
    minDt?: string;
    openConversationIds?: string;
    openTeamId?: string;
    searchContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopicStatisticsResponseBody extends $tea.Model {
    topicStatisticsRecords?: TopicStatisticsResponseBodyTopicStatisticsRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopicStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: TopicStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferTicketRequest extends $tea.Model {
    notify?: TransferTicketRequestNotify;
    openTeamId?: string;
    openTicketId?: string;
    processorUnionId?: string;
    processorUnionIds?: string[];
    ticketMemo?: TransferTicketRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupTagHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupTagRequest extends $tea.Model {
    openConversationIds?: string[];
    tagNames?: string[];
    updateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupTagResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceRequest extends $tea.Model {
    externalBizId?: string;
    formCode?: string;
    formDataList?: string;
    openDataInstanceId?: string;
    openTeamId?: string;
    operatorUnionId?: string;
    ownerUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceResponseBody extends $tea.Model {
    openDataInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTicketRequest extends $tea.Model {
    customFields?: string;
    openTeamId?: string;
    openTicketId?: string;
    processorUnionId?: string;
    ticketMemo?: UpdateTicketRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeCloudGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeCloudGroupRequest extends $tea.Model {
    ccsInstanceId?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeCloudGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeNormalGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeNormalGroupRequest extends $tea.Model {
    openConversationId?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeNormalGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UrgeTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UrgeTicketRequest extends $tea.Model {
    openTeamId?: string;
    openTicketId?: string;
    operatorUnionId?: string;
    ticketMemo?: UrgeTicketRequestTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UrgeTicketResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddKnowledgeRequestAttachmentList extends $tea.Model {
    mimeType?: string;
    path?: string;
    size?: number;
    suffix?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenCategoryResponseBodyResult extends $tea.Model {
    id?: number;
    message?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenKnowledgeRequestAttachments extends $tea.Model {
    mimeType?: string;
    path?: string;
    size?: number;
    suffix?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenKnowledgeResponseBodyResult extends $tea.Model {
    id?: number;
    message?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOpenLibraryResponseBodyResult extends $tea.Model {
    id?: number;
    message?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTicketMemoRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTicketMemoRequestTicketMemo extends $tea.Model {
    attachments?: AddTicketMemoRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignTicketRequestNotify extends $tea.Model {
    groupNoticeReceiverUnionIds?: string[];
    noticeAllGroupMember?: boolean;
    workNoticeReceiverUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignTicketRequestTicketMemo extends $tea.Model {
    attachments?: AssignTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindingGroupBizIdsRequestBindingGroupBizIds extends $tea.Model {
    bizId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetGroupSetConfigResponseBodyGroupSetConfigs extends $tea.Model {
    configKey?: string;
    configValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQuerySendMessageTaskResponseBodyRecords extends $tea.Model {
    createName?: string;
    createTimeStr?: string;
    createUnionId?: string;
    openBatchTaskId?: string;
    readGroupInc?: number;
    sendGroupInc?: number;
    sendMessageStatus?: string;
    sendTaskTimeStr?: string;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelTicketRequestNotify extends $tea.Model {
    groupNoticeReceiverUnionIds?: string[];
    noticeAllGroupMember?: boolean;
    workNoticeReceiverUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelTicketRequestTicketMemo extends $tea.Model {
    attachments?: CancelTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryStatisticsResponseBodyCategoryStatisticsRecords extends $tea.Model {
    count?: number;
    lastCount?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryStatisticsResponseBodyCategoryTrend extends $tea.Model {
    count?: number;
    dt?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketRequestNotify extends $tea.Model {
    groupNoticeReceiverUnionIds?: string[];
    noticeAllGroupMember?: boolean;
    workNoticeReceiverUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketRequestSceneContextGroupMsgs extends $tea.Model {
    anchor?: boolean;
    openMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketRequestSceneContext extends $tea.Model {
    groupMsgs?: CreateTicketRequestSceneContextGroupMsgs[];
    openConversationId?: string;
    relevantorUnionIds?: string[];
    topicId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmotionStatisticsResponseBodyEmotionStatisticsRecords extends $tea.Model {
    count?: number;
    dt?: string;
    emotionScore?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishTicketRequestNotify extends $tea.Model {
    groupNoticeReceiverUnionIds?: string[];
    noticeAllGroupMember?: boolean;
    workNoticeReceiverUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishTicketRequestTicketMemo extends $tea.Model {
    attachments?: FinishTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenResponseBodyResult extends $tea.Model {
    authToken?: string;
    channel?: string;
    effectiveTime?: number;
    serverId?: string;
    serverName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdsResponseBodyCustomFormInstanceResponseList extends $tea.Model {
    creatorUnionId?: string;
    fields?: string;
    formCode?: string;
    gmtCreate?: string;
    gmtModified?: string;
    modifiedUnionId?: string;
    openDataInstanceId?: string;
    openTeamId?: string;
    ownerUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNegativeWordCloudResponseBodyWords extends $tea.Model {
    count?: number;
    word?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketResponseBodyCreator extends $tea.Model {
    nickName?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketResponseBodyProcessor extends $tea.Model {
    nickName?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketResponseBodyTakers extends $tea.Model {
    nickName?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTicketResponseBodyTemplate extends $tea.Model {
    openTemplateBizId?: string;
    openTemplateId?: string;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWordCloudResponseBodyWords extends $tea.Model {
    count?: number;
    word?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupStatisticsResponseBodyGroupTrend extends $tea.Model {
    count?: number;
    dt?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionCategoryStatisticsResponseBodyIntentionCategoryRecords extends $tea.Model {
    askCount?: number;
    categoryName?: string;
    dissatisfiedCount?: number;
    errorCount?: number;
    praiseCount?: number;
    suggestCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionStatisticsResponseBodyIntentionStatisticsRecords extends $tea.Model {
    count?: number;
    intention?: string;
    lastCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IntentionStatisticsResponseBodyIntentionTrend extends $tea.Model {
    count?: number;
    dt?: string;
    intention?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordResponseBodyRecordsOperator extends $tea.Model {
    nickName?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordResponseBodyRecordsTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordResponseBodyRecordsTicketMemo extends $tea.Model {
    attachments?: ListTicketOperateRecordResponseBodyRecordsTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTicketOperateRecordResponseBodyRecords extends $tea.Model {
    openTicketId?: string;
    operateData?: string;
    operateTime?: string;
    operation?: string;
    operationDisplayName?: string;
    operator?: ListTicketOperateRecordResponseBodyRecordsOperator;
    ticketMemo?: ListTicketOperateRecordResponseBodyRecordsTicketMemo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserTeamsResponseBodyTeams extends $tea.Model {
    openTeamId?: string;
    teamName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUsersResponseBodyActiveUserInfos extends $tea.Model {
    actionIndexL14d?: number;
    actionIndexL30d?: number;
    actionIndexL7d?: number;
    activeScore?: number;
    nickName?: string;
    ranking?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponseBodyResultGroupMemberList extends $tea.Model {
    avatarMediaId?: string;
    isUser?: boolean;
    nickName?: string;
    owner?: boolean;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponseBodyResult extends $tea.Model {
    groupMemberList?: QueryGroupMemberResponseBodyResultGroupMemberList[];
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupSetResponseBodyRecords extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    groupSetName?: string;
    openGroupSetId?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancesByMultiConditionsRequestSortFields extends $tea.Model {
    fieldCode?: string;
    sortBy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancesByMultiConditionsResponseBodyRecords extends $tea.Model {
    creatorUnionId?: string;
    fields?: string;
    formCode?: string;
    gmtCreate?: string;
    gmtModified?: string;
    modifiedUnionId?: string;
    openDataInstanceId?: string;
    openTeamId?: string;
    ownerUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsResponseBodyRecordsGroup extends $tea.Model {
    bizId?: string;
    groupName?: string;
    groupSetName?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsResponseBodyRecordsGroupUserReadStatistics extends $tea.Model {
    openBatchTaskId?: string;
    openConversationId?: string;
    readUserInc?: number;
    sendUserInc?: number;
    unReadUserInc?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsResponseBodyRecords extends $tea.Model {
    errorDetail?: string;
    group?: QuerySendMsgTaskStatisticsResponseBodyRecordsGroup;
    groupUserReadStatistics?: QuerySendMsgTaskStatisticsResponseBodyRecordsGroupUserReadStatistics;
    openMsgId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendMsgTaskStatisticsDetailResponseBodyRecords extends $tea.Model {
    openBatchTaskId?: string;
    openConversationId?: string;
    readStatus?: number;
    readTimeStr?: string;
    receiverName?: string;
    receiverUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceGroupMessageReadStatusResponseBodyRecords extends $tea.Model {
    readStatus?: number;
    readTimeStr?: string;
    receiverDingTalkId?: string;
    receiverName?: string;
    receiverUnionId?: string;
    receiverUserId?: string;
    sendTimeStr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerDetailResponseBodyRecords extends $tea.Model {
    atRobotCnt?: number;
    customerName?: string;
    groupName?: string;
    hasLogin?: boolean;
    hasOpenConv?: boolean;
    sendMsgCnt?: number;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportCustomerStatisticsResponseBodyRecords extends $tea.Model {
    atRobotCnt?: number;
    bizId?: string;
    customerCnt?: number;
    groupName?: string;
    groupSetName?: string;
    loginCnt?: number;
    openConvCnt?: number;
    openConversationId?: string;
    openGroupSetId?: string;
    sendMsgCnt?: number;
    senderCnt?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketRequestNotify extends $tea.Model {
    groupNoticeReceiverUnionIds?: string[];
    noticeAllGroupMember?: boolean;
    workNoticeReceiverUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketRequestSceneContextGroupMsgs extends $tea.Model {
    anchor?: boolean;
    openMsgId?: string;
    topicId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketRequestSceneContext extends $tea.Model {
    groupMsgs?: ResubmitTicketRequestSceneContextGroupMsgs[];
    openConversationId?: string;
    relevantorUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResubmitTicketRequestTicketMemo extends $tea.Model {
    attachments?: ResubmitTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetractTicketRequestNotify extends $tea.Model {
    groupNoticeReceiverUnionIds?: string[];
    noticeAllGroupMember?: boolean;
    workNoticeReceiverUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetractTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetractTicketRequestTicketMemo extends $tea.Model {
    attachments?: RetractTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchGroupResponseBodyRecords extends $tea.Model {
    groupName?: string;
    groupUrl?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    openTeamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskRequestMessageContentBtns extends $tea.Model {
    actionURL?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskRequestMessageContent extends $tea.Model {
    atActiveMemberNum?: number;
    atActiveUser?: boolean;
    atAll?: boolean;
    btns?: SendMsgByTaskRequestMessageContentBtns[];
    content?: string;
    images?: string[];
    messageType?: string;
    remind?: boolean;
    title?: string;
    top?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskRequestQueryGroup extends $tea.Model {
    groupTagNames?: string[];
    lastActiveDateFilterType?: string;
    lastActiveTimeEnd?: string;
    lastActiveTimeStart?: string;
    openConversationIds?: string[];
    openGroupSetId?: string;
    queryType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskRequestSendConfigUrlTrackConfig extends $tea.Model {
    title?: string;
    trackId?: string;
    trackUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgByTaskRequestSendConfig extends $tea.Model {
    needUrlTrack?: boolean;
    sendTime?: string;
    sendType?: string;
    urlTrackConfig?: SendMsgByTaskRequestSendConfigUrlTrackConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendServiceGroupMessageRequestBtns extends $tea.Model {
    actionURL?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotConfigResponseBodyResult extends $tea.Model {
    configKey?: string;
    configValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopicStatisticsResponseBodyTopicStatisticsRecords extends $tea.Model {
    dt?: string;
    msgCount?: number;
    participantsNum?: number;
    topicNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferTicketRequestNotify extends $tea.Model {
    groupNoticeReceiverUnionIds?: string[];
    noticeAllGroupMember?: boolean;
    workNoticeReceiverUnionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferTicketRequestTicketMemo extends $tea.Model {
    attachments?: TransferTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTicketRequestTicketMemo extends $tea.Model {
    attachments?: UpdateTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UrgeTicketRequestTicketMemoAttachments extends $tea.Model {
    fileName?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UrgeTicketRequestTicketMemo extends $tea.Model {
    attachments?: UrgeTicketRequestTicketMemoAttachments[];
    memo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    addKnowledge(request: AddKnowledgeRequest): Promise<AddKnowledgeResponse>;
    addKnowledgeWithOptions(request: AddKnowledgeRequest, headers: AddKnowledgeHeaders, runtime: $Util.RuntimeOptions): Promise<AddKnowledgeResponse>;
    addLibrary(request: AddLibraryRequest): Promise<AddLibraryResponse>;
    addLibraryWithOptions(request: AddLibraryRequest, headers: AddLibraryHeaders, runtime: $Util.RuntimeOptions): Promise<AddLibraryResponse>;
    addOpenCategory(request: AddOpenCategoryRequest): Promise<AddOpenCategoryResponse>;
    addOpenCategoryWithOptions(request: AddOpenCategoryRequest, headers: AddOpenCategoryHeaders, runtime: $Util.RuntimeOptions): Promise<AddOpenCategoryResponse>;
    addOpenKnowledge(request: AddOpenKnowledgeRequest): Promise<AddOpenKnowledgeResponse>;
    addOpenKnowledgeWithOptions(request: AddOpenKnowledgeRequest, headers: AddOpenKnowledgeHeaders, runtime: $Util.RuntimeOptions): Promise<AddOpenKnowledgeResponse>;
    addOpenLibrary(request: AddOpenLibraryRequest): Promise<AddOpenLibraryResponse>;
    addOpenLibraryWithOptions(request: AddOpenLibraryRequest, headers: AddOpenLibraryHeaders, runtime: $Util.RuntimeOptions): Promise<AddOpenLibraryResponse>;
    addTicketMemo(request: AddTicketMemoRequest): Promise<AddTicketMemoResponse>;
    addTicketMemoWithOptions(request: AddTicketMemoRequest, headers: AddTicketMemoHeaders, runtime: $Util.RuntimeOptions): Promise<AddTicketMemoResponse>;
    assignTicket(request: AssignTicketRequest): Promise<AssignTicketResponse>;
    assignTicketWithOptions(request: AssignTicketRequest, headers: AssignTicketHeaders, runtime: $Util.RuntimeOptions): Promise<AssignTicketResponse>;
    batchBindingGroupBizIds(request: BatchBindingGroupBizIdsRequest): Promise<BatchBindingGroupBizIdsResponse>;
    batchBindingGroupBizIdsWithOptions(request: BatchBindingGroupBizIdsRequest, headers: BatchBindingGroupBizIdsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchBindingGroupBizIdsResponse>;
    batchGetGroupSetConfig(request: BatchGetGroupSetConfigRequest): Promise<BatchGetGroupSetConfigResponse>;
    batchGetGroupSetConfigWithOptions(request: BatchGetGroupSetConfigRequest, headers: BatchGetGroupSetConfigHeaders, runtime: $Util.RuntimeOptions): Promise<BatchGetGroupSetConfigResponse>;
    batchQuerySendMessageTask(request: BatchQuerySendMessageTaskRequest): Promise<BatchQuerySendMessageTaskResponse>;
    batchQuerySendMessageTaskWithOptions(request: BatchQuerySendMessageTaskRequest, headers: BatchQuerySendMessageTaskHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQuerySendMessageTaskResponse>;
    boundTemplateToTeam(request: BoundTemplateToTeamRequest): Promise<BoundTemplateToTeamResponse>;
    boundTemplateToTeamWithOptions(request: BoundTemplateToTeamRequest, headers: BoundTemplateToTeamHeaders, runtime: $Util.RuntimeOptions): Promise<BoundTemplateToTeamResponse>;
    cancelTicket(request: CancelTicketRequest): Promise<CancelTicketResponse>;
    cancelTicketWithOptions(request: CancelTicketRequest, headers: CancelTicketHeaders, runtime: $Util.RuntimeOptions): Promise<CancelTicketResponse>;
    categoryStatistics(request: CategoryStatisticsRequest): Promise<CategoryStatisticsResponse>;
    categoryStatisticsWithOptions(request: CategoryStatisticsRequest, headers: CategoryStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<CategoryStatisticsResponse>;
    closeConversation(request: CloseConversationRequest): Promise<CloseConversationResponse>;
    closeConversationWithOptions(request: CloseConversationRequest, headers: CloseConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CloseConversationResponse>;
    closeHumanSession(request: CloseHumanSessionRequest): Promise<CloseHumanSessionResponse>;
    closeHumanSessionWithOptions(request: CloseHumanSessionRequest, headers: CloseHumanSessionHeaders, runtime: $Util.RuntimeOptions): Promise<CloseHumanSessionResponse>;
    conversationCreatedNotify(request: ConversationCreatedNotifyRequest): Promise<ConversationCreatedNotifyResponse>;
    conversationCreatedNotifyWithOptions(request: ConversationCreatedNotifyRequest, headers: ConversationCreatedNotifyHeaders, runtime: $Util.RuntimeOptions): Promise<ConversationCreatedNotifyResponse>;
    conversationTransferBeginNotify(request: ConversationTransferBeginNotifyRequest): Promise<ConversationTransferBeginNotifyResponse>;
    conversationTransferBeginNotifyWithOptions(request: ConversationTransferBeginNotifyRequest, headers: ConversationTransferBeginNotifyHeaders, runtime: $Util.RuntimeOptions): Promise<ConversationTransferBeginNotifyResponse>;
    conversationTransferCompleteNotify(request: ConversationTransferCompleteNotifyRequest): Promise<ConversationTransferCompleteNotifyResponse>;
    conversationTransferCompleteNotifyWithOptions(request: ConversationTransferCompleteNotifyRequest, headers: ConversationTransferCompleteNotifyHeaders, runtime: $Util.RuntimeOptions): Promise<ConversationTransferCompleteNotifyResponse>;
    createGroup(request: CreateGroupRequest): Promise<CreateGroupResponse>;
    createGroupWithOptions(request: CreateGroupRequest, headers: CreateGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupResponse>;
    createGroupConversation(request: CreateGroupConversationRequest): Promise<CreateGroupConversationResponse>;
    createGroupConversationWithOptions(request: CreateGroupConversationRequest, headers: CreateGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupConversationResponse>;
    createGroupSet(request: CreateGroupSetRequest): Promise<CreateGroupSetResponse>;
    createGroupSetWithOptions(request: CreateGroupSetRequest, headers: CreateGroupSetHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupSetResponse>;
    createInstance(request: CreateInstanceRequest): Promise<CreateInstanceResponse>;
    createInstanceWithOptions(request: CreateInstanceRequest, headers: CreateInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateInstanceResponse>;
    createTeam(request: CreateTeamRequest): Promise<CreateTeamResponse>;
    createTeamWithOptions(request: CreateTeamRequest, headers: CreateTeamHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTeamResponse>;
    createTicket(request: CreateTicketRequest): Promise<CreateTicketResponse>;
    createTicketWithOptions(request: CreateTicketRequest, headers: CreateTicketHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTicketResponse>;
    deleteInstance(request: DeleteInstanceRequest): Promise<DeleteInstanceResponse>;
    deleteInstanceWithOptions(request: DeleteInstanceRequest, headers: DeleteInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteInstanceResponse>;
    deleteKnowledge(request: DeleteKnowledgeRequest): Promise<DeleteKnowledgeResponse>;
    deleteKnowledgeWithOptions(request: DeleteKnowledgeRequest, headers: DeleteKnowledgeHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteKnowledgeResponse>;
    emotionStatistics(request: EmotionStatisticsRequest): Promise<EmotionStatisticsResponse>;
    emotionStatisticsWithOptions(request: EmotionStatisticsRequest, headers: EmotionStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<EmotionStatisticsResponse>;
    finishTicket(request: FinishTicketRequest): Promise<FinishTicketResponse>;
    finishTicketWithOptions(request: FinishTicketRequest, headers: FinishTicketHeaders, runtime: $Util.RuntimeOptions): Promise<FinishTicketResponse>;
    getAuthToken(request: GetAuthTokenRequest): Promise<GetAuthTokenResponse>;
    getAuthTokenWithOptions(request: GetAuthTokenRequest, headers: GetAuthTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GetAuthTokenResponse>;
    getInstancesByIds(request: GetInstancesByIdsRequest): Promise<GetInstancesByIdsResponse>;
    getInstancesByIdsWithOptions(request: GetInstancesByIdsRequest, headers: GetInstancesByIdsHeaders, runtime: $Util.RuntimeOptions): Promise<GetInstancesByIdsResponse>;
    getNegativeWordCloud(request: GetNegativeWordCloudRequest): Promise<GetNegativeWordCloudResponse>;
    getNegativeWordCloudWithOptions(request: GetNegativeWordCloudRequest, headers: GetNegativeWordCloudHeaders, runtime: $Util.RuntimeOptions): Promise<GetNegativeWordCloudResponse>;
    getOssTempUrl(request: GetOssTempUrlRequest): Promise<GetOssTempUrlResponse>;
    getOssTempUrlWithOptions(request: GetOssTempUrlRequest, headers: GetOssTempUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetOssTempUrlResponse>;
    getStoragePolicy(request: GetStoragePolicyRequest): Promise<GetStoragePolicyResponse>;
    getStoragePolicyWithOptions(request: GetStoragePolicyRequest, headers: GetStoragePolicyHeaders, runtime: $Util.RuntimeOptions): Promise<GetStoragePolicyResponse>;
    getTicket(request: GetTicketRequest): Promise<GetTicketResponse>;
    getTicketWithOptions(request: GetTicketRequest, headers: GetTicketHeaders, runtime: $Util.RuntimeOptions): Promise<GetTicketResponse>;
    getWordCloud(request: GetWordCloudRequest): Promise<GetWordCloudResponse>;
    getWordCloudWithOptions(request: GetWordCloudRequest, headers: GetWordCloudHeaders, runtime: $Util.RuntimeOptions): Promise<GetWordCloudResponse>;
    groupStatistics(request: GroupStatisticsRequest): Promise<GroupStatisticsResponse>;
    groupStatisticsWithOptions(request: GroupStatisticsRequest, headers: GroupStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<GroupStatisticsResponse>;
    intentionCategoryStatistics(request: IntentionCategoryStatisticsRequest): Promise<IntentionCategoryStatisticsResponse>;
    intentionCategoryStatisticsWithOptions(request: IntentionCategoryStatisticsRequest, headers: IntentionCategoryStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<IntentionCategoryStatisticsResponse>;
    intentionStatistics(request: IntentionStatisticsRequest): Promise<IntentionStatisticsResponse>;
    intentionStatisticsWithOptions(request: IntentionStatisticsRequest, headers: IntentionStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<IntentionStatisticsResponse>;
    listTicketOperateRecord(request: ListTicketOperateRecordRequest): Promise<ListTicketOperateRecordResponse>;
    listTicketOperateRecordWithOptions(request: ListTicketOperateRecordRequest, headers: ListTicketOperateRecordHeaders, runtime: $Util.RuntimeOptions): Promise<ListTicketOperateRecordResponse>;
    listUserTeams(userId: string): Promise<ListUserTeamsResponse>;
    listUserTeamsWithOptions(userId: string, headers: ListUserTeamsHeaders, runtime: $Util.RuntimeOptions): Promise<ListUserTeamsResponse>;
    queryActiveUsers(request: QueryActiveUsersRequest): Promise<QueryActiveUsersResponse>;
    queryActiveUsersWithOptions(request: QueryActiveUsersRequest, headers: QueryActiveUsersHeaders, runtime: $Util.RuntimeOptions): Promise<QueryActiveUsersResponse>;
    queryCustomerCard(request: QueryCustomerCardRequest): Promise<QueryCustomerCardResponse>;
    queryCustomerCardWithOptions(request: QueryCustomerCardRequest, headers: QueryCustomerCardHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCustomerCardResponse>;
    queryGroup(request: QueryGroupRequest): Promise<QueryGroupResponse>;
    queryGroupWithOptions(request: QueryGroupRequest, headers: QueryGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupResponse>;
    queryGroupMember(request: QueryGroupMemberRequest): Promise<QueryGroupMemberResponse>;
    queryGroupMemberWithOptions(request: QueryGroupMemberRequest, headers: QueryGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMemberResponse>;
    queryGroupSet(request: QueryGroupSetRequest): Promise<QueryGroupSetResponse>;
    queryGroupSetWithOptions(request: QueryGroupSetRequest, headers: QueryGroupSetHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupSetResponse>;
    queryInstancesByMultiConditions(request: QueryInstancesByMultiConditionsRequest): Promise<QueryInstancesByMultiConditionsResponse>;
    queryInstancesByMultiConditionsWithOptions(request: QueryInstancesByMultiConditionsRequest, headers: QueryInstancesByMultiConditionsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryInstancesByMultiConditionsResponse>;
    querySendMsgTaskStatistics(request: QuerySendMsgTaskStatisticsRequest): Promise<QuerySendMsgTaskStatisticsResponse>;
    querySendMsgTaskStatisticsWithOptions(request: QuerySendMsgTaskStatisticsRequest, headers: QuerySendMsgTaskStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySendMsgTaskStatisticsResponse>;
    querySendMsgTaskStatisticsDetail(request: QuerySendMsgTaskStatisticsDetailRequest): Promise<QuerySendMsgTaskStatisticsDetailResponse>;
    querySendMsgTaskStatisticsDetailWithOptions(request: QuerySendMsgTaskStatisticsDetailRequest, headers: QuerySendMsgTaskStatisticsDetailHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySendMsgTaskStatisticsDetailResponse>;
    queryServiceGroupMessageReadStatus(request: QueryServiceGroupMessageReadStatusRequest): Promise<QueryServiceGroupMessageReadStatusResponse>;
    queryServiceGroupMessageReadStatusWithOptions(request: QueryServiceGroupMessageReadStatusRequest, headers: QueryServiceGroupMessageReadStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryServiceGroupMessageReadStatusResponse>;
    queueNotify(request: QueueNotifyRequest): Promise<QueueNotifyResponse>;
    queueNotifyWithOptions(request: QueueNotifyRequest, headers: QueueNotifyHeaders, runtime: $Util.RuntimeOptions): Promise<QueueNotifyResponse>;
    reportCustomerDetail(request: ReportCustomerDetailRequest): Promise<ReportCustomerDetailResponse>;
    reportCustomerDetailWithOptions(request: ReportCustomerDetailRequest, headers: ReportCustomerDetailHeaders, runtime: $Util.RuntimeOptions): Promise<ReportCustomerDetailResponse>;
    reportCustomerStatistics(request: ReportCustomerStatisticsRequest): Promise<ReportCustomerStatisticsResponse>;
    reportCustomerStatisticsWithOptions(request: ReportCustomerStatisticsRequest, headers: ReportCustomerStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<ReportCustomerStatisticsResponse>;
    resubmitTicket(request: ResubmitTicketRequest): Promise<ResubmitTicketResponse>;
    resubmitTicketWithOptions(request: ResubmitTicketRequest, headers: ResubmitTicketHeaders, runtime: $Util.RuntimeOptions): Promise<ResubmitTicketResponse>;
    retractTicket(request: RetractTicketRequest): Promise<RetractTicketResponse>;
    retractTicketWithOptions(request: RetractTicketRequest, headers: RetractTicketHeaders, runtime: $Util.RuntimeOptions): Promise<RetractTicketResponse>;
    robotMessageRecall(request: RobotMessageRecallRequest): Promise<RobotMessageRecallResponse>;
    robotMessageRecallWithOptions(request: RobotMessageRecallRequest, headers: RobotMessageRecallHeaders, runtime: $Util.RuntimeOptions): Promise<RobotMessageRecallResponse>;
    searchGroup(request: SearchGroupRequest): Promise<SearchGroupResponse>;
    searchGroupWithOptions(request: SearchGroupRequest, headers: SearchGroupHeaders, runtime: $Util.RuntimeOptions): Promise<SearchGroupResponse>;
    sendMsgByTask(request: SendMsgByTaskRequest): Promise<SendMsgByTaskResponse>;
    sendMsgByTaskWithOptions(request: SendMsgByTaskRequest, headers: SendMsgByTaskHeaders, runtime: $Util.RuntimeOptions): Promise<SendMsgByTaskResponse>;
    sendServiceGroupMessage(request: SendServiceGroupMessageRequest): Promise<SendServiceGroupMessageResponse>;
    sendServiceGroupMessageWithOptions(request: SendServiceGroupMessageRequest, headers: SendServiceGroupMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendServiceGroupMessageResponse>;
    setRobotConfig(request: SetRobotConfigRequest): Promise<SetRobotConfigResponse>;
    setRobotConfigWithOptions(request: SetRobotConfigRequest, headers: SetRobotConfigHeaders, runtime: $Util.RuntimeOptions): Promise<SetRobotConfigResponse>;
    takeTicket(request: TakeTicketRequest): Promise<TakeTicketResponse>;
    takeTicketWithOptions(request: TakeTicketRequest, headers: TakeTicketHeaders, runtime: $Util.RuntimeOptions): Promise<TakeTicketResponse>;
    topicStatistics(request: TopicStatisticsRequest): Promise<TopicStatisticsResponse>;
    topicStatisticsWithOptions(request: TopicStatisticsRequest, headers: TopicStatisticsHeaders, runtime: $Util.RuntimeOptions): Promise<TopicStatisticsResponse>;
    transferTicket(request: TransferTicketRequest): Promise<TransferTicketResponse>;
    transferTicketWithOptions(request: TransferTicketRequest, headers: TransferTicketHeaders, runtime: $Util.RuntimeOptions): Promise<TransferTicketResponse>;
    updateGroupTag(request: UpdateGroupTagRequest): Promise<UpdateGroupTagResponse>;
    updateGroupTagWithOptions(request: UpdateGroupTagRequest, headers: UpdateGroupTagHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupTagResponse>;
    updateInstance(request: UpdateInstanceRequest): Promise<UpdateInstanceResponse>;
    updateInstanceWithOptions(request: UpdateInstanceRequest, headers: UpdateInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInstanceResponse>;
    updateTicket(request: UpdateTicketRequest): Promise<UpdateTicketResponse>;
    updateTicketWithOptions(request: UpdateTicketRequest, headers: UpdateTicketHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTicketResponse>;
    upgradeCloudGroup(request: UpgradeCloudGroupRequest): Promise<UpgradeCloudGroupResponse>;
    upgradeCloudGroupWithOptions(request: UpgradeCloudGroupRequest, headers: UpgradeCloudGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UpgradeCloudGroupResponse>;
    upgradeNormalGroup(request: UpgradeNormalGroupRequest): Promise<UpgradeNormalGroupResponse>;
    upgradeNormalGroupWithOptions(request: UpgradeNormalGroupRequest, headers: UpgradeNormalGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UpgradeNormalGroupResponse>;
    urgeTicket(request: UrgeTicketRequest): Promise<UrgeTicketResponse>;
    urgeTicketWithOptions(request: UrgeTicketRequest, headers: UrgeTicketHeaders, runtime: $Util.RuntimeOptions): Promise<UrgeTicketResponse>;
}
