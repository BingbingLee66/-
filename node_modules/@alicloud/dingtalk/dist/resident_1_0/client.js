"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddPointHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddPointHeaders = AddPointHeaders;
class AddPointRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionTime: 'actionTime',
            isCircle: 'isCircle',
            ruleCode: 'ruleCode',
            ruleName: 'ruleName',
            score: 'score',
            userId: 'userId',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            actionTime: 'number',
            isCircle: 'boolean',
            ruleCode: 'string',
            ruleName: 'string',
            score: 'number',
            userId: 'string',
            uuid: 'string',
        };
    }
}
exports.AddPointRequest = AddPointRequest;
class AddPointResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.AddPointResponse = AddPointResponse;
class AddResidentDepartmentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddResidentDepartmentHeaders = AddResidentDepartmentHeaders;
class AddResidentDepartmentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentName: 'departmentName',
            isResidenceGroup: 'isResidenceGroup',
            parentDepartmentId: 'parentDepartmentId',
        };
    }
    static types() {
        return {
            departmentName: 'string',
            isResidenceGroup: 'boolean',
            parentDepartmentId: 'number',
        };
    }
}
exports.AddResidentDepartmentRequest = AddResidentDepartmentRequest;
class AddResidentDepartmentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.AddResidentDepartmentResponseBody = AddResidentDepartmentResponseBody;
class AddResidentDepartmentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddResidentDepartmentResponseBody,
        };
    }
}
exports.AddResidentDepartmentResponse = AddResidentDepartmentResponse;
class AddResidentMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddResidentMemberHeaders = AddResidentMemberHeaders;
class AddResidentMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            residentAddInfo: 'residentAddInfo',
        };
    }
    static types() {
        return {
            residentAddInfo: AddResidentMemberRequestResidentAddInfo,
        };
    }
}
exports.AddResidentMemberRequest = AddResidentMemberRequest;
class AddResidentMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            status: 'number',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.AddResidentMemberResponseBody = AddResidentMemberResponseBody;
class AddResidentMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddResidentMemberResponseBody,
        };
    }
}
exports.AddResidentMemberResponse = AddResidentMemberResponse;
class AddResidentUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddResidentUsersHeaders = AddResidentUsersHeaders;
class AddResidentUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            departmentId: 'departmentId',
            extField: 'extField',
            isLeaseholder: 'isLeaseholder',
            mobile: 'mobile',
            relateType: 'relateType',
            userName: 'userName',
        };
    }
    static types() {
        return {
            address: 'string',
            departmentId: 'number',
            extField: { 'type': 'array', 'itemType': AddResidentUsersRequestExtField },
            isLeaseholder: 'boolean',
            mobile: 'string',
            relateType: 'string',
            userName: 'string',
        };
    }
}
exports.AddResidentUsersRequest = AddResidentUsersRequest;
class AddResidentUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.AddResidentUsersResponseBody = AddResidentUsersResponseBody;
class AddResidentUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddResidentUsersResponseBody,
        };
    }
}
exports.AddResidentUsersResponse = AddResidentUsersResponse;
class CreateResidentBlackBoardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateResidentBlackBoardHeaders = CreateResidentBlackBoardHeaders;
class CreateResidentBlackBoardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            context: 'context',
            mediaId: 'mediaId',
            sendTime: 'sendTime',
            title: 'title',
        };
    }
    static types() {
        return {
            context: 'string',
            mediaId: 'string',
            sendTime: 'string',
            title: 'string',
        };
    }
}
exports.CreateResidentBlackBoardRequest = CreateResidentBlackBoardRequest;
class CreateResidentBlackBoardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blackBoardId: 'blackBoardId',
        };
    }
    static types() {
        return {
            blackBoardId: 'string',
        };
    }
}
exports.CreateResidentBlackBoardResponseBody = CreateResidentBlackBoardResponseBody;
class CreateResidentBlackBoardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateResidentBlackBoardResponseBody,
        };
    }
}
exports.CreateResidentBlackBoardResponse = CreateResidentBlackBoardResponse;
class CreateSpaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSpaceHeaders = CreateSpaceHeaders;
class CreateSpaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            billingArea: 'billingArea',
            buildingArea: 'buildingArea',
            floor: 'floor',
            houseState: 'houseState',
            name: 'name',
            parentDeptId: 'parentDeptId',
            tagCode: 'tagCode',
            type: 'type',
        };
    }
    static types() {
        return {
            billingArea: 'number',
            buildingArea: 'number',
            floor: 'string',
            houseState: 'number',
            name: 'string',
            parentDeptId: 'string',
            tagCode: 'string',
            type: 'string',
        };
    }
}
exports.CreateSpaceRequest = CreateSpaceRequest;
class CreateSpaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'string',
        };
    }
}
exports.CreateSpaceResponseBody = CreateSpaceResponseBody;
class CreateSpaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSpaceResponseBody,
        };
    }
}
exports.CreateSpaceResponse = CreateSpaceResponse;
class DeleteResidentBlackBoardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteResidentBlackBoardHeaders = DeleteResidentBlackBoardHeaders;
class DeleteResidentBlackBoardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blackboardId: 'blackboardId',
        };
    }
    static types() {
        return {
            blackboardId: 'string',
        };
    }
}
exports.DeleteResidentBlackBoardRequest = DeleteResidentBlackBoardRequest;
class DeleteResidentBlackBoardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteResidentBlackBoardResponseBody = DeleteResidentBlackBoardResponseBody;
class DeleteResidentBlackBoardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteResidentBlackBoardResponseBody,
        };
    }
}
exports.DeleteResidentBlackBoardResponse = DeleteResidentBlackBoardResponse;
class DeleteResidentDepartmentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteResidentDepartmentHeaders = DeleteResidentDepartmentHeaders;
class DeleteResidentDepartmentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
        };
    }
    static types() {
        return {
            departmentId: 'number',
        };
    }
}
exports.DeleteResidentDepartmentRequest = DeleteResidentDepartmentRequest;
class DeleteResidentDepartmentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteResidentDepartmentResponseBody = DeleteResidentDepartmentResponseBody;
class DeleteResidentDepartmentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteResidentDepartmentResponseBody,
        };
    }
}
exports.DeleteResidentDepartmentResponse = DeleteResidentDepartmentResponse;
class DeleteSpaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteSpaceHeaders = DeleteSpaceHeaders;
class DeleteSpaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.DeleteSpaceRequest = DeleteSpaceRequest;
class DeleteSpaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            delFailedDept: 'delFailedDept',
            delSuccessCount: 'delSuccessCount',
        };
    }
    static types() {
        return {
            delFailedDept: { 'type': 'array', 'itemType': DeleteSpaceResponseBodyDelFailedDept },
            delSuccessCount: 'boolean',
        };
    }
}
exports.DeleteSpaceResponseBody = DeleteSpaceResponseBody;
class DeleteSpaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteSpaceResponseBody,
        };
    }
}
exports.DeleteSpaceResponse = DeleteSpaceResponse;
class GetConversationIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetConversationIdHeaders = GetConversationIdHeaders;
class GetConversationIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatId: 'chatId',
        };
    }
    static types() {
        return {
            chatId: 'string',
        };
    }
}
exports.GetConversationIdRequest = GetConversationIdRequest;
class GetConversationIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.GetConversationIdResponseBody = GetConversationIdResponseBody;
class GetConversationIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetConversationIdResponseBody,
        };
    }
}
exports.GetConversationIdResponse = GetConversationIdResponse;
class GetIndustryTypeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetIndustryTypeHeaders = GetIndustryTypeHeaders;
class GetIndustryTypeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            industryType: 'industryType',
        };
    }
    static types() {
        return {
            industryType: 'string',
        };
    }
}
exports.GetIndustryTypeResponseBody = GetIndustryTypeResponseBody;
class GetIndustryTypeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetIndustryTypeResponseBody,
        };
    }
}
exports.GetIndustryTypeResponse = GetIndustryTypeResponse;
class GetPropertyInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPropertyInfoHeaders = GetPropertyInfoHeaders;
class GetPropertyInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyCorpId: 'propertyCorpId',
        };
    }
    static types() {
        return {
            propertyCorpId: 'string',
        };
    }
}
exports.GetPropertyInfoRequest = GetPropertyInfoRequest;
class GetPropertyInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            adminName: 'adminName',
            adminUserId: 'adminUserId',
            name: 'name',
            orgId: 'orgId',
            unifiedSocialCredit: 'unifiedSocialCredit',
        };
    }
    static types() {
        return {
            adminName: 'string',
            adminUserId: 'string',
            name: 'string',
            orgId: 'number',
            unifiedSocialCredit: 'string',
        };
    }
}
exports.GetPropertyInfoResponseBody = GetPropertyInfoResponseBody;
class GetPropertyInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetPropertyInfoResponseBody,
        };
    }
}
exports.GetPropertyInfoResponse = GetPropertyInfoResponse;
class GetResidentInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetResidentInfoHeaders = GetResidentInfoHeaders;
class GetResidentInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            residentCorpId: 'residentCorpId',
        };
    }
    static types() {
        return {
            residentCorpId: 'string',
        };
    }
}
exports.GetResidentInfoRequest = GetResidentInfoRequest;
class GetResidentInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            allUserGroupOpenConversationId: 'allUserGroupOpenConversationId',
            allUserGroupOwnerUserId: 'allUserGroupOwnerUserId',
            buildingArea: 'buildingArea',
            cityId: 'cityId',
            contactMode: 'contactMode',
            countyId: 'countyId',
            deliveryTime: 'deliveryTime',
            location: 'location',
            name: 'name',
            projectManager: 'projectManager',
            propertyDeptGroupOpenConversationId: 'propertyDeptGroupOpenConversationId',
            propertyDeptGroupOwnerUserId: 'propertyDeptGroupOwnerUserId',
            provId: 'provId',
            scopeEast: 'scopeEast',
            scopeNorth: 'scopeNorth',
            scopeSouth: 'scopeSouth',
            scopeWest: 'scopeWest',
            telephone: 'telephone',
            townId: 'townId',
            type: 'type',
        };
    }
    static types() {
        return {
            address: 'string',
            allUserGroupOpenConversationId: 'string',
            allUserGroupOwnerUserId: 'string',
            buildingArea: 'number',
            cityId: 'number',
            contactMode: 'number',
            countyId: 'number',
            deliveryTime: 'number',
            location: 'string',
            name: 'string',
            projectManager: GetResidentInfoResponseBodyProjectManager,
            propertyDeptGroupOpenConversationId: 'string',
            propertyDeptGroupOwnerUserId: 'string',
            provId: 'number',
            scopeEast: 'string',
            scopeNorth: 'string',
            scopeSouth: 'string',
            scopeWest: 'string',
            telephone: 'string',
            townId: 'number',
            type: 'number',
        };
    }
}
exports.GetResidentInfoResponseBody = GetResidentInfoResponseBody;
class GetResidentInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetResidentInfoResponseBody,
        };
    }
}
exports.GetResidentInfoResponse = GetResidentInfoResponse;
class GetResidentMembersInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetResidentMembersInfoHeaders = GetResidentMembersInfoHeaders;
class GetResidentMembersInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            residentCropId: 'residentCropId',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            residentCropId: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetResidentMembersInfoRequest = GetResidentMembersInfoRequest;
class GetResidentMembersInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            residenceList: 'residenceList',
        };
    }
    static types() {
        return {
            residenceList: { 'type': 'array', 'itemType': GetResidentMembersInfoResponseBodyResidenceList },
        };
    }
}
exports.GetResidentMembersInfoResponseBody = GetResidentMembersInfoResponseBody;
class GetResidentMembersInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetResidentMembersInfoResponseBody,
        };
    }
}
exports.GetResidentMembersInfoResponse = GetResidentMembersInfoResponse;
class GetSpaceIdByTypeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSpaceIdByTypeHeaders = GetSpaceIdByTypeHeaders;
class GetSpaceIdByTypeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentType: 'departmentType',
        };
    }
    static types() {
        return {
            departmentType: 'string',
        };
    }
}
exports.GetSpaceIdByTypeRequest = GetSpaceIdByTypeRequest;
class GetSpaceIdByTypeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            referId: 'referId',
        };
    }
    static types() {
        return {
            referId: 'number',
        };
    }
}
exports.GetSpaceIdByTypeResponseBody = GetSpaceIdByTypeResponseBody;
class GetSpaceIdByTypeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSpaceIdByTypeResponseBody,
        };
    }
}
exports.GetSpaceIdByTypeResponse = GetSpaceIdByTypeResponse;
class GetSpacesInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSpacesInfoHeaders = GetSpacesInfoHeaders;
class GetSpacesInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            referIds: 'referIds',
            residentCorpId: 'residentCorpId',
        };
    }
    static types() {
        return {
            referIds: { 'type': 'array', 'itemType': 'number' },
            residentCorpId: 'string',
        };
    }
}
exports.GetSpacesInfoRequest = GetSpacesInfoRequest;
class GetSpacesInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spaceList: 'spaceList',
        };
    }
    static types() {
        return {
            spaceList: { 'type': 'array', 'itemType': GetSpacesInfoResponseBodySpaceList },
        };
    }
}
exports.GetSpacesInfoResponseBody = GetSpacesInfoResponseBody;
class GetSpacesInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSpacesInfoResponseBody,
        };
    }
}
exports.GetSpacesInfoResponse = GetSpacesInfoResponse;
class ListIndustryRoleUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListIndustryRoleUsersHeaders = ListIndustryRoleUsersHeaders;
class ListIndustryRoleUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagCode: 'tagCode',
        };
    }
    static types() {
        return {
            tagCode: 'string',
        };
    }
}
exports.ListIndustryRoleUsersRequest = ListIndustryRoleUsersRequest;
class ListIndustryRoleUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListIndustryRoleUsersResponseBody = ListIndustryRoleUsersResponseBody;
class ListIndustryRoleUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListIndustryRoleUsersResponseBody,
        };
    }
}
exports.ListIndustryRoleUsersResponse = ListIndustryRoleUsersResponse;
class ListPointRulesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListPointRulesHeaders = ListPointRulesHeaders;
class ListPointRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isCircle: 'isCircle',
        };
    }
    static types() {
        return {
            isCircle: 'boolean',
        };
    }
}
exports.ListPointRulesRequest = ListPointRulesRequest;
class ListPointRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pointRuleList: 'pointRuleList',
        };
    }
    static types() {
        return {
            pointRuleList: { 'type': 'array', 'itemType': ListPointRulesResponseBodyPointRuleList },
        };
    }
}
exports.ListPointRulesResponseBody = ListPointRulesResponseBody;
class ListPointRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListPointRulesResponseBody,
        };
    }
}
exports.ListPointRulesResponse = ListPointRulesResponse;
class ListSubSpaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListSubSpaceHeaders = ListSubSpaceHeaders;
class ListSubSpaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            referId: 'referId',
            residentCorpId: 'residentCorpId',
        };
    }
    static types() {
        return {
            referId: 'number',
            residentCorpId: 'string',
        };
    }
}
exports.ListSubSpaceRequest = ListSubSpaceRequest;
class ListSubSpaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spaceList: 'spaceList',
        };
    }
    static types() {
        return {
            spaceList: { 'type': 'array', 'itemType': ListSubSpaceResponseBodySpaceList },
        };
    }
}
exports.ListSubSpaceResponseBody = ListSubSpaceResponseBody;
class ListSubSpaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListSubSpaceResponseBody,
        };
    }
}
exports.ListSubSpaceResponse = ListSubSpaceResponse;
class ListUncheckUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListUncheckUsersHeaders = ListUncheckUsersHeaders;
class ListUncheckUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            startTime: 'startTime',
            status: 'status',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
            startTime: 'number',
            status: 'number',
        };
    }
}
exports.ListUncheckUsersRequest = ListUncheckUsersRequest;
class ListUncheckUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            values: 'values',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'number',
            values: { 'type': 'array', 'itemType': ListUncheckUsersResponseBodyValues },
        };
    }
}
exports.ListUncheckUsersResponseBody = ListUncheckUsersResponseBody;
class ListUncheckUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListUncheckUsersResponseBody,
        };
    }
}
exports.ListUncheckUsersResponse = ListUncheckUsersResponse;
class ListUserIndustryRolesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListUserIndustryRolesHeaders = ListUserIndustryRolesHeaders;
class ListUserIndustryRolesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.ListUserIndustryRolesRequest = ListUserIndustryRolesRequest;
class ListUserIndustryRolesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleList: 'roleList',
        };
    }
    static types() {
        return {
            roleList: { 'type': 'array', 'itemType': ListUserIndustryRolesResponseBodyRoleList },
        };
    }
}
exports.ListUserIndustryRolesResponseBody = ListUserIndustryRolesResponseBody;
class ListUserIndustryRolesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListUserIndustryRolesResponseBody,
        };
    }
}
exports.ListUserIndustryRolesResponse = ListUserIndustryRolesResponse;
class PagePointHistoryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PagePointHistoryHeaders = PagePointHistoryHeaders;
class PagePointHistoryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            isCircle: 'isCircle',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            startTime: 'startTime',
            userId: 'userId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            isCircle: 'boolean',
            maxResults: 'number',
            nextToken: 'number',
            startTime: 'number',
            userId: 'string',
        };
    }
}
exports.PagePointHistoryRequest = PagePointHistoryRequest;
class PagePointHistoryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            pointRecordList: 'pointRecordList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'number',
            pointRecordList: { 'type': 'array', 'itemType': PagePointHistoryResponseBodyPointRecordList },
            totalCount: 'number',
        };
    }
}
exports.PagePointHistoryResponseBody = PagePointHistoryResponseBody;
class PagePointHistoryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PagePointHistoryResponseBody,
        };
    }
}
exports.PagePointHistoryResponse = PagePointHistoryResponse;
class RemoveResidentMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveResidentMemberHeaders = RemoveResidentMemberHeaders;
class RemoveResidentMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.RemoveResidentMemberRequest = RemoveResidentMemberRequest;
class RemoveResidentMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.RemoveResidentMemberResponseBody = RemoveResidentMemberResponseBody;
class RemoveResidentMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RemoveResidentMemberResponseBody,
        };
    }
}
exports.RemoveResidentMemberResponse = RemoveResidentMemberResponse;
class RemoveResidentUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveResidentUserHeaders = RemoveResidentUserHeaders;
class RemoveResidentUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            userId: 'string',
        };
    }
}
exports.RemoveResidentUserRequest = RemoveResidentUserRequest;
class RemoveResidentUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RemoveResidentUserResponseBody = RemoveResidentUserResponseBody;
class RemoveResidentUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RemoveResidentUserResponseBody,
        };
    }
}
exports.RemoveResidentUserResponse = RemoveResidentUserResponse;
class SearchResidentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchResidentHeaders = SearchResidentHeaders;
class SearchResidentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            residentCropId: 'residentCropId',
            searchWord: 'searchWord',
        };
    }
    static types() {
        return {
            residentCropId: 'string',
            searchWord: 'string',
        };
    }
}
exports.SearchResidentRequest = SearchResidentRequest;
class SearchResidentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            residenceList: 'residenceList',
        };
    }
    static types() {
        return {
            residenceList: { 'type': 'array', 'itemType': SearchResidentResponseBodyResidenceList },
        };
    }
}
exports.SearchResidentResponseBody = SearchResidentResponseBody;
class SearchResidentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SearchResidentResponseBody,
        };
    }
}
exports.SearchResidentResponse = SearchResidentResponse;
class UpdateResideceGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateResideceGroupHeaders = UpdateResideceGroupHeaders;
class UpdateResideceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            managerUserId: 'managerUserId',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            departmentName: 'string',
            managerUserId: 'string',
        };
    }
}
exports.UpdateResideceGroupRequest = UpdateResideceGroupRequest;
class UpdateResideceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateResideceGroupResponseBody = UpdateResideceGroupResponseBody;
class UpdateResideceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateResideceGroupResponseBody,
        };
    }
}
exports.UpdateResideceGroupResponse = UpdateResideceGroupResponse;
class UpdateResidenceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateResidenceHeaders = UpdateResidenceHeaders;
class UpdateResidenceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            destitute: 'destitute',
            grid: 'grid',
            homeTel: 'homeTel',
            managerUserId: 'managerUserId',
            parentDepartmentId: 'parentDepartmentId',
        };
    }
    static types() {
        return {
            departmentId: 'number',
            departmentName: 'string',
            destitute: 'boolean',
            grid: 'string',
            homeTel: 'string',
            managerUserId: 'string',
            parentDepartmentId: 'number',
        };
    }
}
exports.UpdateResidenceRequest = UpdateResidenceRequest;
class UpdateResidenceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateResidenceResponseBody = UpdateResidenceResponseBody;
class UpdateResidenceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateResidenceResponseBody,
        };
    }
}
exports.UpdateResidenceResponse = UpdateResidenceResponse;
class UpdateResidentBlackBoardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateResidentBlackBoardHeaders = UpdateResidentBlackBoardHeaders;
class UpdateResidentBlackBoardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blackboardId: 'blackboardId',
            context: 'context',
            mediaId: 'mediaId',
            title: 'title',
        };
    }
    static types() {
        return {
            blackboardId: 'string',
            context: 'string',
            mediaId: 'string',
            title: 'string',
        };
    }
}
exports.UpdateResidentBlackBoardRequest = UpdateResidentBlackBoardRequest;
class UpdateResidentBlackBoardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateResidentBlackBoardResponseBody = UpdateResidentBlackBoardResponseBody;
class UpdateResidentBlackBoardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateResidentBlackBoardResponseBody,
        };
    }
}
exports.UpdateResidentBlackBoardResponse = UpdateResidentBlackBoardResponse;
class UpdateResidentInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateResidentInfoHeaders = UpdateResidentInfoHeaders;
class UpdateResidentInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            buildingArea: 'buildingArea',
            cityName: 'cityName',
            communityType: 'communityType',
            countyName: 'countyName',
            location: 'location',
            name: 'name',
            provName: 'provName',
            state: 'state',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            buildingArea: 'number',
            cityName: 'string',
            communityType: 'number',
            countyName: 'string',
            location: 'string',
            name: 'string',
            provName: 'string',
            state: 'number',
            telephone: 'string',
        };
    }
}
exports.UpdateResidentInfoRequest = UpdateResidentInfoRequest;
class UpdateResidentInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateResidentInfoResponseBody = UpdateResidentInfoResponseBody;
class UpdateResidentInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateResidentInfoResponseBody,
        };
    }
}
exports.UpdateResidentInfoResponse = UpdateResidentInfoResponse;
class UpdateResidentMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateResidentMemberHeaders = UpdateResidentMemberHeaders;
class UpdateResidentMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            residentUpdateInfo: 'residentUpdateInfo',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            residentUpdateInfo: UpdateResidentMemberRequestResidentUpdateInfo,
            unionId: 'string',
        };
    }
}
exports.UpdateResidentMemberRequest = UpdateResidentMemberRequest;
class UpdateResidentMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateResidentMemberResponseBody = UpdateResidentMemberResponseBody;
class UpdateResidentMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateResidentMemberResponseBody,
        };
    }
}
exports.UpdateResidentMemberResponse = UpdateResidentMemberResponse;
class UpdateResidentUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateResidentUserHeaders = UpdateResidentUserHeaders;
class UpdateResidentUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            departmentId: 'departmentId',
            extField: 'extField',
            isRetainOldDept: 'isRetainOldDept',
            mobile: 'mobile',
            oldDepartmentId: 'oldDepartmentId',
            relateType: 'relateType',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            address: 'string',
            departmentId: 'number',
            extField: { 'type': 'array', 'itemType': UpdateResidentUserRequestExtField },
            isRetainOldDept: 'boolean',
            mobile: 'string',
            oldDepartmentId: 'number',
            relateType: 'string',
            userId: 'string',
            userName: 'string',
        };
    }
}
exports.UpdateResidentUserRequest = UpdateResidentUserRequest;
class UpdateResidentUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateResidentUserResponseBody = UpdateResidentUserResponseBody;
class UpdateResidentUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateResidentUserResponseBody,
        };
    }
}
exports.UpdateResidentUserResponse = UpdateResidentUserResponse;
class UpdateSpaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateSpaceHeaders = UpdateSpaceHeaders;
class UpdateSpaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spaceInfoVOList: 'spaceInfoVOList',
        };
    }
    static types() {
        return {
            spaceInfoVOList: { 'type': 'array', 'itemType': UpdateSpaceRequestSpaceInfoVOList },
        };
    }
}
exports.UpdateSpaceRequest = UpdateSpaceRequest;
class UpdateSpaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateSpaceResponseBody = UpdateSpaceResponseBody;
class UpdateSpaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateSpaceResponseBody,
        };
    }
}
exports.UpdateSpaceResponse = UpdateSpaceResponse;
class AddResidentMemberRequestResidentAddInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            isPropertyOwner: 'isPropertyOwner',
            memberDeptExtension: 'memberDeptExtension',
            mobile: 'mobile',
            name: 'name',
            relateType: 'relateType',
        };
    }
    static types() {
        return {
            deptId: 'number',
            isPropertyOwner: 'boolean',
            memberDeptExtension: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            mobile: 'string',
            name: 'string',
            relateType: 'string',
        };
    }
}
exports.AddResidentMemberRequestResidentAddInfo = AddResidentMemberRequestResidentAddInfo;
class AddResidentUsersRequestExtField extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            itemName: 'itemName',
            itemValue: 'itemValue',
        };
    }
    static types() {
        return {
            itemName: 'string',
            itemValue: 'string',
        };
    }
}
exports.AddResidentUsersRequestExtField = AddResidentUsersRequestExtField;
class DeleteSpaceResponseBodyDelFailedDept extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
}
exports.DeleteSpaceResponseBodyDelFailedDept = DeleteSpaceResponseBodyDelFailedDept;
class GetResidentInfoResponseBodyProjectManager extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatar: 'avatar',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            avatar: 'string',
            userId: 'string',
            userName: 'string',
        };
    }
}
exports.GetResidentInfoResponseBodyProjectManager = GetResidentInfoResponseBodyProjectManager;
class GetResidentMembersInfoResponseBodyResidenceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            extField: 'extField',
            isPropertyOwner: 'isPropertyOwner',
            name: 'name',
            relateType: 'relateType',
        };
    }
    static types() {
        return {
            active: 'boolean',
            extField: 'string',
            isPropertyOwner: 'boolean',
            name: 'string',
            relateType: 'string',
        };
    }
}
exports.GetResidentMembersInfoResponseBodyResidenceList = GetResidentMembersInfoResponseBodyResidenceList;
class GetSpacesInfoResponseBodySpaceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            billingArea: 'billingArea',
            buildingArea: 'buildingArea',
            floor: 'floor',
            houseState: 'houseState',
            isVirtual: 'isVirtual',
            parentReferId: 'parentReferId',
            referId: 'referId',
            spaceName: 'spaceName',
            tagCode: 'tagCode',
            type: 'type',
        };
    }
    static types() {
        return {
            billingArea: 'number',
            buildingArea: 'number',
            floor: 'string',
            houseState: 'number',
            isVirtual: 'number',
            parentReferId: 'number',
            referId: 'number',
            spaceName: 'string',
            tagCode: 'string',
            type: 'string',
        };
    }
}
exports.GetSpacesInfoResponseBodySpaceList = GetSpacesInfoResponseBodySpaceList;
class ListPointRulesResponseBodyPointRuleList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayLimitTimes: 'dayLimitTimes',
            extension: 'extension',
            groupId: 'groupId',
            orderId: 'orderId',
            ruleCode: 'ruleCode',
            ruleName: 'ruleName',
            score: 'score',
            status: 'status',
        };
    }
    static types() {
        return {
            dayLimitTimes: 'number',
            extension: 'string',
            groupId: 'number',
            orderId: 'number',
            ruleCode: 'string',
            ruleName: 'string',
            score: 'number',
            status: 'number',
        };
    }
}
exports.ListPointRulesResponseBodyPointRuleList = ListPointRulesResponseBodyPointRuleList;
class ListSubSpaceResponseBodySpaceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            billingArea: 'billingArea',
            buildingArea: 'buildingArea',
            floor: 'floor',
            houseState: 'houseState',
            isVirtual: 'isVirtual',
            parentReferId: 'parentReferId',
            referId: 'referId',
            spaceName: 'spaceName',
            tagCode: 'tagCode',
            type: 'type',
        };
    }
    static types() {
        return {
            billingArea: 'number',
            buildingArea: 'number',
            floor: 'string',
            houseState: 'number',
            isVirtual: 'number',
            parentReferId: 'number',
            referId: 'number',
            spaceName: 'string',
            tagCode: 'string',
            type: 'string',
        };
    }
}
exports.ListSubSpaceResponseBodySpaceList = ListSubSpaceResponseBodySpaceList;
class ListUncheckUsersResponseBodyValues extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            extension: 'extension',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            isPropertyOwner: 'isPropertyOwner',
            name: 'name',
            status: 'status',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            extension: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            isPropertyOwner: 'boolean',
            name: 'string',
            status: 'number',
            unionId: 'number',
        };
    }
}
exports.ListUncheckUsersResponseBodyValues = ListUncheckUsersResponseBodyValues;
class ListUserIndustryRolesResponseBodyRoleList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleId: 'roleId',
            roleName: 'roleName',
            tagCode: 'tagCode',
        };
    }
    static types() {
        return {
            roleId: 'number',
            roleName: 'string',
            tagCode: 'string',
        };
    }
}
exports.ListUserIndustryRolesResponseBodyRoleList = ListUserIndustryRolesResponseBodyRoleList;
class PagePointHistoryResponseBodyPointRecordList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createAt: 'createAt',
            ruleCode: 'ruleCode',
            ruleName: 'ruleName',
            score: 'score',
            userId: 'userId',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            createAt: 'number',
            ruleCode: 'string',
            ruleName: 'string',
            score: 'number',
            userId: 'string',
            uuid: 'string',
        };
    }
}
exports.PagePointHistoryResponseBodyPointRecordList = PagePointHistoryResponseBodyPointRecordList;
class SearchResidentResponseBodyResidenceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            extField: 'extField',
            isPropertyOwner: 'isPropertyOwner',
            name: 'name',
            relateType: 'relateType',
        };
    }
    static types() {
        return {
            active: 'boolean',
            extField: 'string',
            isPropertyOwner: 'boolean',
            name: 'string',
            relateType: 'string',
        };
    }
}
exports.SearchResidentResponseBodyResidenceList = SearchResidentResponseBodyResidenceList;
class UpdateResidentMemberRequestResidentUpdateInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            isPropertyOwner: 'isPropertyOwner',
            memberDeptExtension: 'memberDeptExtension',
            name: 'name',
            oldDeptId: 'oldDeptId',
            relateType: 'relateType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            isPropertyOwner: 'boolean',
            memberDeptExtension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            name: 'string',
            oldDeptId: 'number',
            relateType: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateResidentMemberRequestResidentUpdateInfo = UpdateResidentMemberRequestResidentUpdateInfo;
class UpdateResidentUserRequestExtField extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            itemName: 'itemName',
            itemValue: 'itemValue',
        };
    }
    static types() {
        return {
            itemName: 'string',
            itemValue: 'string',
        };
    }
}
exports.UpdateResidentUserRequestExtField = UpdateResidentUserRequestExtField;
class UpdateSpaceRequestSpaceInfoVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            billingArea: 'billingArea',
            buildingArea: 'buildingArea',
            buildingType: 'buildingType',
            deptId: 'deptId',
            floor: 'floor',
            houseState: 'houseState',
            houseType: 'houseType',
            name: 'name',
            parentDeptId: 'parentDeptId',
            tagCode: 'tagCode',
        };
    }
    static types() {
        return {
            billingArea: 'number',
            buildingArea: 'number',
            buildingType: 'number',
            deptId: 'number',
            floor: 'string',
            houseState: 'number',
            houseType: 'number',
            name: 'string',
            parentDeptId: 'number',
            tagCode: 'string',
        };
    }
}
exports.UpdateSpaceRequestSpaceInfoVOList = UpdateSpaceRequestSpaceInfoVOList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addPoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddPointHeaders({});
        return await this.addPointWithOptions(request, headers, runtime);
    }
    async addPointWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.actionTime)) {
            query["actionTime"] = request.actionTime;
        }
        if (!tea_util_1.default.isUnset(request.isCircle)) {
            query["isCircle"] = request.isCircle;
        }
        if (!tea_util_1.default.isUnset(request.ruleCode)) {
            query["ruleCode"] = request.ruleCode;
        }
        if (!tea_util_1.default.isUnset(request.ruleName)) {
            query["ruleName"] = request.ruleName;
        }
        if (!tea_util_1.default.isUnset(request.score)) {
            query["score"] = request.score;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            query["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("AddPoint", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/points`, "none", req, runtime), new AddPointResponse({}));
    }
    async addResidentDepartment(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddResidentDepartmentHeaders({});
        return await this.addResidentDepartmentWithOptions(request, headers, runtime);
    }
    async addResidentDepartmentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentName)) {
            query["departmentName"] = request.departmentName;
        }
        if (!tea_util_1.default.isUnset(request.isResidenceGroup)) {
            query["isResidenceGroup"] = request.isResidenceGroup;
        }
        if (!tea_util_1.default.isUnset(request.parentDepartmentId)) {
            query["parentDepartmentId"] = request.parentDepartmentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("AddResidentDepartment", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/departments`, "json", req, runtime), new AddResidentDepartmentResponse({}));
    }
    async addResidentMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddResidentMemberHeaders({});
        return await this.addResidentMemberWithOptions(request, headers, runtime);
    }
    async addResidentMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset($tea.toMap(request.residentAddInfo))) {
            body["residentAddInfo"] = request.residentAddInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("AddResidentMember", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/members`, "json", req, runtime), new AddResidentMemberResponse({}));
    }
    async addResidentUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddResidentUsersHeaders({});
        return await this.addResidentUsersWithOptions(request, headers, runtime);
    }
    async addResidentUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            query["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.extField)) {
            query["extField"] = request.extField;
        }
        if (!tea_util_1.default.isUnset(request.isLeaseholder)) {
            query["isLeaseholder"] = request.isLeaseholder;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.relateType)) {
            query["relateType"] = request.relateType;
        }
        if (!tea_util_1.default.isUnset(request.userName)) {
            query["userName"] = request.userName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("AddResidentUsers", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/users`, "json", req, runtime), new AddResidentUsersResponse({}));
    }
    async createResidentBlackBoard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateResidentBlackBoardHeaders({});
        return await this.createResidentBlackBoardWithOptions(request, headers, runtime);
    }
    async createResidentBlackBoardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.context)) {
            body["context"] = request.context;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        if (!tea_util_1.default.isUnset(request.sendTime)) {
            body["sendTime"] = request.sendTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateResidentBlackBoard", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/blackboards`, "json", req, runtime), new CreateResidentBlackBoardResponse({}));
    }
    async createSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSpaceHeaders({});
        return await this.createSpaceWithOptions(request, headers, runtime);
    }
    async createSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.billingArea)) {
            body["billingArea"] = request.billingArea;
        }
        if (!tea_util_1.default.isUnset(request.buildingArea)) {
            body["buildingArea"] = request.buildingArea;
        }
        if (!tea_util_1.default.isUnset(request.floor)) {
            body["floor"] = request.floor;
        }
        if (!tea_util_1.default.isUnset(request.houseState)) {
            body["houseState"] = request.houseState;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.parentDeptId)) {
            body["parentDeptId"] = request.parentDeptId;
        }
        if (!tea_util_1.default.isUnset(request.tagCode)) {
            body["tagCode"] = request.tagCode;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("CreateSpace", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/spaces`, "json", req, runtime), new CreateSpaceResponse({}));
    }
    async deleteResidentBlackBoard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteResidentBlackBoardHeaders({});
        return await this.deleteResidentBlackBoardWithOptions(request, headers, runtime);
    }
    async deleteResidentBlackBoardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.blackboardId)) {
            query["blackboardId"] = request.blackboardId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteResidentBlackBoard", "resident_1.0", "HTTP", "DELETE", "AK", `/v1.0/resident/blackboards`, "json", req, runtime), new DeleteResidentBlackBoardResponse({}));
    }
    async deleteResidentDepartment(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteResidentDepartmentHeaders({});
        return await this.deleteResidentDepartmentWithOptions(request, headers, runtime);
    }
    async deleteResidentDepartmentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("DeleteResidentDepartment", "resident_1.0", "HTTP", "DELETE", "AK", `/v1.0/resident/departments`, "json", req, runtime), new DeleteResidentDepartmentResponse({}));
    }
    async deleteSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteSpaceHeaders({});
        return await this.deleteSpaceWithOptions(request, headers, runtime);
    }
    async deleteSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("DeleteSpace", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/spaces/remove`, "json", req, runtime), new DeleteSpaceResponse({}));
    }
    async getConversationId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConversationIdHeaders({});
        return await this.getConversationIdWithOptions(request, headers, runtime);
    }
    async getConversationIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.chatId)) {
            query["chatId"] = request.chatId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetConversationId", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/conversations`, "json", req, runtime), new GetConversationIdResponse({}));
    }
    async getIndustryType() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetIndustryTypeHeaders({});
        return await this.getIndustryTypeWithOptions(headers, runtime);
    }
    async getIndustryTypeWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetIndustryType", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/organizations/industryTypes`, "json", req, runtime), new GetIndustryTypeResponse({}));
    }
    async getPropertyInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPropertyInfoHeaders({});
        return await this.getPropertyInfoWithOptions(request, headers, runtime);
    }
    async getPropertyInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.propertyCorpId)) {
            query["propertyCorpId"] = request.propertyCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetPropertyInfo", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/propertyInfos`, "json", req, runtime), new GetPropertyInfoResponse({}));
    }
    async getResidentInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetResidentInfoHeaders({});
        return await this.getResidentInfoWithOptions(request, headers, runtime);
    }
    async getResidentInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.residentCorpId)) {
            query["residentCorpId"] = request.residentCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetResidentInfo", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/residentInfos`, "json", req, runtime), new GetResidentInfoResponse({}));
    }
    async getResidentMembersInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetResidentMembersInfoHeaders({});
        return await this.getResidentMembersInfoWithOptions(request, headers, runtime);
    }
    async getResidentMembersInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.residentCropId)) {
            body["residentCropId"] = request.residentCropId;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("GetResidentMembersInfo", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/residences/query`, "json", req, runtime), new GetResidentMembersInfoResponse({}));
    }
    async getSpaceIdByType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSpaceIdByTypeHeaders({});
        return await this.getSpaceIdByTypeWithOptions(request, headers, runtime);
    }
    async getSpaceIdByTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentType)) {
            query["departmentType"] = request.departmentType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetSpaceIdByType", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/spaces/types`, "json", req, runtime), new GetSpaceIdByTypeResponse({}));
    }
    async getSpacesInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSpacesInfoHeaders({});
        return await this.getSpacesInfoWithOptions(request, headers, runtime);
    }
    async getSpacesInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.referIds)) {
            body["referIds"] = request.referIds;
        }
        if (!tea_util_1.default.isUnset(request.residentCorpId)) {
            body["residentCorpId"] = request.residentCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("GetSpacesInfo", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/spaces/query`, "json", req, runtime), new GetSpacesInfoResponse({}));
    }
    async listIndustryRoleUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListIndustryRoleUsersHeaders({});
        return await this.listIndustryRoleUsersWithOptions(request, headers, runtime);
    }
    async listIndustryRoleUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.tagCode)) {
            query["tagCode"] = request.tagCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListIndustryRoleUsers", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/industryRoles/users`, "json", req, runtime), new ListIndustryRoleUsersResponse({}));
    }
    async listPointRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPointRulesHeaders({});
        return await this.listPointRulesWithOptions(request, headers, runtime);
    }
    async listPointRulesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isCircle)) {
            query["isCircle"] = request.isCircle;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListPointRules", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/points/rules`, "json", req, runtime), new ListPointRulesResponse({}));
    }
    async listSubSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSubSpaceHeaders({});
        return await this.listSubSpaceWithOptions(request, headers, runtime);
    }
    async listSubSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.referId)) {
            query["referId"] = request.referId;
        }
        if (!tea_util_1.default.isUnset(request.residentCorpId)) {
            query["residentCorpId"] = request.residentCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListSubSpace", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/spaces/subSpaces`, "json", req, runtime), new ListSubSpaceResponse({}));
    }
    async listUncheckUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListUncheckUsersHeaders({});
        return await this.listUncheckUsersWithOptions(request, headers, runtime);
    }
    async listUncheckUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListUncheckUsers", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/organizations/noJoinUsers`, "json", req, runtime), new ListUncheckUsersResponse({}));
    }
    async listUserIndustryRoles(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListUserIndustryRolesHeaders({});
        return await this.listUserIndustryRolesWithOptions(request, headers, runtime);
    }
    async listUserIndustryRolesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("ListUserIndustryRoles", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/users/industryRoles`, "json", req, runtime), new ListUserIndustryRolesResponse({}));
    }
    async pagePointHistory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PagePointHistoryHeaders({});
        return await this.pagePointHistoryWithOptions(request, headers, runtime);
    }
    async pagePointHistoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isCircle)) {
            query["isCircle"] = request.isCircle;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("PagePointHistory", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/points/records`, "json", req, runtime), new PagePointHistoryResponse({}));
    }
    async removeResidentMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveResidentMemberHeaders({});
        return await this.removeResidentMemberWithOptions(request, headers, runtime);
    }
    async removeResidentMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("RemoveResidentMember", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/members/remove`, "json", req, runtime), new RemoveResidentMemberResponse({}));
    }
    async removeResidentUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveResidentUserHeaders({});
        return await this.removeResidentUserWithOptions(request, headers, runtime);
    }
    async removeResidentUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("RemoveResidentUser", "resident_1.0", "HTTP", "POST", "AK", `/v1.0/resident/users/remove`, "json", req, runtime), new RemoveResidentUserResponse({}));
    }
    async searchResident(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchResidentHeaders({});
        return await this.searchResidentWithOptions(request, headers, runtime);
    }
    async searchResidentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.residentCropId)) {
            query["residentCropId"] = request.residentCropId;
        }
        if (!tea_util_1.default.isUnset(request.searchWord)) {
            query["searchWord"] = request.searchWord;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("SearchResident", "resident_1.0", "HTTP", "GET", "AK", `/v1.0/resident/residences`, "json", req, runtime), new SearchResidentResponse({}));
    }
    async updateResideceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateResideceGroupHeaders({});
        return await this.updateResideceGroupWithOptions(request, headers, runtime);
    }
    async updateResideceGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.departmentName)) {
            query["departmentName"] = request.departmentName;
        }
        if (!tea_util_1.default.isUnset(request.managerUserId)) {
            query["managerUserId"] = request.managerUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("UpdateResideceGroup", "resident_1.0", "HTTP", "PUT", "AK", `/v1.0/resident/departments/updateResideceGroup`, "json", req, runtime), new UpdateResideceGroupResponse({}));
    }
    async updateResidence(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateResidenceHeaders({});
        return await this.updateResidenceWithOptions(request, headers, runtime);
    }
    async updateResidenceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.departmentName)) {
            query["departmentName"] = request.departmentName;
        }
        if (!tea_util_1.default.isUnset(request.destitute)) {
            query["destitute"] = request.destitute;
        }
        if (!tea_util_1.default.isUnset(request.grid)) {
            query["grid"] = request.grid;
        }
        if (!tea_util_1.default.isUnset(request.homeTel)) {
            query["homeTel"] = request.homeTel;
        }
        if (!tea_util_1.default.isUnset(request.managerUserId)) {
            query["managerUserId"] = request.managerUserId;
        }
        if (!tea_util_1.default.isUnset(request.parentDepartmentId)) {
            query["parentDepartmentId"] = request.parentDepartmentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("UpdateResidence", "resident_1.0", "HTTP", "PUT", "AK", `/v1.0/resident/departments/updateResidece`, "json", req, runtime), new UpdateResidenceResponse({}));
    }
    async updateResidentBlackBoard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateResidentBlackBoardHeaders({});
        return await this.updateResidentBlackBoardWithOptions(request, headers, runtime);
    }
    async updateResidentBlackBoardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.blackboardId)) {
            body["blackboardId"] = request.blackboardId;
        }
        if (!tea_util_1.default.isUnset(request.context)) {
            body["context"] = request.context;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateResidentBlackBoard", "resident_1.0", "HTTP", "PUT", "AK", `/v1.0/resident/blackboards`, "json", req, runtime), new UpdateResidentBlackBoardResponse({}));
    }
    async updateResidentInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateResidentInfoHeaders({});
        return await this.updateResidentInfoWithOptions(request, headers, runtime);
    }
    async updateResidentInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            body["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.buildingArea)) {
            body["buildingArea"] = request.buildingArea;
        }
        if (!tea_util_1.default.isUnset(request.cityName)) {
            body["cityName"] = request.cityName;
        }
        if (!tea_util_1.default.isUnset(request.communityType)) {
            body["communityType"] = request.communityType;
        }
        if (!tea_util_1.default.isUnset(request.countyName)) {
            body["countyName"] = request.countyName;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.provName)) {
            body["provName"] = request.provName;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            body["state"] = request.state;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateResidentInfo", "resident_1.0", "HTTP", "PUT", "AK", `/v1.0/resident/residences`, "json", req, runtime), new UpdateResidentInfoResponse({}));
    }
    async updateResidentMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateResidentMemberHeaders({});
        return await this.updateResidentMemberWithOptions(request, headers, runtime);
    }
    async updateResidentMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset($tea.toMap(request.residentUpdateInfo))) {
            body["residentUpdateInfo"] = request.residentUpdateInfo;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateResidentMember", "resident_1.0", "HTTP", "PUT", "AK", `/v1.0/resident/members`, "json", req, runtime), new UpdateResidentMemberResponse({}));
    }
    async updateResidentUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateResidentUserHeaders({});
        return await this.updateResidentUserWithOptions(request, headers, runtime);
    }
    async updateResidentUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            query["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.extField)) {
            query["extField"] = request.extField;
        }
        if (!tea_util_1.default.isUnset(request.isRetainOldDept)) {
            query["isRetainOldDept"] = request.isRetainOldDept;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.oldDepartmentId)) {
            query["oldDepartmentId"] = request.oldDepartmentId;
        }
        if (!tea_util_1.default.isUnset(request.relateType)) {
            query["relateType"] = request.relateType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userName)) {
            query["userName"] = request.userName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("UpdateResidentUser", "resident_1.0", "HTTP", "PUT", "AK", `/v1.0/resident/users`, "json", req, runtime), new UpdateResidentUserResponse({}));
    }
    async updateSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateSpaceHeaders({});
        return await this.updateSpaceWithOptions(request, headers, runtime);
    }
    async updateSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.spaceInfoVOList)) {
            body["spaceInfoVOList"] = request.spaceInfoVOList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("UpdateSpace", "resident_1.0", "HTTP", "PUT", "AK", `/v1.0/resident/spaces`, "json", req, runtime), new UpdateSpaceResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map