"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AvaliableTemplate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            processCode: 'processCode',
        };
    }
    static types() {
        return {
            name: 'string',
            processCode: 'string',
        };
    }
}
exports.AvaliableTemplate = AvaliableTemplate;
class FormComponent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            children: 'children',
            componentType: 'componentType',
            props: 'props',
        };
    }
    static types() {
        return {
            children: { 'type': 'array', 'itemType': FormComponent },
            componentType: 'string',
            props: FormComponentProps,
        };
    }
}
exports.FormComponent = FormComponent;
class FormComponentProps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addressModel: 'addressModel',
            align: 'align',
            asyncCondition: 'asyncCondition',
            availableTemplates: 'availableTemplates',
            bizAlias: 'bizAlias',
            bizType: 'bizType',
            choice: 'choice',
            commonBizType: 'commonBizType',
            componentId: 'componentId',
            content: 'content',
            dataSource: 'dataSource',
            disabled: 'disabled',
            duration: 'duration',
            format: 'format',
            formula: 'formula',
            invisible: 'invisible',
            label: 'label',
            limit: 'limit',
            link: 'link',
            mode: 'mode',
            multiple: 'multiple',
            options: 'options',
            placeholder: 'placeholder',
            print: 'print',
            required: 'required',
            statField: 'statField',
            tableViewMode: 'tableViewMode',
            unit: 'unit',
            upper: 'upper',
            verticalPrint: 'verticalPrint',
        };
    }
    static types() {
        return {
            addressModel: 'string',
            align: 'string',
            asyncCondition: 'boolean',
            availableTemplates: { 'type': 'array', 'itemType': AvaliableTemplate },
            bizAlias: 'string',
            bizType: 'string',
            choice: 'string',
            commonBizType: 'string',
            componentId: 'string',
            content: 'string',
            dataSource: FormDataSource,
            disabled: 'boolean',
            duration: 'boolean',
            format: 'string',
            formula: 'string',
            invisible: 'boolean',
            label: 'string',
            limit: 'number',
            link: 'string',
            mode: 'string',
            multiple: 'boolean',
            options: { 'type': 'array', 'itemType': SelectOption },
            placeholder: 'string',
            print: 'string',
            required: 'boolean',
            statField: { 'type': 'array', 'itemType': FormComponentPropsStatField },
            tableViewMode: 'string',
            unit: 'string',
            upper: 'string',
            verticalPrint: 'boolean',
        };
    }
}
exports.FormComponentProps = FormComponentProps;
class FormDataSource extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            target: 'target',
            type: 'type',
        };
    }
    static types() {
        return {
            target: FormDataSourceTarget,
            type: 'string',
        };
    }
}
exports.FormDataSource = FormDataSource;
class SelectOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'key',
            value: 'value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.SelectOption = SelectOption;
class FormCreateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.FormCreateHeaders = FormCreateHeaders;
class FormCreateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            formComponents: 'formComponents',
            name: 'name',
            processCode: 'processCode',
            templateConfig: 'templateConfig',
        };
    }
    static types() {
        return {
            description: 'string',
            formComponents: { 'type': 'array', 'itemType': FormComponent },
            name: 'string',
            processCode: 'string',
            templateConfig: FormCreateRequestTemplateConfig,
        };
    }
}
exports.FormCreateRequest = FormCreateRequest;
class FormCreateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: FormCreateResponseBodyResult,
        };
    }
}
exports.FormCreateResponseBody = FormCreateResponseBody;
class FormCreateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: FormCreateResponseBody,
        };
    }
}
exports.FormCreateResponse = FormCreateResponse;
class GetCrmProcCodesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCrmProcCodesHeaders = GetCrmProcCodesHeaders;
class GetCrmProcCodesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetCrmProcCodesResponseBody = GetCrmProcCodesResponseBody;
class GetCrmProcCodesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetCrmProcCodesResponseBody,
        };
    }
}
exports.GetCrmProcCodesResponse = GetCrmProcCodesResponse;
class GetProcessConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetProcessConfigHeaders = GetProcessConfigHeaders;
class GetProcessConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            procCode: 'procCode',
        };
    }
    static types() {
        return {
            procCode: 'string',
        };
    }
}
exports.GetProcessConfigRequest = GetProcessConfigRequest;
class GetProcessConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetProcessConfigResponseBodyResult,
        };
    }
}
exports.GetProcessConfigResponseBody = GetProcessConfigResponseBody;
class GetProcessConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetProcessConfigResponseBody,
        };
    }
}
exports.GetProcessConfigResponse = GetProcessConfigResponse;
class GrantCspaceAuthorizationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GrantCspaceAuthorizationHeaders = GrantCspaceAuthorizationHeaders;
class GrantCspaceAuthorizationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            durationSeconds: 'durationSeconds',
            spaceId: 'spaceId',
            type: 'type',
            userId: 'userId',
        };
    }
    static types() {
        return {
            durationSeconds: 'number',
            spaceId: 'string',
            type: 'string',
            userId: 'string',
        };
    }
}
exports.GrantCspaceAuthorizationRequest = GrantCspaceAuthorizationRequest;
class GrantCspaceAuthorizationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.GrantCspaceAuthorizationResponse = GrantCspaceAuthorizationResponse;
class ProcessForecastHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ProcessForecastHeaders = ProcessForecastHeaders;
class ProcessForecastRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            formComponentValues: 'formComponentValues',
            processCode: 'processCode',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            formComponentValues: { 'type': 'array', 'itemType': ProcessForecastRequestFormComponentValues },
            processCode: 'string',
            userId: 'string',
        };
    }
}
exports.ProcessForecastRequest = ProcessForecastRequest;
class ProcessForecastResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: ProcessForecastResponseBodyResult,
        };
    }
}
exports.ProcessForecastResponseBody = ProcessForecastResponseBody;
class ProcessForecastResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ProcessForecastResponseBody,
        };
    }
}
exports.ProcessForecastResponse = ProcessForecastResponse;
class QueryAllFormInstancesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllFormInstancesHeaders = QueryAllFormInstancesHeaders;
class QueryAllFormInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            formCode: 'formCode',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            formCode: 'string',
            maxResults: 'number',
            nextToken: 'string',
        };
    }
}
exports.QueryAllFormInstancesRequest = QueryAllFormInstancesRequest;
class QueryAllFormInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryAllFormInstancesResponseBodyResult,
        };
    }
}
exports.QueryAllFormInstancesResponseBody = QueryAllFormInstancesResponseBody;
class QueryAllFormInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllFormInstancesResponseBody,
        };
    }
}
exports.QueryAllFormInstancesResponse = QueryAllFormInstancesResponse;
class QueryAllProcessInstancesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAllProcessInstancesHeaders = QueryAllProcessInstancesHeaders;
class QueryAllProcessInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            endTimeInMills: 'endTimeInMills',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            processCode: 'processCode',
            startTimeInMills: 'startTimeInMills',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            endTimeInMills: 'number',
            maxResults: 'number',
            nextToken: 'string',
            processCode: 'string',
            startTimeInMills: 'number',
        };
    }
}
exports.QueryAllProcessInstancesRequest = QueryAllProcessInstancesRequest;
class QueryAllProcessInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryAllProcessInstancesResponseBodyResult,
        };
    }
}
exports.QueryAllProcessInstancesResponseBody = QueryAllProcessInstancesResponseBody;
class QueryAllProcessInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAllProcessInstancesResponseBody,
        };
    }
}
exports.QueryAllProcessInstancesResponse = QueryAllProcessInstancesResponse;
class QueryFormByBizTypeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryFormByBizTypeHeaders = QueryFormByBizTypeHeaders;
class QueryFormByBizTypeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            bizTypes: 'bizTypes',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            bizTypes: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryFormByBizTypeRequest = QueryFormByBizTypeRequest;
class QueryFormByBizTypeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryFormByBizTypeResponseBodyResult },
        };
    }
}
exports.QueryFormByBizTypeResponseBody = QueryFormByBizTypeResponseBody;
class QueryFormByBizTypeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryFormByBizTypeResponseBody,
        };
    }
}
exports.QueryFormByBizTypeResponse = QueryFormByBizTypeResponse;
class QueryFormInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryFormInstanceHeaders = QueryFormInstanceHeaders;
class QueryFormInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            formCode: 'formCode',
            formInstanceId: 'formInstanceId',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            formCode: 'string',
            formInstanceId: 'string',
        };
    }
}
exports.QueryFormInstanceRequest = QueryFormInstanceRequest;
class QueryFormInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            attributes: 'attributes',
            createTimestamp: 'createTimestamp',
            creator: 'creator',
            formCode: 'formCode',
            formInstDataList: 'formInstDataList',
            formInstanceId: 'formInstanceId',
            modifier: 'modifier',
            modifyTimestamp: 'modifyTimestamp',
            outBizCode: 'outBizCode',
            outInstanceId: 'outInstanceId',
            title: 'title',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            attributes: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            createTimestamp: 'number',
            creator: 'string',
            formCode: 'string',
            formInstDataList: { 'type': 'array', 'itemType': QueryFormInstanceResponseBodyFormInstDataList },
            formInstanceId: 'string',
            modifier: 'string',
            modifyTimestamp: 'number',
            outBizCode: 'string',
            outInstanceId: 'string',
            title: 'string',
        };
    }
}
exports.QueryFormInstanceResponseBody = QueryFormInstanceResponseBody;
class QueryFormInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryFormInstanceResponseBody,
        };
    }
}
exports.QueryFormInstanceResponse = QueryFormInstanceResponse;
class QuerySchemaByProcessCodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeHeaders = QuerySchemaByProcessCodeHeaders;
class QuerySchemaByProcessCodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            processCode: 'processCode',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            processCode: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeRequest = QuerySchemaByProcessCodeRequest;
class QuerySchemaByProcessCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QuerySchemaByProcessCodeResponseBodyResult,
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBody = QuerySchemaByProcessCodeResponseBody;
class QuerySchemaByProcessCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySchemaByProcessCodeResponseBody,
        };
    }
}
exports.QuerySchemaByProcessCodeResponse = QuerySchemaByProcessCodeResponse;
class StartProcessInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.StartProcessInstanceHeaders = StartProcessInstanceHeaders;
class StartProcessInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            approvers: 'approvers',
            ccList: 'ccList',
            ccPosition: 'ccPosition',
            deptId: 'deptId',
            formComponentValues: 'formComponentValues',
            microappAgentId: 'microappAgentId',
            originatorUserId: 'originatorUserId',
            processCode: 'processCode',
            targetSelectActioners: 'targetSelectActioners',
        };
    }
    static types() {
        return {
            approvers: { 'type': 'array', 'itemType': StartProcessInstanceRequestApprovers },
            ccList: { 'type': 'array', 'itemType': 'string' },
            ccPosition: 'string',
            deptId: 'number',
            formComponentValues: { 'type': 'array', 'itemType': StartProcessInstanceRequestFormComponentValues },
            microappAgentId: 'number',
            originatorUserId: 'string',
            processCode: 'string',
            targetSelectActioners: { 'type': 'array', 'itemType': StartProcessInstanceRequestTargetSelectActioners },
        };
    }
}
exports.StartProcessInstanceRequest = StartProcessInstanceRequest;
class StartProcessInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
        };
    }
}
exports.StartProcessInstanceResponseBody = StartProcessInstanceResponseBody;
class StartProcessInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: StartProcessInstanceResponseBody,
        };
    }
}
exports.StartProcessInstanceResponse = StartProcessInstanceResponse;
class FormComponentPropsStatField extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            componentId: 'componentId',
            label: 'label',
            upper: 'upper',
        };
    }
    static types() {
        return {
            componentId: 'string',
            label: 'string',
            upper: 'string',
        };
    }
}
exports.FormComponentPropsStatField = FormComponentPropsStatField;
class FormDataSourceTarget extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            appUuid: 'appUuid',
            bizType: 'bizType',
            formCode: 'formCode',
        };
    }
    static types() {
        return {
            appType: 'number',
            appUuid: 'string',
            bizType: 'string',
            formCode: 'string',
        };
    }
}
exports.FormDataSourceTarget = FormDataSourceTarget;
class FormCreateRequestTemplateConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dirId: 'dirId',
            disableDeleteProcess: 'disableDeleteProcess',
            disableFormEdit: 'disableFormEdit',
            disableHomepage: 'disableHomepage',
            disableResubmit: 'disableResubmit',
            disableStopProcessButton: 'disableStopProcessButton',
            hidden: 'hidden',
            originDirId: 'originDirId',
        };
    }
    static types() {
        return {
            dirId: 'string',
            disableDeleteProcess: 'boolean',
            disableFormEdit: 'boolean',
            disableHomepage: 'boolean',
            disableResubmit: 'boolean',
            disableStopProcessButton: 'boolean',
            hidden: 'boolean',
            originDirId: 'string',
        };
    }
}
exports.FormCreateRequestTemplateConfig = FormCreateRequestTemplateConfig;
class FormCreateResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processCode: 'processCode',
        };
    }
    static types() {
        return {
            processCode: 'string',
        };
    }
}
exports.FormCreateResponseBodyResult = FormCreateResponseBodyResult;
class GetProcessConfigResponseBodyResultCommentConf extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commentDescription: 'commentDescription',
            commentHiddenForProposer: 'commentHiddenForProposer',
            commentRequired: 'commentRequired',
        };
    }
    static types() {
        return {
            commentDescription: 'string',
            commentHiddenForProposer: 'boolean',
            commentRequired: 'boolean',
        };
    }
}
exports.GetProcessConfigResponseBodyResultCommentConf = GetProcessConfigResponseBodyResultCommentConf;
class GetProcessConfigResponseBodyResultHandSignConf extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            handSignEnable: 'handSignEnable',
            resignEnable: 'resignEnable',
        };
    }
    static types() {
        return {
            handSignEnable: 'boolean',
            resignEnable: 'boolean',
        };
    }
}
exports.GetProcessConfigResponseBodyResultHandSignConf = GetProcessConfigResponseBodyResultHandSignConf;
class GetProcessConfigResponseBodyResultSubstituteSubmitConfSubmitterList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            type: 'type',
            value: 'value',
        };
    }
    static types() {
        return {
            name: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.GetProcessConfigResponseBodyResultSubstituteSubmitConfSubmitterList = GetProcessConfigResponseBodyResultSubstituteSubmitConfSubmitterList;
class GetProcessConfigResponseBodyResultSubstituteSubmitConf extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enable: 'enable',
            submitterList: 'submitterList',
        };
    }
    static types() {
        return {
            enable: 'boolean',
            submitterList: { 'type': 'array', 'itemType': GetProcessConfigResponseBodyResultSubstituteSubmitConfSubmitterList },
        };
    }
}
exports.GetProcessConfigResponseBodyResultSubstituteSubmitConf = GetProcessConfigResponseBodyResultSubstituteSubmitConf;
class GetProcessConfigResponseBodyResultTitleGenRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            express: 'express',
            type: 'type',
        };
    }
    static types() {
        return {
            express: 'string',
            type: 'number',
        };
    }
}
exports.GetProcessConfigResponseBodyResultTitleGenRule = GetProcessConfigResponseBodyResultTitleGenRule;
class GetProcessConfigResponseBodyResultVisibility extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'type',
            value: 'value',
        };
    }
    static types() {
        return {
            type: 'number',
            value: 'string',
        };
    }
}
exports.GetProcessConfigResponseBodyResultVisibility = GetProcessConfigResponseBodyResultVisibility;
class GetProcessConfigResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            abstractGenRule: 'abstractGenRule',
            activityAuth: 'activityAuth',
            allowRevoke: 'allowRevoke',
            appendEnable: 'appendEnable',
            autoExecuteOriginatorTasks: 'autoExecuteOriginatorTasks',
            bizCategoryId: 'bizCategoryId',
            bizType: 'bizType',
            commentConf: 'commentConf',
            duplicateRemoval: 'duplicateRemoval',
            formSchema: 'formSchema',
            handSignConf: 'handSignConf',
            managers: 'managers',
            name: 'name',
            processAppType: 'processAppType',
            processConfig: 'processConfig',
            staticProc: 'staticProc',
            substituteSubmitConf: 'substituteSubmitConf',
            titleGenRule: 'titleGenRule',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            abstractGenRule: { 'type': 'array', 'itemType': 'string' },
            activityAuth: 'string',
            allowRevoke: 'boolean',
            appendEnable: 'boolean',
            autoExecuteOriginatorTasks: 'boolean',
            bizCategoryId: 'string',
            bizType: 'string',
            commentConf: GetProcessConfigResponseBodyResultCommentConf,
            duplicateRemoval: 'string',
            formSchema: 'string',
            handSignConf: GetProcessConfigResponseBodyResultHandSignConf,
            managers: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            processAppType: 'boolean',
            processConfig: 'string',
            staticProc: 'boolean',
            substituteSubmitConf: GetProcessConfigResponseBodyResultSubstituteSubmitConf,
            titleGenRule: GetProcessConfigResponseBodyResultTitleGenRule,
            visibility: { 'type': 'array', 'itemType': GetProcessConfigResponseBodyResultVisibility },
        };
    }
}
exports.GetProcessConfigResponseBodyResult = GetProcessConfigResponseBodyResult;
class ProcessForecastRequestFormComponentValuesDetailsDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            componentType: 'componentType',
            extValue: 'extValue',
            id: 'id',
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            componentType: 'string',
            extValue: 'string',
            id: 'string',
            name: 'string',
            value: 'string',
        };
    }
}
exports.ProcessForecastRequestFormComponentValuesDetailsDetails = ProcessForecastRequestFormComponentValuesDetailsDetails;
class ProcessForecastRequestFormComponentValuesDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            details: 'details',
            extValue: 'extValue',
            id: 'id',
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            details: { 'type': 'array', 'itemType': ProcessForecastRequestFormComponentValuesDetailsDetails },
            extValue: 'string',
            id: 'string',
            name: 'string',
            value: 'string',
        };
    }
}
exports.ProcessForecastRequestFormComponentValuesDetails = ProcessForecastRequestFormComponentValuesDetails;
class ProcessForecastRequestFormComponentValues extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            componentType: 'componentType',
            details: 'details',
            extValue: 'extValue',
            id: 'id',
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            componentType: 'string',
            details: { 'type': 'array', 'itemType': ProcessForecastRequestFormComponentValuesDetails },
            extValue: 'string',
            id: 'string',
            name: 'string',
            value: 'string',
        };
    }
}
exports.ProcessForecastRequestFormComponentValues = ProcessForecastRequestFormComponentValues;
class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeApprovals extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userName: 'userName',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            userName: 'string',
            workNo: 'string',
        };
    }
}
exports.ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeApprovals = ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeApprovals;
class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelNames: 'labelNames',
            labels: 'labels',
        };
    }
    static types() {
        return {
            labelNames: 'string',
            labels: 'string',
        };
    }
}
exports.ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeLabels = ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeLabels;
class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            approvals: 'approvals',
            labels: 'labels',
        };
    }
    static types() {
        return {
            approvals: { 'type': 'array', 'itemType': ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeApprovals },
            labels: { 'type': 'array', 'itemType': ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeLabels },
        };
    }
}
exports.ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRange = ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRange;
class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActor extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actorActivateType: 'actorActivateType',
            actorKey: 'actorKey',
            actorSelectionRange: 'actorSelectionRange',
            actorSelectionType: 'actorSelectionType',
            actorType: 'actorType',
            allowedMulti: 'allowedMulti',
            approvalMethod: 'approvalMethod',
            approvalType: 'approvalType',
            required: 'required',
        };
    }
    static types() {
        return {
            actorActivateType: 'string',
            actorKey: 'string',
            actorSelectionRange: ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRange,
            actorSelectionType: 'string',
            actorType: 'string',
            allowedMulti: 'boolean',
            approvalMethod: 'string',
            approvalType: 'string',
            required: 'boolean',
        };
    }
}
exports.ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActor = ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActor;
class ProcessForecastResponseBodyResultWorkflowActivityRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            activityName: 'activityName',
            activityType: 'activityType',
            isTargetSelect: 'isTargetSelect',
            prevActivityId: 'prevActivityId',
            workflowActor: 'workflowActor',
        };
    }
    static types() {
        return {
            activityId: 'string',
            activityName: 'string',
            activityType: 'string',
            isTargetSelect: 'boolean',
            prevActivityId: 'string',
            workflowActor: ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActor,
        };
    }
}
exports.ProcessForecastResponseBodyResultWorkflowActivityRules = ProcessForecastResponseBodyResultWorkflowActivityRules;
class ProcessForecastResponseBodyResultWorkflowForecastNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            outId: 'outId',
        };
    }
    static types() {
        return {
            activityId: 'string',
            outId: 'string',
        };
    }
}
exports.ProcessForecastResponseBodyResultWorkflowForecastNodes = ProcessForecastResponseBodyResultWorkflowForecastNodes;
class ProcessForecastResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isForecastSuccess: 'isForecastSuccess',
            isStaticWorkflow: 'isStaticWorkflow',
            processCode: 'processCode',
            processId: 'processId',
            userId: 'userId',
            workflowActivityRules: 'workflowActivityRules',
            workflowForecastNodes: 'workflowForecastNodes',
        };
    }
    static types() {
        return {
            isForecastSuccess: 'boolean',
            isStaticWorkflow: 'boolean',
            processCode: 'string',
            processId: 'number',
            userId: 'string',
            workflowActivityRules: { 'type': 'array', 'itemType': ProcessForecastResponseBodyResultWorkflowActivityRules },
            workflowForecastNodes: { 'type': 'array', 'itemType': ProcessForecastResponseBodyResultWorkflowForecastNodes },
        };
    }
}
exports.ProcessForecastResponseBodyResult = ProcessForecastResponseBodyResult;
class QueryAllFormInstancesResponseBodyResultValuesFormInstDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            componentType: 'componentType',
            extendValue: 'extendValue',
            key: 'key',
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            componentType: 'string',
            extendValue: 'string',
            key: 'string',
            label: 'string',
            value: 'string',
        };
    }
}
exports.QueryAllFormInstancesResponseBodyResultValuesFormInstDataList = QueryAllFormInstancesResponseBodyResultValuesFormInstDataList;
class QueryAllFormInstancesResponseBodyResultValues extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            attributes: 'attributes',
            createTimestamp: 'createTimestamp',
            creator: 'creator',
            formCode: 'formCode',
            formInstDataList: 'formInstDataList',
            formInstanceId: 'formInstanceId',
            modifier: 'modifier',
            modifyTimestamp: 'modifyTimestamp',
            outBizCode: 'outBizCode',
            outInstanceId: 'outInstanceId',
            title: 'title',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            attributes: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            createTimestamp: 'number',
            creator: 'string',
            formCode: 'string',
            formInstDataList: { 'type': 'array', 'itemType': QueryAllFormInstancesResponseBodyResultValuesFormInstDataList },
            formInstanceId: 'string',
            modifier: 'string',
            modifyTimestamp: 'number',
            outBizCode: 'string',
            outInstanceId: 'string',
            title: 'string',
        };
    }
}
exports.QueryAllFormInstancesResponseBodyResultValues = QueryAllFormInstancesResponseBodyResultValues;
class QueryAllFormInstancesResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            values: 'values',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            maxResults: 'number',
            nextToken: 'string',
            values: { 'type': 'array', 'itemType': QueryAllFormInstancesResponseBodyResultValues },
        };
    }
}
exports.QueryAllFormInstancesResponseBodyResult = QueryAllFormInstancesResponseBodyResult;
class QueryAllProcessInstancesResponseBodyResultListFormComponentValues extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extValue: 'extValue',
            id: 'id',
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            extValue: 'string',
            id: 'string',
            name: 'string',
            value: 'string',
        };
    }
}
exports.QueryAllProcessInstancesResponseBodyResultListFormComponentValues = QueryAllProcessInstancesResponseBodyResultListFormComponentValues;
class QueryAllProcessInstancesResponseBodyResultListOperationRecordsAttachments extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileSize: 'string',
            fileType: 'string',
        };
    }
}
exports.QueryAllProcessInstancesResponseBodyResultListOperationRecordsAttachments = QueryAllProcessInstancesResponseBodyResultListOperationRecordsAttachments;
class QueryAllProcessInstancesResponseBodyResultListOperationRecords extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachments: 'attachments',
            operationType: 'operationType',
            remark: 'remark',
            result: 'result',
            timestamp: 'timestamp',
            userId: 'userId',
        };
    }
    static types() {
        return {
            attachments: { 'type': 'array', 'itemType': QueryAllProcessInstancesResponseBodyResultListOperationRecordsAttachments },
            operationType: 'string',
            remark: 'string',
            result: 'string',
            timestamp: 'number',
            userId: 'string',
        };
    }
}
exports.QueryAllProcessInstancesResponseBodyResultListOperationRecords = QueryAllProcessInstancesResponseBodyResultListOperationRecords;
class QueryAllProcessInstancesResponseBodyResultListTasks extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            createTimestamp: 'createTimestamp',
            finishTimestamp: 'finishTimestamp',
            result: 'result',
            status: 'status',
            taskId: 'taskId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            activityId: 'string',
            createTimestamp: 'number',
            finishTimestamp: 'number',
            result: 'string',
            status: 'string',
            taskId: 'number',
            userId: 'string',
        };
    }
}
exports.QueryAllProcessInstancesResponseBodyResultListTasks = QueryAllProcessInstancesResponseBodyResultListTasks;
class QueryAllProcessInstancesResponseBodyResultList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachedProcessInstanceIds: 'attachedProcessInstanceIds',
            businessId: 'businessId',
            createTime: 'createTime',
            finishTime: 'finishTime',
            formComponentValues: 'formComponentValues',
            mainProcessInstanceId: 'mainProcessInstanceId',
            operationRecords: 'operationRecords',
            originatorDeptId: 'originatorDeptId',
            originatorUserid: 'originatorUserid',
            processInstanceId: 'processInstanceId',
            result: 'result',
            status: 'status',
            tasks: 'tasks',
            title: 'title',
        };
    }
    static types() {
        return {
            attachedProcessInstanceIds: 'string',
            businessId: 'string',
            createTime: 'number',
            finishTime: 'number',
            formComponentValues: { 'type': 'array', 'itemType': QueryAllProcessInstancesResponseBodyResultListFormComponentValues },
            mainProcessInstanceId: 'string',
            operationRecords: { 'type': 'array', 'itemType': QueryAllProcessInstancesResponseBodyResultListOperationRecords },
            originatorDeptId: 'string',
            originatorUserid: 'string',
            processInstanceId: 'string',
            result: 'string',
            status: 'string',
            tasks: { 'type': 'array', 'itemType': QueryAllProcessInstancesResponseBodyResultListTasks },
            title: 'string',
        };
    }
}
exports.QueryAllProcessInstancesResponseBodyResultList = QueryAllProcessInstancesResponseBodyResultList;
class QueryAllProcessInstancesResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryAllProcessInstancesResponseBodyResultList },
            maxResults: 'number',
            nextToken: 'string',
        };
    }
}
exports.QueryAllProcessInstancesResponseBodyResult = QueryAllProcessInstancesResponseBodyResult;
class QueryFormByBizTypeResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            appUuid: 'appUuid',
            bizType: 'bizType',
            content: 'content',
            createTime: 'createTime',
            creator: 'creator',
            formCode: 'formCode',
            formUuid: 'formUuid',
            memo: 'memo',
            modifedTime: 'modifedTime',
            name: 'name',
            ownerId: 'ownerId',
            status: 'status',
        };
    }
    static types() {
        return {
            appType: 'number',
            appUuid: 'string',
            bizType: 'string',
            content: 'string',
            createTime: 'number',
            creator: 'string',
            formCode: 'string',
            formUuid: 'string',
            memo: 'string',
            modifedTime: 'number',
            name: 'string',
            ownerId: 'string',
            status: 'string',
        };
    }
}
exports.QueryFormByBizTypeResponseBodyResult = QueryFormByBizTypeResponseBodyResult;
class QueryFormInstanceResponseBodyFormInstDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            componentType: 'componentType',
            extendValue: 'extendValue',
            key: 'key',
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            componentType: 'string',
            extendValue: 'string',
            key: 'string',
            label: 'string',
            value: 'string',
        };
    }
}
exports.QueryFormInstanceResponseBodyFormInstDataList = QueryFormInstanceResponseBodyFormInstDataList;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildrenProps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            id: 'id',
            label: 'label',
            required: 'required',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            id: 'string',
            label: 'string',
            required: 'boolean',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildrenProps = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildrenProps;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildren extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            componentName: 'componentName',
            props: 'props',
        };
    }
    static types() {
        return {
            componentName: 'string',
            props: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildrenProps,
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildren = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildren;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkageTargets extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            behavior: 'behavior',
            fieldId: 'fieldId',
        };
    }
    static types() {
        return {
            behavior: 'string',
            fieldId: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkageTargets = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkageTargets;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkage extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targets: 'targets',
            value: 'value',
        };
    }
    static types() {
        return {
            targets: { 'type': 'array', 'itemType': QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkageTargets },
            value: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkage = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkage;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsObjOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            value: 'value',
        };
    }
    static types() {
        return {
            value: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsObjOptions = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsObjOptions;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsPush extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendanceRule: 'attendanceRule',
            pushSwitch: 'pushSwitch',
            pushTag: 'pushTag',
        };
    }
    static types() {
        return {
            attendanceRule: 'number',
            pushSwitch: 'number',
            pushTag: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsPush = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsPush;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsStatField extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            label: 'label',
            unit: 'unit',
            upper: 'upper',
        };
    }
    static types() {
        return {
            id: 'string',
            label: 'string',
            unit: 'string',
            upper: 'boolean',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsStatField = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsStatField;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsProps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionName: 'actionName',
            align: 'align',
            appId: 'appId',
            asyncCondition: 'asyncCondition',
            attendTypeLabel: 'attendTypeLabel',
            behaviorLinkage: 'behaviorLinkage',
            bizAlias: 'bizAlias',
            bizType: 'bizType',
            childFieldVisible: 'childFieldVisible',
            choice: 'choice',
            commonBizType: 'commonBizType',
            disabled: 'disabled',
            duration: 'duration',
            durationLabel: 'durationLabel',
            eSign: 'eSign',
            extract: 'extract',
            fieldsInfo: 'fieldsInfo',
            format: 'format',
            formula: 'formula',
            hidden: 'hidden',
            hiddenInApprovalDetail: 'hiddenInApprovalDetail',
            hideLabel: 'hideLabel',
            holidayOptions: 'holidayOptions',
            id: 'id',
            label: 'label',
            labelEditableFreeze: 'labelEditableFreeze',
            link: 'link',
            mainTitle: 'mainTitle',
            notPrint: 'notPrint',
            notUpper: 'notUpper',
            objOptions: 'objOptions',
            options: 'options',
            payEnable: 'payEnable',
            placeholder: 'placeholder',
            push: 'push',
            pushToAttendance: 'pushToAttendance',
            pushToCalendar: 'pushToCalendar',
            required: 'required',
            requiredEditableFreeze: 'requiredEditableFreeze',
            showAttendOptions: 'showAttendOptions',
            staffStatusEnabled: 'staffStatusEnabled',
            statField: 'statField',
            unit: 'unit',
            useCalendar: 'useCalendar',
            verticalPrint: 'verticalPrint',
        };
    }
    static types() {
        return {
            actionName: 'string',
            align: 'string',
            appId: 'number',
            asyncCondition: 'boolean',
            attendTypeLabel: 'string',
            behaviorLinkage: { 'type': 'array', 'itemType': QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkage },
            bizAlias: 'string',
            bizType: 'string',
            childFieldVisible: 'boolean',
            choice: 'number',
            commonBizType: 'string',
            disabled: 'boolean',
            duration: 'boolean',
            durationLabel: 'string',
            eSign: 'boolean',
            extract: 'boolean',
            fieldsInfo: 'string',
            format: 'string',
            formula: 'string',
            hidden: 'boolean',
            hiddenInApprovalDetail: 'boolean',
            hideLabel: 'boolean',
            holidayOptions: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
            id: 'string',
            label: 'string',
            labelEditableFreeze: 'boolean',
            link: 'string',
            mainTitle: 'string',
            notPrint: 'string',
            notUpper: 'string',
            objOptions: { 'type': 'array', 'itemType': QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsObjOptions },
            options: { 'type': 'array', 'itemType': 'string' },
            payEnable: 'boolean',
            placeholder: 'string',
            push: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsPush,
            pushToAttendance: 'boolean',
            pushToCalendar: 'number',
            required: 'boolean',
            requiredEditableFreeze: 'boolean',
            showAttendOptions: 'boolean',
            staffStatusEnabled: 'boolean',
            statField: { 'type': 'array', 'itemType': QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsStatField },
            unit: 'string',
            useCalendar: 'boolean',
            verticalPrint: 'boolean',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsProps = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsProps;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            children: 'children',
            componentName: 'componentName',
            props: 'props',
        };
    }
    static types() {
        return {
            children: { 'type': 'array', 'itemType': QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildren },
            componentName: 'string',
            props: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsProps,
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContentItems = QuerySchemaByProcessCodeResponseBodyResultSchemaContentItems;
class QuerySchemaByProcessCodeResponseBodyResultSchemaContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            icon: 'icon',
            items: 'items',
            title: 'title',
        };
    }
    static types() {
        return {
            icon: 'string',
            items: { 'type': 'array', 'itemType': QuerySchemaByProcessCodeResponseBodyResultSchemaContentItems },
            title: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResultSchemaContent = QuerySchemaByProcessCodeResponseBodyResultSchemaContent;
class QuerySchemaByProcessCodeResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            appUuid: 'appUuid',
            bizType: 'bizType',
            creatorUid: 'creatorUid',
            creatorUserId: 'creatorUserId',
            customSetting: 'customSetting',
            engineType: 'engineType',
            formCode: 'formCode',
            formUuid: 'formUuid',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            icon: 'icon',
            listOrder: 'listOrder',
            memo: 'memo',
            name: 'name',
            ownerId: 'ownerId',
            ownerIdType: 'ownerIdType',
            procType: 'procType',
            schemaContent: 'schemaContent',
            status: 'status',
            visibleRange: 'visibleRange',
        };
    }
    static types() {
        return {
            appType: 'number',
            appUuid: 'string',
            bizType: 'string',
            creatorUid: 'number',
            creatorUserId: 'string',
            customSetting: 'string',
            engineType: 'number',
            formCode: 'string',
            formUuid: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            icon: 'string',
            listOrder: 'number',
            memo: 'string',
            name: 'string',
            ownerId: 'string',
            ownerIdType: 'string',
            procType: 'string',
            schemaContent: QuerySchemaByProcessCodeResponseBodyResultSchemaContent,
            status: 'string',
            visibleRange: 'string',
        };
    }
}
exports.QuerySchemaByProcessCodeResponseBodyResult = QuerySchemaByProcessCodeResponseBodyResult;
class StartProcessInstanceRequestApprovers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionType: 'actionType',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            actionType: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.StartProcessInstanceRequestApprovers = StartProcessInstanceRequestApprovers;
class StartProcessInstanceRequestFormComponentValuesDetailsDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            componentType: 'componentType',
            extValue: 'extValue',
            id: 'id',
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            componentType: 'string',
            extValue: 'string',
            id: 'string',
            name: 'string',
            value: 'string',
        };
    }
}
exports.StartProcessInstanceRequestFormComponentValuesDetailsDetails = StartProcessInstanceRequestFormComponentValuesDetailsDetails;
class StartProcessInstanceRequestFormComponentValuesDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            details: 'details',
            extValue: 'extValue',
            id: 'id',
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            details: { 'type': 'array', 'itemType': StartProcessInstanceRequestFormComponentValuesDetailsDetails },
            extValue: 'string',
            id: 'string',
            name: 'string',
            value: 'string',
        };
    }
}
exports.StartProcessInstanceRequestFormComponentValuesDetails = StartProcessInstanceRequestFormComponentValuesDetails;
class StartProcessInstanceRequestFormComponentValues extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAlias: 'bizAlias',
            componentType: 'componentType',
            details: 'details',
            extValue: 'extValue',
            id: 'id',
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            bizAlias: 'string',
            componentType: 'string',
            details: { 'type': 'array', 'itemType': StartProcessInstanceRequestFormComponentValuesDetails },
            extValue: 'string',
            id: 'string',
            name: 'string',
            value: 'string',
        };
    }
}
exports.StartProcessInstanceRequestFormComponentValues = StartProcessInstanceRequestFormComponentValues;
class StartProcessInstanceRequestTargetSelectActioners extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionerKey: 'actionerKey',
            actionerUserIds: 'actionerUserIds',
        };
    }
    static types() {
        return {
            actionerKey: 'string',
            actionerUserIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.StartProcessInstanceRequestTargetSelectActioners = StartProcessInstanceRequestTargetSelectActioners;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async formCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FormCreateHeaders({});
        return await this.formCreateWithOptions(request, headers, runtime);
    }
    async formCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.formComponents)) {
            body["formComponents"] = request.formComponents;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            body["processCode"] = request.processCode;
        }
        if (!tea_util_1.default.isUnset($tea.toMap(request.templateConfig))) {
            body["templateConfig"] = request.templateConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("FormCreate", "workflow_1.0", "HTTP", "POST", "AK", `/v1.0/workflow/forms`, "json", req, runtime), new FormCreateResponse({}));
    }
    async getCrmProcCodes() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCrmProcCodesHeaders({});
        return await this.getCrmProcCodesWithOptions(headers, runtime);
    }
    async getCrmProcCodesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        return $tea.cast(await this.doROARequest("GetCrmProcCodes", "workflow_1.0", "HTTP", "GET", "AK", `/v1.0/workflow/crm/processes`, "json", req, runtime), new GetCrmProcCodesResponse({}));
    }
    async getProcessConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProcessConfigHeaders({});
        return await this.getProcessConfigWithOptions(request, headers, runtime);
    }
    async getProcessConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.procCode)) {
            query["procCode"] = request.procCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("GetProcessConfig", "workflow_1.0", "HTTP", "GET", "AK", `/v1.0/workflow/crm/processes/configurations`, "json", req, runtime), new GetProcessConfigResponse({}));
    }
    async grantCspaceAuthorization(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GrantCspaceAuthorizationHeaders({});
        return await this.grantCspaceAuthorizationWithOptions(request, headers, runtime);
    }
    async grantCspaceAuthorizationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.durationSeconds)) {
            body["durationSeconds"] = request.durationSeconds;
        }
        if (!tea_util_1.default.isUnset(request.spaceId)) {
            body["spaceId"] = request.spaceId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("GrantCspaceAuthorization", "workflow_1.0", "HTTP", "POST", "AK", `/v1.0/workflow/spaces/authorize`, "none", req, runtime), new GrantCspaceAuthorizationResponse({}));
    }
    async processForecast(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ProcessForecastHeaders({});
        return await this.processForecastWithOptions(request, headers, runtime);
    }
    async processForecastWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.formComponentValues)) {
            body["formComponentValues"] = request.formComponentValues;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            body["processCode"] = request.processCode;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("ProcessForecast", "workflow_1.0", "HTTP", "POST", "AK", `/v1.0/workflow/processes/forecast`, "json", req, runtime), new ProcessForecastResponse({}));
    }
    async queryAllFormInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllFormInstancesHeaders({});
        return await this.queryAllFormInstancesWithOptions(request, headers, runtime);
    }
    async queryAllFormInstancesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appUuid)) {
            query["appUuid"] = request.appUuid;
        }
        if (!tea_util_1.default.isUnset(request.formCode)) {
            query["formCode"] = request.formCode;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllFormInstances", "workflow_1.0", "HTTP", "GET", "AK", `/v1.0/workflow/forms/pages/instances`, "json", req, runtime), new QueryAllFormInstancesResponse({}));
    }
    async queryAllProcessInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllProcessInstancesHeaders({});
        return await this.queryAllProcessInstancesWithOptions(request, headers, runtime);
    }
    async queryAllProcessInstancesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appUuid)) {
            query["appUuid"] = request.appUuid;
        }
        if (!tea_util_1.default.isUnset(request.endTimeInMills)) {
            query["endTimeInMills"] = request.endTimeInMills;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            query["processCode"] = request.processCode;
        }
        if (!tea_util_1.default.isUnset(request.startTimeInMills)) {
            query["startTimeInMills"] = request.startTimeInMills;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryAllProcessInstances", "workflow_1.0", "HTTP", "GET", "AK", `/v1.0/workflow/processes/pages/instances`, "json", req, runtime), new QueryAllProcessInstancesResponse({}));
    }
    async queryFormByBizType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryFormByBizTypeHeaders({});
        return await this.queryFormByBizTypeWithOptions(request, headers, runtime);
    }
    async queryFormByBizTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUuid)) {
            body["appUuid"] = request.appUuid;
        }
        if (!tea_util_1.default.isUnset(request.bizTypes)) {
            body["bizTypes"] = request.bizTypes;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("QueryFormByBizType", "workflow_1.0", "HTTP", "POST", "AK", `/v1.0/workflow/forms/forminfos/query`, "json", req, runtime), new QueryFormByBizTypeResponse({}));
    }
    async queryFormInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryFormInstanceHeaders({});
        return await this.queryFormInstanceWithOptions(request, headers, runtime);
    }
    async queryFormInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appUuid)) {
            query["appUuid"] = request.appUuid;
        }
        if (!tea_util_1.default.isUnset(request.formCode)) {
            query["formCode"] = request.formCode;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceId)) {
            query["formInstanceId"] = request.formInstanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QueryFormInstance", "workflow_1.0", "HTTP", "GET", "AK", `/v1.0/workflow/forms/instances`, "json", req, runtime), new QueryFormInstanceResponse({}));
    }
    async querySchemaByProcessCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySchemaByProcessCodeHeaders({});
        return await this.querySchemaByProcessCodeWithOptions(request, headers, runtime);
    }
    async querySchemaByProcessCodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appUuid)) {
            query["appUuid"] = request.appUuid;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            query["processCode"] = request.processCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        return $tea.cast(await this.doROARequest("QuerySchemaByProcessCode", "workflow_1.0", "HTTP", "GET", "AK", `/v1.0/workflow/forms/schemas/processCodes`, "json", req, runtime), new QuerySchemaByProcessCodeResponse({}));
    }
    async startProcessInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartProcessInstanceHeaders({});
        return await this.startProcessInstanceWithOptions(request, headers, runtime);
    }
    async startProcessInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.approvers)) {
            body["approvers"] = request.approvers;
        }
        if (!tea_util_1.default.isUnset(request.ccList)) {
            body["ccList"] = request.ccList;
        }
        if (!tea_util_1.default.isUnset(request.ccPosition)) {
            body["ccPosition"] = request.ccPosition;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.formComponentValues)) {
            body["formComponentValues"] = request.formComponentValues;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.originatorUserId)) {
            body["originatorUserId"] = request.originatorUserId;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            body["processCode"] = request.processCode;
        }
        if (!tea_util_1.default.isUnset(request.targetSelectActioners)) {
            body["targetSelectActioners"] = request.targetSelectActioners;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        return $tea.cast(await this.doROARequest("StartProcessInstance", "workflow_1.0", "HTTP", "POST", "AK", `/v1.0/workflow/processInstances`, "json", req, runtime), new StartProcessInstanceResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map