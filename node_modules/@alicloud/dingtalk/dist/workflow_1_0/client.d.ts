/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AvaliableTemplate extends $tea.Model {
    name?: string;
    processCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormComponent extends $tea.Model {
    children?: FormComponent[];
    componentType?: string;
    props?: FormComponentProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormComponentProps extends $tea.Model {
    addressModel?: string;
    align?: string;
    asyncCondition?: boolean;
    availableTemplates?: AvaliableTemplate[];
    bizAlias?: string;
    bizType?: string;
    choice?: string;
    commonBizType?: string;
    componentId?: string;
    content?: string;
    dataSource?: FormDataSource;
    disabled?: boolean;
    duration?: boolean;
    format?: string;
    formula?: string;
    invisible?: boolean;
    label?: string;
    limit?: number;
    link?: string;
    mode?: string;
    multiple?: boolean;
    options?: SelectOption[];
    placeholder?: string;
    print?: string;
    required?: boolean;
    statField?: FormComponentPropsStatField[];
    tableViewMode?: string;
    unit?: string;
    upper?: string;
    verticalPrint?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormDataSource extends $tea.Model {
    target?: FormDataSourceTarget;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectOption extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormCreateRequest extends $tea.Model {
    description?: string;
    formComponents?: FormComponent[];
    name?: string;
    processCode?: string;
    templateConfig?: FormCreateRequestTemplateConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormCreateResponseBody extends $tea.Model {
    result?: FormCreateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormCreateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: FormCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmProcCodesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmProcCodesResponseBody extends $tea.Model {
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmProcCodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetCrmProcCodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigRequest extends $tea.Model {
    procCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBody extends $tea.Model {
    result?: GetProcessConfigResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetProcessConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantCspaceAuthorizationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantCspaceAuthorizationRequest extends $tea.Model {
    durationSeconds?: number;
    spaceId?: string;
    type?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantCspaceAuthorizationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastRequest extends $tea.Model {
    deptId?: number;
    formComponentValues?: ProcessForecastRequestFormComponentValues[];
    processCode?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBody extends $tea.Model {
    result?: ProcessForecastResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ProcessForecastResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllFormInstancesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllFormInstancesRequest extends $tea.Model {
    appUuid?: string;
    formCode?: string;
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllFormInstancesResponseBody extends $tea.Model {
    result?: QueryAllFormInstancesResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllFormInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryAllFormInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesRequest extends $tea.Model {
    appUuid?: string;
    endTimeInMills?: number;
    maxResults?: number;
    nextToken?: string;
    processCode?: string;
    startTimeInMills?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponseBody extends $tea.Model {
    result?: QueryAllProcessInstancesResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryAllProcessInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormByBizTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormByBizTypeRequest extends $tea.Model {
    appUuid?: string;
    bizTypes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormByBizTypeResponseBody extends $tea.Model {
    result?: QueryFormByBizTypeResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormByBizTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryFormByBizTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormInstanceRequest extends $tea.Model {
    appUuid?: string;
    formCode?: string;
    formInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormInstanceResponseBody extends $tea.Model {
    appUuid?: string;
    attributes?: {
        [key: string]: any;
    };
    createTimestamp?: number;
    creator?: string;
    formCode?: string;
    formInstDataList?: QueryFormInstanceResponseBodyFormInstDataList[];
    formInstanceId?: string;
    modifier?: string;
    modifyTimestamp?: number;
    outBizCode?: string;
    outInstanceId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryFormInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeRequest extends $tea.Model {
    appUuid?: string;
    processCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBody extends $tea.Model {
    result?: QuerySchemaByProcessCodeResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySchemaByProcessCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceRequest extends $tea.Model {
    approvers?: StartProcessInstanceRequestApprovers[];
    ccList?: string[];
    ccPosition?: string;
    deptId?: number;
    formComponentValues?: StartProcessInstanceRequestFormComponentValues[];
    microappAgentId?: number;
    originatorUserId?: string;
    processCode?: string;
    targetSelectActioners?: StartProcessInstanceRequestTargetSelectActioners[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceResponseBody extends $tea.Model {
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: StartProcessInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormComponentPropsStatField extends $tea.Model {
    componentId?: string;
    label?: string;
    upper?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormDataSourceTarget extends $tea.Model {
    appType?: number;
    appUuid?: string;
    bizType?: string;
    formCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormCreateRequestTemplateConfig extends $tea.Model {
    dirId?: string;
    disableDeleteProcess?: boolean;
    disableFormEdit?: boolean;
    disableHomepage?: boolean;
    disableResubmit?: boolean;
    disableStopProcessButton?: boolean;
    hidden?: boolean;
    originDirId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FormCreateResponseBodyResult extends $tea.Model {
    processCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBodyResultCommentConf extends $tea.Model {
    commentDescription?: string;
    commentHiddenForProposer?: boolean;
    commentRequired?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBodyResultHandSignConf extends $tea.Model {
    handSignEnable?: boolean;
    resignEnable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBodyResultSubstituteSubmitConfSubmitterList extends $tea.Model {
    name?: string;
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBodyResultSubstituteSubmitConf extends $tea.Model {
    enable?: boolean;
    submitterList?: GetProcessConfigResponseBodyResultSubstituteSubmitConfSubmitterList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBodyResultTitleGenRule extends $tea.Model {
    express?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBodyResultVisibility extends $tea.Model {
    type?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessConfigResponseBodyResult extends $tea.Model {
    abstractGenRule?: string[];
    activityAuth?: string;
    allowRevoke?: boolean;
    appendEnable?: boolean;
    autoExecuteOriginatorTasks?: boolean;
    bizCategoryId?: string;
    bizType?: string;
    commentConf?: GetProcessConfigResponseBodyResultCommentConf;
    duplicateRemoval?: string;
    formSchema?: string;
    handSignConf?: GetProcessConfigResponseBodyResultHandSignConf;
    managers?: string[];
    name?: string;
    processAppType?: boolean;
    processConfig?: string;
    staticProc?: boolean;
    substituteSubmitConf?: GetProcessConfigResponseBodyResultSubstituteSubmitConf;
    titleGenRule?: GetProcessConfigResponseBodyResultTitleGenRule;
    visibility?: GetProcessConfigResponseBodyResultVisibility[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastRequestFormComponentValuesDetailsDetails extends $tea.Model {
    bizAlias?: string;
    componentType?: string;
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastRequestFormComponentValuesDetails extends $tea.Model {
    bizAlias?: string;
    details?: ProcessForecastRequestFormComponentValuesDetailsDetails[];
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastRequestFormComponentValues extends $tea.Model {
    bizAlias?: string;
    componentType?: string;
    details?: ProcessForecastRequestFormComponentValuesDetails[];
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeApprovals extends $tea.Model {
    userName?: string;
    workNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeLabels extends $tea.Model {
    labelNames?: string;
    labels?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRange extends $tea.Model {
    approvals?: ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeApprovals[];
    labels?: ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRangeLabels[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActor extends $tea.Model {
    actorActivateType?: string;
    actorKey?: string;
    actorSelectionRange?: ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActorActorSelectionRange;
    actorSelectionType?: string;
    actorType?: string;
    allowedMulti?: boolean;
    approvalMethod?: string;
    approvalType?: string;
    required?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBodyResultWorkflowActivityRules extends $tea.Model {
    activityId?: string;
    activityName?: string;
    activityType?: string;
    isTargetSelect?: boolean;
    prevActivityId?: string;
    workflowActor?: ProcessForecastResponseBodyResultWorkflowActivityRulesWorkflowActor;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBodyResultWorkflowForecastNodes extends $tea.Model {
    activityId?: string;
    outId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessForecastResponseBodyResult extends $tea.Model {
    isForecastSuccess?: boolean;
    isStaticWorkflow?: boolean;
    processCode?: string;
    processId?: number;
    userId?: string;
    workflowActivityRules?: ProcessForecastResponseBodyResultWorkflowActivityRules[];
    workflowForecastNodes?: ProcessForecastResponseBodyResultWorkflowForecastNodes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllFormInstancesResponseBodyResultValuesFormInstDataList extends $tea.Model {
    bizAlias?: string;
    componentType?: string;
    extendValue?: string;
    key?: string;
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllFormInstancesResponseBodyResultValues extends $tea.Model {
    appUuid?: string;
    attributes?: {
        [key: string]: any;
    };
    createTimestamp?: number;
    creator?: string;
    formCode?: string;
    formInstDataList?: QueryAllFormInstancesResponseBodyResultValuesFormInstDataList[];
    formInstanceId?: string;
    modifier?: string;
    modifyTimestamp?: number;
    outBizCode?: string;
    outInstanceId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllFormInstancesResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    maxResults?: number;
    nextToken?: string;
    values?: QueryAllFormInstancesResponseBodyResultValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponseBodyResultListFormComponentValues extends $tea.Model {
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponseBodyResultListOperationRecordsAttachments extends $tea.Model {
    fileId?: string;
    fileName?: string;
    fileSize?: string;
    fileType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponseBodyResultListOperationRecords extends $tea.Model {
    attachments?: QueryAllProcessInstancesResponseBodyResultListOperationRecordsAttachments[];
    operationType?: string;
    remark?: string;
    result?: string;
    timestamp?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponseBodyResultListTasks extends $tea.Model {
    activityId?: string;
    createTimestamp?: number;
    finishTimestamp?: number;
    result?: string;
    status?: string;
    taskId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponseBodyResultList extends $tea.Model {
    attachedProcessInstanceIds?: string;
    businessId?: string;
    createTime?: number;
    finishTime?: number;
    formComponentValues?: QueryAllProcessInstancesResponseBodyResultListFormComponentValues[];
    mainProcessInstanceId?: string;
    operationRecords?: QueryAllProcessInstancesResponseBodyResultListOperationRecords[];
    originatorDeptId?: string;
    originatorUserid?: string;
    processInstanceId?: string;
    result?: string;
    status?: string;
    tasks?: QueryAllProcessInstancesResponseBodyResultListTasks[];
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllProcessInstancesResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    list?: QueryAllProcessInstancesResponseBodyResultList[];
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormByBizTypeResponseBodyResult extends $tea.Model {
    appType?: number;
    appUuid?: string;
    bizType?: string;
    content?: string;
    createTime?: number;
    creator?: string;
    formCode?: string;
    formUuid?: string;
    memo?: string;
    modifedTime?: number;
    name?: string;
    ownerId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFormInstanceResponseBodyFormInstDataList extends $tea.Model {
    bizAlias?: string;
    componentType?: string;
    extendValue?: string;
    key?: string;
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildrenProps extends $tea.Model {
    bizAlias?: string;
    id?: string;
    label?: string;
    required?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildren extends $tea.Model {
    componentName?: string;
    props?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildrenProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkageTargets extends $tea.Model {
    behavior?: string;
    fieldId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkage extends $tea.Model {
    targets?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkageTargets[];
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsObjOptions extends $tea.Model {
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsPush extends $tea.Model {
    attendanceRule?: number;
    pushSwitch?: number;
    pushTag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsStatField extends $tea.Model {
    id?: string;
    label?: string;
    unit?: string;
    upper?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsProps extends $tea.Model {
    actionName?: string;
    align?: string;
    appId?: number;
    asyncCondition?: boolean;
    attendTypeLabel?: string;
    behaviorLinkage?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsBehaviorLinkage[];
    bizAlias?: string;
    bizType?: string;
    childFieldVisible?: boolean;
    choice?: number;
    commonBizType?: string;
    disabled?: boolean;
    duration?: boolean;
    durationLabel?: string;
    eSign?: boolean;
    extract?: boolean;
    fieldsInfo?: string;
    format?: string;
    formula?: string;
    hidden?: boolean;
    hiddenInApprovalDetail?: boolean;
    hideLabel?: boolean;
    holidayOptions?: {
        [key: string]: string;
    }[];
    id?: string;
    label?: string;
    labelEditableFreeze?: boolean;
    link?: string;
    mainTitle?: string;
    notPrint?: string;
    notUpper?: string;
    objOptions?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsObjOptions[];
    options?: string[];
    payEnable?: boolean;
    placeholder?: string;
    push?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsPush;
    pushToAttendance?: boolean;
    pushToCalendar?: number;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    showAttendOptions?: boolean;
    staffStatusEnabled?: boolean;
    statField?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsPropsStatField[];
    unit?: string;
    useCalendar?: boolean;
    verticalPrint?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContentItems extends $tea.Model {
    children?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsChildren[];
    componentName?: string;
    props?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItemsProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResultSchemaContent extends $tea.Model {
    icon?: string;
    items?: QuerySchemaByProcessCodeResponseBodyResultSchemaContentItems[];
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchemaByProcessCodeResponseBodyResult extends $tea.Model {
    appType?: number;
    appUuid?: string;
    bizType?: string;
    creatorUid?: number;
    creatorUserId?: string;
    customSetting?: string;
    engineType?: number;
    formCode?: string;
    formUuid?: string;
    gmtCreate?: string;
    gmtModified?: string;
    icon?: string;
    listOrder?: number;
    memo?: string;
    name?: string;
    ownerId?: string;
    ownerIdType?: string;
    procType?: string;
    schemaContent?: QuerySchemaByProcessCodeResponseBodyResultSchemaContent;
    status?: string;
    visibleRange?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceRequestApprovers extends $tea.Model {
    actionType?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceRequestFormComponentValuesDetailsDetails extends $tea.Model {
    bizAlias?: string;
    componentType?: string;
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceRequestFormComponentValuesDetails extends $tea.Model {
    bizAlias?: string;
    details?: StartProcessInstanceRequestFormComponentValuesDetailsDetails[];
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceRequestFormComponentValues extends $tea.Model {
    bizAlias?: string;
    componentType?: string;
    details?: StartProcessInstanceRequestFormComponentValuesDetails[];
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartProcessInstanceRequestTargetSelectActioners extends $tea.Model {
    actionerKey?: string;
    actionerUserIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    formCreate(request: FormCreateRequest): Promise<FormCreateResponse>;
    formCreateWithOptions(request: FormCreateRequest, headers: FormCreateHeaders, runtime: $Util.RuntimeOptions): Promise<FormCreateResponse>;
    getCrmProcCodes(): Promise<GetCrmProcCodesResponse>;
    getCrmProcCodesWithOptions(headers: GetCrmProcCodesHeaders, runtime: $Util.RuntimeOptions): Promise<GetCrmProcCodesResponse>;
    getProcessConfig(request: GetProcessConfigRequest): Promise<GetProcessConfigResponse>;
    getProcessConfigWithOptions(request: GetProcessConfigRequest, headers: GetProcessConfigHeaders, runtime: $Util.RuntimeOptions): Promise<GetProcessConfigResponse>;
    grantCspaceAuthorization(request: GrantCspaceAuthorizationRequest): Promise<GrantCspaceAuthorizationResponse>;
    grantCspaceAuthorizationWithOptions(request: GrantCspaceAuthorizationRequest, headers: GrantCspaceAuthorizationHeaders, runtime: $Util.RuntimeOptions): Promise<GrantCspaceAuthorizationResponse>;
    processForecast(request: ProcessForecastRequest): Promise<ProcessForecastResponse>;
    processForecastWithOptions(request: ProcessForecastRequest, headers: ProcessForecastHeaders, runtime: $Util.RuntimeOptions): Promise<ProcessForecastResponse>;
    queryAllFormInstances(request: QueryAllFormInstancesRequest): Promise<QueryAllFormInstancesResponse>;
    queryAllFormInstancesWithOptions(request: QueryAllFormInstancesRequest, headers: QueryAllFormInstancesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllFormInstancesResponse>;
    queryAllProcessInstances(request: QueryAllProcessInstancesRequest): Promise<QueryAllProcessInstancesResponse>;
    queryAllProcessInstancesWithOptions(request: QueryAllProcessInstancesRequest, headers: QueryAllProcessInstancesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllProcessInstancesResponse>;
    queryFormByBizType(request: QueryFormByBizTypeRequest): Promise<QueryFormByBizTypeResponse>;
    queryFormByBizTypeWithOptions(request: QueryFormByBizTypeRequest, headers: QueryFormByBizTypeHeaders, runtime: $Util.RuntimeOptions): Promise<QueryFormByBizTypeResponse>;
    queryFormInstance(request: QueryFormInstanceRequest): Promise<QueryFormInstanceResponse>;
    queryFormInstanceWithOptions(request: QueryFormInstanceRequest, headers: QueryFormInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryFormInstanceResponse>;
    querySchemaByProcessCode(request: QuerySchemaByProcessCodeRequest): Promise<QuerySchemaByProcessCodeResponse>;
    querySchemaByProcessCodeWithOptions(request: QuerySchemaByProcessCodeRequest, headers: QuerySchemaByProcessCodeHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySchemaByProcessCodeResponse>;
    startProcessInstance(request: StartProcessInstanceRequest): Promise<StartProcessInstanceResponse>;
    startProcessInstanceWithOptions(request: StartProcessInstanceRequest, headers: StartProcessInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<StartProcessInstanceResponse>;
}
